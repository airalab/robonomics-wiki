{"hash":"17a604e45f7e10d1f6dfb26852a2a05067b6e681","data":{"doc":{"id":"2a669f5338ceb2a3e5f8d74959d53372","title":"Python interface and Robonomics IO","description":"","contributors":["PaTara43"],"headings":[],"subtitles":[{"depth":2,"value":"robonomics-interface","anchor":"#robonomics-interface"},{"depth":3,"value":"Installation","anchor":"#installation"},{"depth":3,"value":"Sample use","anchor":"#sample-use"},{"depth":3,"value":"IPFS gateway.","anchor":"#ipfs-gateway"},{"depth":2,"value":"CLI tool","anchor":"#cli-tool"}],"content":"\n**Some extrinsics implemented in Robonomics pallets are hard to be submitted from the Polkadot app. More that, there is \na need to interact with this functionality using programming languages. For this purpose a simple Python tool was developed\ncalled [robonomics-interface](https://github.com/Multi-Agent-io/robonomics-interface). It's a wrapper over polkascan-maintained \n[py-substrate-interface](https://github.com/polkascan/py-substrate-interface). Below is a brief description of this package\nand some useful links and examples. Also, CLI tools is discussed.**\n\n## robonomics-interface\n\nAvailable on [PyPi](https://pypi.org/project/robonomics-interface/) package is ready to download and set up.\nThere is a detailed docstring-generated [documentation](https://multi-agent-io.github.io/robonomics-interface/) available as well.\n\nAll in all, this is a tool for developers who wish to interact with Robonomics blockchain via programming tools. Almost \nall the Python projects of Robonomics team which interact with the parachain use this interface.\n\n### Installation\n\nThe installation process requires user to have at least Python 3.8 installed. Neither `x86`, nor `arm7`, nor `arm8`\narchitectures require compilation process. All the wheels are built and published by dependencies maintainers.\n\n`pip` is used as an installation tool:\n\n```bash\n$ pip3 install robonomics_interface\n```\n\n### Sample use\n\nThe main idea is to create an `Account` instance and then use it to create pallet-dedicated instances.\n\n\n```python\nfrom robonomicsinterface import Account, Datalog\naccount = Account()\ndatalog_ = Datalog(account)\ndatalog_.get_item(addr=\"4G1V6yyvrkd3Z57H1giUky8RTRX3SZieRvuDpQzK4knNRy5R\",index=2)\n\n>>> (1657226418528, 'blah')\n```\n\n<robo-wiki-note type=\"note\" title=\"Local node\">\n\n  It is also possible to use custom endpoints (e.g. local node for testing):\n\n  ```python\n  account = Account(remote_ws=\"ws://127.0.0.1:9944\")\n  ```\n\n</robo-wiki-note>\n\nExtrinsics are also possible to submit:\n\n```python\nfrom robonomicsinterface import Account, Datalog\naccount = Account(seed=\"one two three four five six seven eight nine ten eleven twelve\")\ndatalog_ = Datalog(account)\ndatalog_.record(\"Hello, Robonomics!\")\n\n>>> 0xb2f742b6164ffc14b75a21188b37287c2416e6617635805e0a77db12773f6068  # this is an extrinsic hash\n```\n\n<robo-wiki-note type=\"note\" title=\"Docs\">\n\n  As have been said, more examples are available on the [documentation](https://multi-agent-io.github.io/robonomics-interface/) page.\n\n</robo-wiki-note>\n\n### IPFS gateway.\n\nThere is an utility to upload files to IPFS via Web3-authenticate gateway provided by [Crust](https://crust.network/):\n\n```python\nfrom robonomicsinterface.utils import ipfs_get_content, ipfs_upload_content\n\nseed = \"one two three four five six seven eight nine ten eleven twelve\"\n\ncontent = \"Hello, World!\"\ncid, size = ipfs_upload_content(tester_tokens_seed, content)\nprint(cid, size)\n\ncontent_ = ipfs_get_content(cid)\nprint(content_)\n\n\nwith open(\"path_to_file\", 'rb') as f:\n    content = f.read()\ncid, size = ipfs_upload_content(tester_tokens_seed, content)\nprint(cid, size)\n\ncontent_ = ipfs_get_content(cid)\nwith open(\"path_to_the_fetched_file\", 'wb') as f:\n    f.write(content_)\n```\n\n## CLI tool\n\n`robonomics-interface` also contains a Python `click` CLI tools to use for purposes of prototyping and quick tests. It is installed\nwith the package and available in the Terminal:\n\n```bash\n$ robomomics_interface --help\n\n#Usage: robonomics_interface [OPTIONS] COMMAND [ARGS]...\n#\n#Options:\n#  --help  Show this message and exit.\n#\n#Commands:\n#  read   Subscribe to datalog/launch events in the chain\n#  write  Send various extrinsics (launch commands or record datalogs)\n```\n\nYou may try to use it with local node. Pipeline philosophy is adopted:\n\n```bash\n$ echo \"Hello, Robonomics!\" | robonomics_interface write datalog -s \"//Alice\" --remote_ws \"ws://127.0.0.1:9944\"\n\n#0x22dbac7d25d2ee67c7d985f074163f674c8c9b4c554e545ca4c7186307e9023c  # this is an extrinsic hash\n```","tools":["Robonomics 2.3.0 https://github.com/airalab/robonomics","robonomics_interface 1.3.5 https://github.com/Multi-Agent-io/robonomics-interface"],"fileInfo":{"path":"rinterface.md","name":"rinterface"}}},"context":{}}