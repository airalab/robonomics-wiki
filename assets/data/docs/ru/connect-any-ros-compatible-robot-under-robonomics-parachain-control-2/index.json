{"hash":"e07834b7c9d5fbd855c8bb0eb62176355bee4599","data":{"doc":{"id":"81ca73c72133bc227a37623af3a10b13","title":"Connect any ROS-compatible robot under Robonomics parachain control. Part 2, IPFS","description":"","cover_image":{"type":"image","mimeType":"image/png","src":"/assets/static/connect-any-ros-compatible-robot-under-robonomics-parachain-control-2.0b85c65.b72838f7d6787574834359c6461b639d.png","size":{"width":1920,"height":1080},"sizes":"(max-width: 1920px) 100vw, 1920px","srcset":["/assets/static/connect-any-ros-compatible-robot-under-robonomics-parachain-control-2.1b91758.b72838f7d6787574834359c6461b639d.png 480w","/assets/static/connect-any-ros-compatible-robot-under-robonomics-parachain-control-2.3df3210.b72838f7d6787574834359c6461b639d.png 1024w","/assets/static/connect-any-ros-compatible-robot-under-robonomics-parachain-control-2.0b85c65.b72838f7d6787574834359c6461b639d.png 1920w"],"dataUri":"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 1920 1080' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-d9403bde3a109f18127e38c8966f71d4'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='40'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-d9403bde3a109f18127e38c8966f71d4)' width='1920' height='1080' xlink:href='data:image/png%3bbase64%2ciVBORw0KGgoAAAANSUhEUgAAAEAAAAAkCAYAAAA5DDySAAAACXBIWXMAAAsSAAALEgHS3X78AAAFZElEQVRo3u1YZ1OcVRTOT3Bi1A8qEtSYKI5txk/%2bB/2mXzLR0YFBQoIQQu8t1NBr6L33DkIIEAgQSkhipITe%2b1IXlsd7zrDMsnSzOiR5z8yd3fe855b3uc8595x75u3zF0HtnPYnOPv%2bR9DR/QaLMhlIFAoFNCVbW1s4jXLmLfHh1M5/9vUeAEiGhkfQ3duH/sEhPH32NwaHhtHXP4DxiUl09/RieGQUo%2bPj6Nm26R8cxPTMzE4fej83N39qQTjzptbH/PHf/3gZWhe/gPanX%2b0CIDk9E8bm1oiMTcAVPUMEhd%2bBncstON3yhruPP2yd3WHl4AILe2fEJ6chIDQC2flF0L9mCkd3L3jeDkRDUzOPtbm5efoAOPfBBWhd%2bhK6336Hdy/oQluAoQrAwuIixsYneMdpN8cnJjAxOYW5%2bXkMj45idm5u%2b/0EJqemxbtJyGRLmJ6ewRQ/T2FxUXZ6GcD%2bL0A4K5jwxnsfQufz1zAGEAjv6FzaEwNo0dQUCuWvYken%2bqzYbluHtFPNAGXbD4BXXSQAJAAkACQADgXg3zRV8I6y0VRTH%2b%2b4G3goAKp5AP2nTG6/pp4vsJ7tD84jVPuQ3VHjKv%2brZpPKo1h1zpMeuYcCQCKXb3DGdxyhxayvy3fp5HI5Z5Ora2ucFa6trXP2SLK8vMwZ5lFCmaU6q2ZmZ/cFU93uhQHIyMlDbGIKCkrKkJmbj8S0DCRnZCEtK4efi8sqEZOQjLLKP1FRfRcObp6sS0rLRFNLK/f7zdAYnn6BiIiJh7WjK3wCQ7jIon7J6VnIKyoR4%2bUiLikV6dm5SM3MRnF5JeJEbREYFombNg4IiYyGX0i4mLMAbR2d%2bMXAiMdLEbZUlxSVlot%2bOVyrrAmwNQZAWWU1UjKyESAWYu3kygvy8A2AT0AwDIzN4OUfhEixkNzCYpSIRVOhRAURfTCB0djcwgURFVPR8UkMzO2gUDQ%2baBEfm8cAe/kFMTDh0XFw9fLFFf2rXGQZ3bCAv/hoKrbovYunDxdmBIB/SAT3o/ksRSFm7%2brBQBAAKyurmgOA6KVKN3UhtGVLS3v0KysrmBIFkXpsUKj4KQm5hbrs5xaqvq90oYNkY2Pz2G5wJAB36%2boFpSuY7k3NrcjMyeddrK6tQ9eTv3gXnUTZS3QnCucWFIv/D1HX0Iiae3Wob3yA2vr7KK2oQmFJOb9/2N7B/ekOwScgBGFRsWKeBlTV1LJta1u7%2bG1AcEQU73Z5VTUSUzPQIMbq7HrM89Tcq0fd/SYeh9aQlVfA72mO8qqaY5ffRwKQX1QKS0FBd28/2Di54bqZFfu03jUTlImFkU8a/GG2TVlLpuhNG0eYWtrBTfS5YWUHE0vbnbuDq6bmwgXCYGHnxPEkOiEJUcI1fvjpMrsTzfGzcAGiPlHcVPT/1fA69MV8FAeKxGbQvQOBY2hiDmcPH3YDGpt0v4u1%2bAaG7joWXwgAorgq5dbX11lHNspjaE3oiPJU98/PL7BLLIkIT1QkO3re2NjA6uoq6%2bmGaGlpWZwCKzvj0v0CjUN6sqc56QSh/jQu6ZQnzOjYOD/T6UI2dMLQSaE8ccie/mvEBSiiU%2bDrePQY3T19HOzIR4l2A4NDaO/sgl9wOEIjY3BHBDo6HfIKS050T/BfZZwaCYJRcYnwFtTUMzKBua0ju8KTp8%2bELpivuiiKE8WJnr4iuiekpsPM2n5nt9TvEP7PphEGEDVJevueY2R0jClGl550QdrW8Yh1Shch95hfWMDzgcFTfxN0olT4OB%2bxn83LUEwduxgiMFTprP6sbvtKMOCgxatXXy9z6SzdB0gASABIAEgASABIAEgASAC8rgD8A7v47MeOcsYgAAAAAElFTkSuQmCC' /%3e%3c/svg%3e"},"contributors":["PaTara43"],"translated":false,"headings":[],"subtitles":[{"depth":2,"value":"1. Add dependencies","anchor":"#1-add-dependencies"},{"depth":2,"value":"2. Manage accounts in DAPP","anchor":"#2-manage-accounts-in-dapp"},{"depth":2,"value":"3. Launch","anchor":"#3-launch"}],"content":"\n**In this article we will continue using Robonomics tools to make a drone be controlled by a parachain. This time we will add sending data to IPFS and hash storing in chain options. Below is the instruction and code snippets. Requirements:**\n- [**Part 1 of this tutorial**](/docs/connect-any-ros-compatible-robot-under-robonomics-parachain-control-1)\n- Ubuntu 18.04 LTS\n- ROS Melodic + Gazebo + RViz (installation manual [here](http://wiki.ros.org/melodic/Installation))\n- IPFS 0.4.22 (download from [here](https://dist.ipfs.io/go-ipfs/v0.4.22/go-ipfs_v0.4.22_linux-386.tar.gz) and install)\n- Robonomics node (binary file) (download latest release [here](https://github.com/airalab/robonomics/releases))\n- Python dependencies:\n```\npip install cv_bridge ipfshttpclient\n```\nThe entire process of coding this part of demo is presented in a video below.\n\nhttps://www.youtube.com/watch?v=dliLb6GHgpo&feature=youtu.be\n\n\n## 1. Add dependencies\nIf we launch a simulation and look at the topic list (see previous tutorial), we will see, that there is one topic containing front camera data and using `sensor_msgs/Image` message type:\n\n![front_camera](../images/drone-demo/front_camera.jpg \"front_camera\")\n\nLet's try to take a picture every 1 second and after the flight publish these photos to IPFS. If you have completed the first tutorial, you don't need to download anything else. It's the `drone_sample_controller_pictures.py` script.\n## 2. Manage accounts in DAPP\nAs done in a previous tutorial, create a local robonomics network node with robonomics binary file:\n```\n./robonomics --dev\n```\n**Important!** Before next launches it is necessary to remove a directory `db` with\n```\nrm -rf /home/$USER/.local/share/robonomics/chains/dev/db\n```\nAfter a successful launch create accounts following [this](/docs/create-account-in-dapp) manual. **Do not forget to save each account's seed and address! You will need them for transactions**. Add these addresses, seeds and path to robonomics binary file to file `config.config` in `robonomics_ws/src/robonomics_sample_controller/src`. Transfer some money (units) to these accounts:\n\n![balances](../images/drone-demo/balances.jpg \"balances\")\n## 3. Launch\nUp to now the **only thing running** should be the robonomics local node. In a separate terminal launch drone simulation:\n```\nroslaunch sjtu_drone simple.launch\n```\nIn another one launch ipfs daemon:\n```\nifps init # you only need to do this once\nipfs daemon\n```\nRun the script:\n```\nrosrun drone_simulator_controller drone_sample_controller_pictures.py\n```\nNow you can send a transaction triggering the drone to start flying and taking pictures. To do so, you should use the Robonomics IO `write` subcommand of robonomics binary file:\n```\necho \"ON\" | ./robonomics io write launch -r <DRONE_ADDRESS> -s <EMPLOYER’S_KEY>\n```\nWhere `<DRONE_ADDRESS>`  and `<EMPLOYER’S_KEY>` are replaced with  previously saved strings accordingly.\nYou should see the log `\"Taking Off\"` and the drone should start flying and taking pictures:\n\n![flying_picturing](../images/drone-demo/flying_picturing.jpg \"flying_picturing\")\n\nLater, when the job is done, on the Robonomics portal go to `Developer` -> `Chain state` and add a `DRONE` datalog using `“+”` button with selected `datalog` as state query. The IPFS hash of the telemetry has been saved in the blockchain. To see the data simply copy the hash and add it to the local [gateway](https://gateway.ipfs.io/ipfs/QmeYYwD4y4DgVVdAzhT7wW5vrvmbKPQj8wcV2pAzjbj886/docs/getting-started/) address `localhost:8080/ipfs/`:\n\n![Voila](../images/drone-demo/datalog.jpg \"Voila\")\n"}},"context":{}}