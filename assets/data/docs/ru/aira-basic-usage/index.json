{"hash":"b04fea730f5bbb932c5bce674e56822c33cf08df","data":{"doc":{"id":"87681d6e7594efcbde5260488adbae2f","title":"Basic usage of AIRA","description":"","cover_image":"aira-basic-usage-ru.png","contributors":["akru"],"translated":false,"headings":[],"subtitles":[],"content":"\nTo get familiar with AIRA, let's see what is under the hood.\n\nOnce you launch the client several ros nodes will already be on the run. Here's a list of robonomics communication stack nodes:\n\n```bash\n$ rosnode list\n/eth/erc20_token\n/eth/eth_node\n/graph/aira_graph\n/liability/executor\n/liability/infochan/eth/signer\n/liability/infochan/ipfs_channel\n/liability/persistence\n/liability/listener\n/rosout\n```\n\n- `/eth/erc20_token`, `/eth/eth_node` - proved services for Ethereum blockchain and ERC20 tokens\n- `/graph/aira_graph` - service node for exploring other AIRA instances\n- `/liability/executor` - gets rosbag file from IPFS and plays it\n- `/liability/infochan/ipfs_channel` - is responsible for offer, demand and result messages. It catches messages from the channel and sends signed messages back\n- `/liability/infochan/eth/signer` - offers services for signing offer, demand and result messages\n- `/liability/listener` - watches for a new liability contracts. When the event is received the node calls executor node\n- `/liability/persistence` - helps to store incoming liabilities and restart them after shutdown\n\nAnd here's a list of robonomics stack topics.\n\n```bash\n$ rostopic list\n/eth/event/approval\n/eth/event/transfer\n/graph/greetings\n/liability/complete\n/liability/finalized\n/liability/incoming\n/liability/infochan/eth/sending/demand\n/liability/infochan/eth/sending/offer\n/liability/infochan/eth/sending/result\n/liability/infochan/eth/signing/demand\n/liability/infochan/eth/signing/offer\n/liability/infochan/eth/signing/result\n/liability/infochan/incoming/demand\n/liability/infochan/incoming/offer\n/liability/infochan/incoming/result\n/liability/persistence/add\n/liability/persistence/del\n/liability/persistence/update_timestamp\n/liability/ready\n/liability/result\n/rosout\n/rosout_agg\n```\n\nThe most important topics for us are:\n\n- `/liability/incoming` - when a new liability is created, this topic publishes Ethereum address of the contract\n- `/liability/result` - this topic is for publishing results. But don't publish a result directly to this topic! Use a service instead\n- `/liability/infochan/incoming/*` - a CPS gets information about offer, demand or result from corresponding topics\n- `/liability/infochan/eth/signing/*` - a CPS sends offer, demand or result messages to corresponding topics\n\nFor the details check out the [API page](/docs/robonomics-liability/).\n\nLet's start with greetings - say hello to AIRA!\n\nYou should just launch a pre-installed package `hello_aira`:\n\n```\n$ rosrun hello_aira hello_aira\n```\n\nWe've launched our agent. It will wait for a demand message. Now it's time to send the message. Go to [dapp](https://airalab.github.io/robonomics_tutorials/) and press Order.\nNow go back to the console and see the result!","tools":[]}},"context":{}}