{"hash":"a79c60e1f44a7df053a4690e4cfebb76cc79c05a","data":{"doc":{"id":"57bff9b173a46c19da69c362882f4d7f","title":"Подключение устройства Amazon FreeRTOS к Robonomics по протоколу MQTT","description":"","contributors":["khssnv"],"headings":[],"subtitles":[{"depth":2,"value":"Настройка оборудования","anchor":"#настройка-оборудования"},{"depth":2,"value":"Поток данных","anchor":"#поток-данных"},{"depth":2,"value":"Прошивка","anchor":"#прошивка"},{"depth":3,"value":"Wi-Fi Конфигурация","anchor":"#wi-fi-конфигурация"},{"depth":3,"value":"Настройка конечной точки MQTT","anchor":"#настройка-конечной-точки-mqtt"},{"depth":2,"value":"От MQTT к Robonomics","anchor":"#от-mqtt-к-robonomics"},{"depth":2,"value":"Использованные исходные ресурсы","anchor":"#использованные-исходные-ресурсы"}],"content":"\nВот демонстрация того, как микроконтроллер, работающий на [Amazon Web Services FreeRTOS](https://aws.amazon.com/freertos/), может быть подключен к сети Robonomics через MQTT. Пожалуйста, проверьте [этот репозиторий](http://github.com/khssnv/freertos_mqtt_robonomics_example) для получения исходного кода проекта.\n\nМы используем [ESP32 DevKitC](https://devices.amazonaws.com/detail/a3G0L00000AANtjUAH/ESP32-WROOM-32-DevKitC/) с дистрибутивом FreeRTOS и реализацией MQTT, предоставленной [Espressif IoT Development Framework](https://github.com/espressif/esp-idf), при этом Espressif является производителем используемого микроконтроллера.\n\nТакже есть датчик [PMS-3003](http://www.plantower.com/en/content/?107.html) в качестве демонстрации. Датчик измеряет наличие частиц в воздухе, и его можно использовать для оценки качества воздуха.\n\nКачество воздуха не является темой статьи, вы можете узнать больше об этом на веб-сайте ВОЗ: [Атмосферное (уличное) загрязнение воздуха](https://www.who.int/news-room/fact-sheets/detail/ambient-(outdoor)-air-quality-and-health). Цель системы - публикация измерений датчика в сети Robonomics от Airalab.\n\n## Настройка оборудования\n\nМы подключаем PMS3003 TXD PIN5 к ESP32 DevKitC IO17 для передачи измерений по UART.\nТакже оба устройства требуют питания и общего заземления.\n\n![Wiring Diagram](../images/freertos-mqtt/wiring.png)\n\n## Поток данных\n\nДля передачи измерений датчика в сеть Robonomics на уровне прошивки нашей целью является получение данных от датчика по встроенному протоколу связи, который он поддерживает (в нашем случае UART), и передача их в экземпляр AIRA по протоколу MQTT / TCP.\n\n![Sending](../images/freertos-mqtt/send.svg)\n\nВ нашем примере мы используем облачное развертывание AIRA, доступное по публичному IP-адресу и назначенному доменному имени.\nНа экземпляре AIRA мы настраиваем MQTT-брокер `mosquitto` и подписываемся на тему `/freertos_mqtt_robonomics_example/98:F4:AB:72:23:C4`, чтобы получать сообщения от MQTT.\n\nЗатем мы передаем сообщения в писатель `robonomics io` через канал.\n\n![Receiving](../images/freertos-mqtt/recv.svg)\n\nТеперь данные доступны в сети Robonomics, и мы можем прочитать их с помощью `robonomics io`.\n\n## Прошивка\n\nМы используем [пример приложения ESP-MQTT с TCP-транспортом](https://github.com/espressif/esp-idf/tree/master/examples/protocols/mqtt/tcp) в качестве основы.\n\nМы только модифицируем `main/app_main.c` для подключения по UART к датчику, синхронизации времени SNTP и периодической публикации MQTT.\n\nЕсли вы пытаетесь повторить проект и это ваш первый проект на базе ESP IDF, сначала ознакомьтесь с [Руководством по программированию ESP-IDF от Espressif](https://docs.espressif.com/projects/esp-idf/en/latest/esp32/get-started/index.html#installation-step-by-step), чтобы ознакомиться с операциями прошивки, такими как настройка, сборка и загрузка с помощью инструмента `idf.py`.\n\n### Wi-Fi Конфигурация\n\nДля связи с экземпляром AIRA, развернутым в облаке, нашему микроконтроллеру требуется подключение к Интернету.\nМы используем Wi-Fi ESP32 для этого.\nEspressif предоставляет утилиты для настройки встроенного Wi-Fi.\nВ нашем примере мы используем среду разработки с Ubuntu 20.04 GNU/Linux.\nДля настройки Wi-Fi мы переходим в папку проекта и запускаем инструмент настройки SDK.\n\n```console\ncd freertos_mqtt_robonomics_example/firmware\nidf.py menuconfig\n```\n\nЗатем мы устанавливаем SSID и пароль точки доступа Wi-Fi в разделе «Пример конфигурации подключения».\n\n![Menuconfig Wi-Fi](../images/freertos-mqtt/menuconfig-wi-fi.png)\n\n### Настройка конечной точки MQTT\n\nЕсть две вещи, которые нужно настроить для MQTT.\nПервое - это адрес брокера MQTT.\nОн настраивается с помощью инструмента настройки SDK.\n\n```console\ncd freertos_mqtt_robonomics_example/firmware\nidf.py menuconfig\n```\n\nУстановите `URL брокера` в разделе `Example Configuration`.\n\n![Menuconfig MQTT](../images/freertos-mqtt/menuconfig-mqtt.png)\n\nВторое - это тема MQTT.\nМы устанавливаем ее в прошивке с префиксом имени проекта, за которым следует MAC-адрес нашего ESP32.\nЭто дает нам `/freertos_mqtt_robonomics_example/98:F4:AB:72:23:C4` для нашей конкретной микросхемы.\n\n## От MQTT к Robonomics\n\nСначала давайте проверим, получаем ли мы данные по MQTT.\nМы можем подписаться на тему брокера MQTT Mosquitto, на которую устройство публикует.\n\n```console\n$ nix-shell -p mosquitto --run \"mosquitto_sub -h localhost -t '/freertos_mqtt_robonomics_example/98:F4:AB:72:23:C4'\"\nts=1615651809, PM1=2, PM2.5=6, PM10=3\n```\n\nЗдесь мы вводим пакет `mosquitto` в нашу среду, чтобы использовать утилиту `mosquitto_sub`.\nЗатем мы подписываемся на тему, установленную в прошивке.\nМы получили наши измерения, что означает, что AIRA правильно получает данные по MQTT.\nТеперь давайте направим эти сообщения в сеть Robonomics.\n\n```console\nnix-shell -p mosquitto --run \"mosquitto_sub -h localhost -t '/freertos_mqtt_robonomics_example/98:F4:AB:72:23:C4'\" | robonomics io write pubsub --bootnodes=/ip4/127.0.0.1/tcp/34333 /freertos_mqtt_robonomics_example\n```\n\nЗдесь мы используем утилиту `robonomics` для публикации сообщений в канале pubsub `/freertos_mqtt_robonomics_example`.\nМы указываем `bootnodes`, чтобы обеспечить установку хотя бы одного соединения.\n\nТеперь мы считываем эти сообщения из того же канала pubsub.\n\n```console\n$ robonomics io read pubsub --listen /ip4/127.0.0.1/tcp/34333 /freertos_mqtt_robonomics_example\n2021-03-27 15:15:51  Generated random peer id: 12D3KooWB2nym5E6c3aPpnPKK5wB9Z6n9eZzcXSpyUBozxhi6dam\n2021-03-27 15:15:51  Subscribed to topic: _robonomics_pubsub_peer_discovery\n2021-03-27 15:15:51  Subscribed to topic: /freertos_mqtt_robonomics_example\n2021-03-27 15:15:56  New peer connected: PeerId(\"12D3KooWRPLCioD2b9XLZTZJQELSAuQAyTrHUKzRktrQHtTSs6kS\")\n2021-03-27 15:15:56  GRAFT: Mesh link added for peer: PeerId(\"12D3KooWRPLCioD2b9XLZTZJQELSAuQAyTrHUKzRktrQHtTSs6kS\") in topic: TopicHash { hash: \"_robonomics_pubsub_peer_discovery\" }\nts=1616843855, PM1=3, PM2.5=4, PM10=3\n```\n\n## Использованные исходные ресурсы\n\n* Схема выводов ESP32 DevKitC от блога GoJimmy https://gojimmypi.blogspot.com/2017/03/jtag-debugging-for-esp32.html\n* Структура данных и декодер PSM3003 от OpenAirProject https://github.com/openairproject/sensor-esp32\n\n**Спасибо всем!**\n","tools":[],"fileInfo":{"path":"ru/freertos-mqtt.md","name":"freertos-mqtt"}}},"context":{}}