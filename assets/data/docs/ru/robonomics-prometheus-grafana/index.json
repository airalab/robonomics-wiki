{"hash":"b019132cdf18eb9f78219b0565b919b16f679c3f","data":{"doc":{"id":"7e865494bb6a151103643b9968791e02","title":"Robonomics + Prometheus + Grafana","description":"","contributors":["Vourhey"],"headings":[],"subtitles":[{"depth":2,"value":"Введение","anchor":"#введение"},{"depth":2,"value":"Предварительные требования","anchor":"#предварительные-требования"},{"depth":2,"value":"Шаг 1 - Создание учетных записей службы","anchor":"#шаг-1---создание-учетных-записей-службы"},{"depth":2,"value":"Шаг 2 - Загрузка Prometheus","anchor":"#шаг-2---загрузка-prometheus"},{"depth":2,"value":"Шаг 3 - Настройка Prometheus","anchor":"#шаг-3---настройка-prometheus"},{"depth":2,"value":"Step 4 — Запуск Prometheus","anchor":"#step-4--запуск-prometheus"},{"depth":2,"value":"Шаг 5 — Загрузка Node Exporter","anchor":"#шаг-5--загрузка-node-exporter"},{"depth":2,"value":"Step 6 — Запуск Node Exporter","anchor":"#step-6--запуск-node-exporter"},{"depth":2,"value":"Шаг 7 — Настройка Prometheus для сбора метрик Node Exporter","anchor":"#шаг-7--настройка-prometheus-для-сбора-метрик-node-exporter"},{"depth":2,"value":"Шаг 8 - Добавление встроенного в Robonomic node_exporter","anchor":"#шаг-8---добавление-встроенного-в-robonomic-node_exporter"},{"depth":2,"value":"Шаг 9 - Настройка Grafana","anchor":"#шаг-9---настройка-grafana"},{"depth":2,"value":"Ссылки","anchor":"#ссылки"}],"content":"\n**Следующая инструкция предоставлена [Hubo Bubo](https://github.com/hubobubo)**\n\n**Оригинальная статья находится [здесь](https://github.com/hubobubo/robonomics/wiki/Robonomics-(XRT)-metrics-using-Prometheus-and-Grafana)**\n\n## Введение\nДля более эффективного мониторинга и поддержки узлов Robonomics рекомендуется настроить мониторинг на основе сервера Prometheus и Grafana. В этом документе будет показано, как настроить каждый из них для полного мониторинга вашего узла.\n\n##  Предварительные требования\n* [Server Setup with Ubuntu 18.04](https://www.digitalocean.com/community/tutorials/initial-server-setup-with-ubuntu-18-04) \n* [Установленный коллатор Robonomics parachain](https://blog.aira.life/installing-and-running-the-robonomics-validator-in-the-polkadot-network-487ad4c1a567)\n* Убедитесь, что на вашем компьютере работает robonomics.service и порт 9615 доступен \n\n## Шаг 1 - Создание учетных записей службы\n\nВ целях безопасности мы начнем с создания двух новых учетных записей пользователей: prometheus и node_exporter. Создайте эти две учетные записи и используйте параметры _--no-create-home_ и _--shell /bin/false_, чтобы эти пользователи не могли войти на сервер.\n```\nsudo useradd --no-create-home --shell /bin/false prometheus\nsudo useradd --no-create-home --shell /bin/false node_exporter\n```\n\nПрежде чем мы загрузим двоичные файлы Prometheus, создайте необходимые каталоги для хранения файлов и данных Prometheus. Следуя стандартным соглашениям Linux, мы создадим каталог в _/etc_ для файлов конфигурации Prometheus и каталог в _/var/lib_ для его данных.\n```\nsudo mkdir /etc/prometheus\nsudo mkdir /var/lib/prometheus\n```\nТеперь установите владельца пользователя и группы на новые каталоги для пользователя prometheus.\n```\nsudo chown prometheus:prometheus /etc/prometheus\nsudo chown prometheus:prometheus /var/lib/prometheus\n```\n## Шаг 2 - Загрузка Prometheus\n\nСначала загрузите и распакуйте текущую стабильную версию Prometheus в ваш домашний каталог. Последние двоичные файлы можно найти на [странице загрузки Prometheus.](https://prometheus.io/download/)\n\n```\nwget https://github.com/prometheus/prometheus/releases/download/v2.21.0/prometheus-2.21.0.linux-amd64.tar.gz\n\n```\nТеперь распакуйте загруженный архив.\n\n```\ntar xvf prometheus-2.21.0.linux-amd64.tar.gz\n\n```\nЭто создаст каталог с именем prometheus-2.21.0.linux-amd64, содержащий два двоичных файла (prometheus и promtool), каталоги _consoles_ и _console_libraries_ с файлами интерфейса веб-страницы, лицензией, уведомлением и несколькими примерами файлов.\n\nСкопируйте два двоичных файла в каталог _/usr/local/bin_.\n\n```\nsudo cp prometheus-2.21.0.linux-amd64/prometheus /usr/local/bin/\nsudo cp prometheus-2.21.0.linux-amd64/promtool /usr/local/bin/\n\n```\nУстановите владельца пользователя и группы на двоичные файлы для пользователя prometheus, созданного на шаге 1.\n\n```\nsudo chown prometheus:prometheus /usr/local/bin/prometheus\nsudo chown prometheus:prometheus /usr/local/bin/promtool\n\n```\nСкопируйте каталоги consoles и _console_libraries_ в _/etc/prometheus_.\n\n```\nsudo cp -r prometheus-2.21.0.linux-amd64/consoles /etc/prometheus\nsudo cp -r prometheus-2.21.0.linux-amd64/console_libraries /etc/prometheus\n\n```\nУстановите владельца пользователя и группы на каталоги для пользователя prometheus. Использование флага -R гарантирует, что владение будет установлено и для файлов внутри каталога.\n\n```\nsudo chown -R prometheus:prometheus /etc/prometheus/consoles\nsudo chown -R prometheus:prometheus /etc/prometheus/console_libraries\n\n```\nТеперь, когда Prometheus установлен, мы создадим его файлы конфигурации и службы в предварительной подготовке к его первому запуску.\n\n## Шаг 3 - Настройка Prometheus\n\nВ каталоге _/etc/prometheus_ используйте nano или ваш текстовый редактор, чтобы создать файл конфигурации с именем _prometheus.yml_.\n\n```\nsudo nano /etc/prometheus/prometheus.yml\n\n```\nВ глобальных настройках определите интервал по умолчанию для сбора метрик. Обратите внимание, что Prometheus будет применять эти настройки ко всем экспортерам, если настройки самих экспортеров не переопределяют глобальные настройки.\n\n```\nglobal:\n  scrape_interval: 15s\n\n```\nЭто значение scrape_interval говорит Prometheus собирать метрики от своих экспортеров каждые 15 секунд, что достаточно для большинства экспортеров.\nТеперь добавьте сам Prometheus в список экспортеров для сбора с помощью следующей директивы scrape_configs:\n\n```\n...\nscrape_configs:\n  - job_name: 'prometheus'\n    scrape_interval: 5s\n    static_configs:\n      - targets: ['localhost:9090']\n```\nPrometheus использует _job_name_ для маркировки экспортеров в запросах и на графиках, поэтому выберите что-то описательное здесь.\n\nИ, поскольку Prometheus экспортирует важные данные о себе, которые можно использовать для мониторинга производительности и отладки, мы переопределили глобальную директиву scrape_interval с 15 секунд до 5 секунд для более частых обновлений.\n\nНаконец, Prometheus использует директивы _static_configs_ и _targets_ для определения места работы экспортеров. Поскольку этот экспортер работает на том же сервере, что и сам Prometheus, мы можем использовать localhost вместо IP-адреса вместе с портом по умолчанию, 9090.\n\nВаш файл конфигурации должен выглядеть так:\n\n```\nglobal:\n  scrape_interval: 15s\n\nscrape_configs:\n  - job_name: 'prometheus'\n    scrape_interval: 5s\n    static_configs:\n      - targets: ['localhost:9090']\n```\nСохраните файл и закройте текстовый редактор.\n\nТеперь установите владельца пользователя и группы на файл конфигурации для пользователя prometheus, созданного на шаге 1.\n\n```\nsudo chown prometheus:prometheus /etc/prometheus/prometheus.yml\n\n```\nС завершением настройки мы готовы протестировать Prometheus, запустив его в первый раз.\n\n## Step 4 — Запуск Prometheus\n\nЗапустите Prometheus от имени пользователя _prometheus_, указав путь к файлу конфигурации и каталогу данных.\n\n```\nsudo -u prometheus /usr/local/bin/prometheus \\\n    --config.file /etc/prometheus/prometheus.yml \\\n    --storage.tsdb.path /var/lib/prometheus/ \\\n    --web.console.templates=/etc/prometheus/consoles \\\n    --web.console.libraries=/etc/prometheus/console_libraries\n```\n\nВывод содержит информацию о прогрессе загрузки Prometheus, файле конфигурации и связанных службах. Он также подтверждает, что Prometheus слушает порт _9090_.\n\n```\n_log output_\nSep 14 17:55:53 robonomics systemd[1]: Started Prometheus.\nSep 14 17:55:53 robonomics prometheus[29488]: level=info ts=2020-09-14T15:55:53.347Z caller=main.go:310 msg=\"No time or size retention was set so using the default time retention\" duration=15d\nSep 14 17:55:53 robonomics prometheus[29488]: level=info ts=2020-09-14T15:55:53.350Z caller=main.go:346 msg=\"Starting Prometheus\" version=\"(version=2.21.0, branch=HEAD, revision=e83ef207b6c2398919b69cd87d2693cfc2fb4127)\"\nSep 14 17:55:53 robonomics prometheus[29488]: level=info ts=2020-09-14T15:55:53.351Z caller=main.go:347 build_context=\"(go=go1.15.2, user=root@a4d9bea8479e, date=20200911-11:35:02)\"\nSep 14 17:55:53 robonomics prometheus[29488]: level=info ts=2020-09-14T15:55:53.351Z caller=main.go:348 host_details=\"(Linux 4.15.0-112-generic #113-Ubuntu SMP Thu Jul 9 23:41:39 UTC 2020 x86_64 robonomics (none))\"\nSep 14 17:55:53 robonomics prometheus[29488]: level=info ts=2020-09-14T15:55:53.351Z caller=main.go:349 fd_limits=\"(soft=1024, hard=4096)\"\nSep 14 17:55:53 robonomics prometheus[29488]: level=info ts=2020-09-14T15:55:53.351Z caller=main.go:350 vm_limits=\"(soft=unlimited, hard=unlimited)\"\nSep 14 17:55:53 robonomics prometheus[29488]: level=info ts=2020-09-14T15:55:53.357Z caller=main.go:701 msg=\"Starting TSDB ...\"\nSep 14 17:55:53 robonomics prometheus[29488]: level=info ts=2020-09-14T15:55:53.368Z caller=web.go:523 component=web msg=\"Start listening for connections\" address=0.0.0.0:9090\nSep 14 17:55:53 robonomics prometheus[29488]: level=info ts=2020-09-14T15:55:53.372Z caller=head.go:644 component=tsdb msg=\"Replaying on-disk memory mappable chunks if any\"\nSep 14 17:55:53 robonomics prometheus[29488]: level=info ts=2020-09-14T15:55:53.373Z caller=head.go:658 component=tsdb msg=\"On-disk memory mappable chunks replay completed\" duration=12.659µs\nSep 14 17:55:53 robonomics prometheus[29488]: level=info ts=2020-09-14T15:55:53.373Z caller=head.go:664 component=tsdb msg=\"Replaying WAL, this may take a while\"\nSep 14 17:55:53 robonomics prometheus[29488]: level=info ts=2020-09-14T15:55:53.380Z caller=head.go:716 component=tsdb msg=\"WAL segment loaded\" segment=0 maxSegment=1\nSep 14 17:55:53 robonomics prometheus[29488]: level=info ts=2020-09-14T15:55:53.381Z caller=head.go:716 component=tsdb msg=\"WAL segment loaded\" segment=1 maxSegment=1\nSep 14 17:55:53 robonomics prometheus[29488]: level=info ts=2020-09-14T15:55:53.381Z caller=head.go:719 component=tsdb msg=\"WAL replay completed\" checkpoint_replay_duration=48.125µs wal_replay_duration=8.253748ms total_replay_duration=8.343335ms\nSep 14 17:55:53 robonomics prometheus[29488]: level=info ts=2020-09-14T15:55:53.383Z caller=main.go:721 fs_type=EXT4_SUPER_MAGIC\nSep 14 17:55:53 robonomics prometheus[29488]: level=info ts=2020-09-14T15:55:53.384Z caller=main.go:724 msg=\"TSDB started\"\nSep 14 17:55:53 robonomics prometheus[29488]: level=info ts=2020-09-14T15:55:53.384Z caller=main.go:850 msg=\"Loading configuration file\" filename=/etc/prometheus/prometheus.yml\nSep 14 17:55:53 robonomics prometheus[29488]: level=info ts=2020-09-14T15:55:53.384Z caller=main.go:881 msg=\"Completed loading of configuration file\" filename=/etc/prometheus/prometheus.yml totalDuration=908.135µs remote_storage=6.693µs web_handler=819ns query_engine=1.383µs scrape=400.232µs scrape_sd=41.679µs notify=1.1µs notify_sd=1.847µs rules=1.522µs\nSep 14 17:55:53 robonomics prometheus[29488]: level=info ts=2020-09-14T15:55:53.384Z caller=main.go:673 msg=\"Server is ready to receive web requests.\"\n```\nЕсли вы получаете сообщение об ошибке, убедитесь, что вы использовали синтаксис YAML в файле конфигурации, а затем следуйте инструкциям на экране для устранения проблемы.\n\nТеперь остановите Prometheus, нажав _CTRL+C_, а затем откройте новый файл службы _systemd_.\n\n```\nsudo nano /etc/systemd/system/prometheus.service\n\n```\nФайл службы указывает _systemd_ запустить Prometheus от имени пользователя prometheus, с файлом конфигурации, расположенным в каталоге _/etc/prometheus/prometheus.yml_, и сохранить данные в каталоге _/var/lib/prometheus_. Скопируйте следующее содержимое в файл:\n\n```\n[Unit]\nDescription=Prometheus\nWants=network-online.target\nAfter=network-online.target\n\n[Service]\nUser=prometheus\nGroup=prometheus\nType=simple\nExecStart=/usr/local/bin/prometheus \\\n    --config.file /etc/prometheus/prometheus.yml \\\n    --storage.tsdb.path /var/lib/prometheus/ \\\n    --web.console.templates=/etc/prometheus/consoles \\\n    --web.console.libraries=/etc/prometheus/console_libraries\n\n[Install]\nWantedBy=multi-user.target\n```\n\nНаконец, сохраните файл и закройте текстовый редактор. Чтобы использовать только что созданную службу, перезагрузите systemd.\n\n```\nsudo systemctl daemon-reload\n\n```\nТеперь вы можете запустить Prometheus с помощью следующей команды:\n\n```\nsudo systemctl start prometheus\n\n```\nЧтобы убедиться, что Prometheus работает, проверьте статус службы.\n\n```\nsudo systemctl status prometheus\n\n```\nВывод показывает статус Prometheus, идентификатор основного процесса (PID), использование памяти и многое другое.\n\nЕсли статус службы неактивен, следуйте инструкциям на экране и повторите предыдущие шаг для устранения проблемы перед продолжением обучения.\n\n```\n* prometheus.service - Prometheus\n   Loaded: loaded (/etc/systemd/system/prometheus.service; enabled; vendor preset: enabled)\n   Active: active (running) since Mon 2020-09-14 17:59:48 CEST; 24h ago\n Main PID: 29650 (prometheus)\n    Tasks: 9 (limit: 4915)\n   CGroup: /system.slice/prometheus.service\n           `-29650 /usr/local/bin/prometheus --config.file /etc/prometheus/prometheus.yml --storage.tsdb.path /var/lib/prometheus/ --web.console.templates=/etc/prometheus/consoles --web.console.libraries=/etc/prometheus/console_libraries\n```\n\nКогда вы будете готовы продолжить, нажмите _Q_ для выхода из команды статуса. Наконец, включите службу для запуска при загрузке.\n\n```\nsudo systemctl enable prometheus\n\n```\n\nТеперь, когда Prometheus работает, мы можем установить дополнительный экспортер для генерации метрик о ресурсах нашего сервера.\n\n## Шаг 5 — Загрузка Node Exporter\n\nЧтобы расширить Prometheus за пределы метрик только о себе, мы установим дополнительный экспортер под названием Node Exporter. Node Exporter предоставляет подробную информацию о системе, включая использование ЦП, диска и памяти. Загрузите текущую стабильную версию Node Exporter в ваш домашний каталог. Последние бинарные файлы можно найти на [странице загрузки Prometheus.](https://prometheus.io/download/)\n\n```\nwget https://github.com/prometheus/node_exporter/releases/download/v1.0.1/node_exporter-1.0.1.linux-amd64.tar.gz\n\n```\nТеперь распакуйте скачанный архив.\n\n```\ntar xvf node_exporter-1.0.1.linux-amd64.tar.gz\n\n```\nЭто создаст каталог с именем _node_exporter-1.0.1.linux-amd64_, содержащий двоичный файл с именем _node_exporter_, лицензию и уведомление.\n\nСкопируйте двоичный файл в каталог _/usr/local/bin_ и установите владельца пользователя и группы на пользователя node_exporter, созданного на Шаге 1.\n\n```\nsudo cp node_exporter-1.0.1.linux-amd64/node_exporter /usr/local/bin\nsudo chown node_exporter:node_exporter /usr/local/bin/node_exporter\n\n```\nТеперь, когда вы установили Node Exporter, давайте проверим его работу, запустив его перед созданием файла службы, чтобы он запускался при загрузке.\n\n## Step 6 — Запуск Node Exporter\n\nШаги для запуска Node Exporter аналогичны шагам для запуска самого Prometheus. Начните с создания файла службы Systemd для Node Exporter.\n\n```\nsudo nano /etc/systemd/system/node_exporter.service\n\n```\nСкопируйте следующее содержимое в файл службы:\n\n```\n[Unit]\nDescription=Node Exporter\nWants=network-online.target\nAfter=network-online.target\n\n[Service]\nUser=node_exporter\nGroup=node_exporter\nType=simple\nExecStart=/usr/local/bin/node_exporter --collector.systemd\n\n[Install]\nWantedBy=multi-user.target\n```\n\nСохраните файл и закройте текстовый редактор. Наконец, перезагрузите systemd, чтобы использовать только что созданную службу.\n\n```\nsudo systemctl daemon-reload\n\n```\nТеперь вы можете запустить Node Exporter с помощью следующей команды:\n\n```\nsudo systemctl start node_exporter\n\n```\nПроверка that Node Exporter’s running correctly with the status command.\n\n```\nsudo systemctl status node_exporter\n\n```\nКак и раньше, этот вывод показывает статус Node Exporter, идентификатор основного процесса (PID), использование памяти и многое другое. Если статус службы неактивен, следуйте инструкциям на экране и повторите предыдущие шаги для устранения проблемы перед продолжением.\n\n```\n_Output_\n* node_exporter.service - Node Exporter\n   Loaded: loaded (/etc/systemd/system/node_exporter.service; enabled; vendor preset: enabled)\n   Active: active (running) since Mon 2020-09-14 17:58:25 CEST; 1 day 1h ago\n Main PID: 29612 (node_exporter)\n    Tasks: 7 (limit: 4915)\n   CGroup: /system.slice/node_exporter.service\n           `-29612 /usr/local/bin/node_exporter --collector.systemd\n```\nНаконец, включите Node Exporter для запуска при загрузке.\n\n```\nsudo systemctl enable node_exporter\n\n```\nПосле полной настройки и успешного запуска Node Exporter мы скажем Prometheus начать сбор новых метрик.\n\n## Шаг 7 — Настройка Prometheus для сбора метрик Node Exporter\n\nПоскольку Prometheus собирает только экспортеры, которые определены в разделе scrape_configs его файла конфигурации, нам нужно добавить запись для Node Exporter, так же, как мы сделали для самого Prometheus. Откройте файл конфигурации.\n\n```\nsudo nano /etc/prometheus/prometheus.yml\n\n```\nВ конце блока scrape_configs добавьте новую запись с именем node_exporter.\n\n```\n...\n  - job_name: 'node_exporter'\n    scrape_interval: 5s\n    static_configs:\n      - targets: ['localhost:9100']\n```\nПоскольку этот экспортер также работает на том же сервере, что и сам Prometheus, мы можем использовать localhost вместо IP-адреса, а также порт по умолчанию Node Exporter, 9100. Весь ваш файл конфигурации должен выглядеть так:\n\n```\nglobal:\n  scrape_interval: 15s\n\nscrape_configs:\n  - job_name: 'prometheus'\n    scrape_interval: 5s\n    static_configs:\n      - targets: ['localhost:9090']\n  - job_name: 'node_exporter'\n    scrape_interval: 5s\n    static_configs:\n      - targets: ['localhost:9100']\n```\nСохраните файл и закройте текстовый редактор, когда будете готовы продолжить. Наконец, перезапустите Prometheus, чтобы изменения вступили в силу.\n\n```\nsudo systemctl restart prometheus\n\n```\nЕще раз убедитесь, что все работает правильно с помощью команды статуса.\n\n```\nsudo systemctl status prometheus\n\n```\nЕсли статус службы не установлен как активный, следуйте инструкциям на экране и повторите предыдущие шаги перед продолжением.\n\n```\nOutput\n* prometheus.service - Prometheus\n   Loaded: loaded (/etc/systemd/system/prometheus.service; enabled; vendor preset: enabled)\n   Active: active (running) since Tue 2020-09-15 19:06:56 CEST; 2s ago\n Main PID: 19725 (prometheus)\n    Tasks: 8 (limit: 4915)\n   CGroup: /system.slice/prometheus.service\n           `-19725 /usr/local/bin/prometheus --config.file /etc/prometheus/prometheus.yml --storage.tsdb.path /var/lib/prometheus/ --web.console.templates=/etc/prometheus/consoles --web.console.libraries=/etc/prometheus/console_libraries\n```\n\nТеперь у нас установлен, настроен и работает Prometheus и Node Exporter.\n\n## Шаг 8 - Добавление встроенного в Robonomic node_exporter\n\nПосле успешной установки Prometheus и node_exporter нам придется использовать встроенный экспортер Prometheus в каждом проекте подложки. Чтобы это произошло, нам нужно добавить дополнительную запись в _/etc/prometheus/prometheus.yml_.\nОткройте файл конфигурации.\n\n```\nsudo nano /etc/prometheus/prometheus.yml\n\n```\nВ конце блока scrape_configs добавьте новую запись с именем robonomic_exporter.\n\n``` \n  - job_name: 'robonomics_exporter'\n    scrape_interval: 5s\n    static_configs:\n      - targets: ['localhost:9615']\n```\nСохраните файл и закройте текстовый редактор. Весь ваш файл конфигурации должен выглядеть так:\n\n```\nglobal:\n  scrape_interval: 15s\n\nscrape_configs:\n  - job_name: 'prometheus'\n    scrape_interval: 5s\n    static_configs:\n      - targets: ['localhost:9090']\n  - job_name: 'node_exporter'\n    scrape_interval: 5s\n    static_configs:\n      - targets: ['localhost:9100']\n  - job_name: 'robonomics_exporter'\n    scrape_interval: 5s\n    static_configs:\n      - targets: ['localhost:9615']\n```\n\nНаконец, перезапустите Prometheus, чтобы изменения вступили в силу.\n\n```\nsudo systemctl restart prometheus\n\n```\nЕще раз убедитесь, что все работает правильно, с помощью команды status.\n\n```\nsudo systemctl status prometheus\n\n```\nУ нас теперь установлены, настроены и работают _Prometheus_, _Node Exporter_ и _Robonomic Exporter_. Теперь перейдите к Grafana\n\n## Шаг 9 - Настройка Grafana\n\nПоследний шаг - подключить Prometheus в качестве источника данных в Grafana. В этом руководстве мы будем использовать бесплатную облачную версию Grafana, которая позволяет иметь до 5 панелей мониторинга, а также отдельную [панель Robonomics](https://grafana.com/grafana/dashboards/13015). Просто перейдите на [grafana.com](https://grafana.com/), создайте новую учетную запись и войдите в свою новую учетную запись Grafana.\n\nСначала мы должны добавить в Grafana новый _**источник данных**_, который в нашем случае будет сервером Prometheus.\nПерейдите в раздел Источник данных:\n\n>![DataSource](../images/prometheus-grafana/grafana-6-2020-09-15-19-18-50-Window.png)\n\nЗатем нажмите **_Добавить источник данных_**\n\n>![DataSource](../images/prometheus-grafana/grafana-7-2020-09-15-19-18-50-Window.png)\n\nЗатем выберите _**Prometheus**_\n\n>![DataSource](../images/prometheus-grafana/grafana-8-2020-09-15-19-18-50-Window.png)\n\nНа новом экране введите **_IP-адрес вашего сервера Prometheus с портом 9090_**\n\n> ![DataSource](../images/prometheus-grafana/grafana-9-2020-09-15-19-18-50-Window.png)\n\nПосле этого нажмите _**Сохранить и проверить**_, если вы выполнили все шаги, то должны увидеть зеленую галочку и быть готовыми к импорту панели мониторинга. На главной странице нажмите **+**, а затем **Импорт**, как показано на рисунке ниже:\n\n> ![Import dashboard](../images/prometheus-grafana/grafana-1-2020-09-15-19-18-50-Window.png)\n\nЗатем вы увидите страницу импорта:\n\n> ![Import page](../images/prometheus-grafana/grafana-2-2020-09-15-19-18-50-Window.png)\n\nВ поле _URL или ID панели Grafana.com_ напишите _**13015**_ (так как это ID панели Robonomic)\n\n> ![Import Robonomic dashboard](../images/prometheus-grafana/grafana-3-2020-09-15-19-18-50-Window.png)\n\nПосле загрузки внешней панели мониторинга вы увидите этот экран:\n\n> ![XRT 13015 dashboard import](../images/prometheus-grafana/grafana-4-2020-09-15-19-18-50-Window.png)\n\nПоследний шаг - выбрать ранее созданный **_источник данных_** и нажать _**Импорт**_\n\n> ![Prometheus as a DataSource](../images/prometheus-grafana/grafana-5-2020-09-15-19-18-50-Window.png)\n\nВот и все! На этом этапе вы должны увидеть импортированную панель мониторинга. \n\n\n## Ссылки\n\n* [Как установить Prometheus на Ubuntu 16.04](https://www.digitalocean.com/community/tutorials/how-to-install-prometheus-on-ubuntu-16-04)\n* [Создание панели мониторинга с помощью Prometheus + Grafana](https://medium.com/htc-research-engineering-blog/build-a-monitoring-dashboard-by-prometheus-grafana-741a7d949ec2)\n* [Поддержка Grafana для Prometheus](https://prometheus.io/docs/visualization/grafana/)\n* [Мониторинг метрик хоста Linux с помощью node exporter](https://prometheus.io/docs/guides/node-exporter/)\n* [Запросы в Prometheus](https://prometheus.io/docs/prometheus/latest/querying/basics/)\n* [Визуализация метрик узла](https://substrate.dev/docs/en/tutorials/visualize-node-metrics/)\n* [Substrate Prometheus Exporter](https://github.com/paritytech/substrate/tree/master/utils/prometheus)\n* [polkadot-dashboard](https://github.com/w3f/polkadot-dashboard)\n* [Метрики узла Polkadot](https://grafana.com/grafana/dashboards/12425)\n* [Панель мониторинга Node Exporter для Prometheus](https://grafana.com/grafana/dashboards/11074)\n* [Метрики ROBONOMICS (XRT) в Grafana](https://grafana.com/grafana/dashboards/13015)\n\n","tools":[],"fileInfo":{"path":"ru/robonomics-prometheus-grafana.md","name":"robonomics-prometheus-grafana"}}},"context":{}}