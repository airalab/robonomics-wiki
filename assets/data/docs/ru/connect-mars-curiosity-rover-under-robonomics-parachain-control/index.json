{"hash":"30d51a24169c983cf10a623e506dc182a2deff8b","data":{"doc":{"id":"014c142832f57f070a312aabee48621b","title":"Подключить марсоход Curiosity под управлением парачейна Робономики","description":"","contributors":["Vourhey","PaTara43","katerina510"],"translated":true,"headings":[],"subtitles":[{"depth":3,"value":"1. Настройте симуляцию","anchor":"#1-настройте-симуляцию"},{"depth":3,"value":"2. Скачайте пакет контроллера Робономики","anchor":"#2-скачайте-пакет-контроллера-робономики"},{"depth":3,"value":"3. Управление аккаунтами в децентрализованном приложении","anchor":"#3-управление-аккаунтами-в-децентрализованном-приложении"},{"depth":3,"value":"4. Запустите Робономику","anchor":"#4-запустите-робономику"}],"content":"\n**Давайте посмотрим, как контроль Парачейна Робономики заставляет двигаться марсоход Curiosity. Требования:**\n- ROS Melodic + Gazebo + RViz (руководство по установке [здесь](http://wiki.ros.org/melodic/Installation))\n- дополнительные пакеты:\n```shell\nsudo apt-get install ros-melodic-gazebo-ros-control ros-melodic-effort-controllers ros-melodic-joint-state-controller\n```\n- IPFS до [0.6.0](https://dist.ipfs.io/go-ipfs/v0.6.0/go-ipfs_v0.6.0_linux-386.tar.gz)\n- расширение [IPFS Companion](https://github.com/ipfs/ipfs-companion)\n- узел Робономики (двоичный файл) (скачайте последнюю версию [здесь](https://github.com/airalab/robonomics/releases). Это руководство было успешно протестировано на v1.1)\n\nВ этом видео показан успешный запуск:\n\nhttps://www.youtube.com/watch?v=6BSOyRbmac8\n\n### 1. Настройте симуляцию\nСкачайте пакет для марсохода Curiosity:\n```shell\nmkdir -p robonomics_ws/src\ncd robonomics_ws/src\ngit clone https://bitbucket.org/theconstructcore/curiosity_mars_rover/src/master/\ncd ..\ncatkin build\n```\nНужно настроить начальные условия, чтобы наш марсоход успешно появился:\n- Перейдите в\n\n`src/master/curiosity_mars_rover_description/worlds` и измените строку 14 файла `mars_curiosity.world` на \n`<pose>0 0 8 0 0 0</pose>`\n\n- Перейдите в\n\n`src/master/curiosity_mars_rover_description/launch` и измените строку 4 файла `mars_curiosity_world.launch` на\n`<arg name=\"paused\" default=\"false\"/>`\n\nНе забудьте добавить команду source в `~/.bashrc`\n`source /home/$USER/robonomics_ws/devel/setup.bash`\n\n\n- Перезагрузите консоль и запустите симуляцию:\n\n```shell\nroslaunch curiosity_mars_rover_description main_real_mars.launch\n```\n![марсоход](../images/curiosity-demo/rover.jpg?raw=true \"Марсоход\")\n\nЗаметьте: если картинка темная, например, затененная, измените `Camera` на `Orthorgraphic` в панели инструментов Gazebo.\nСимуляцию можно закрыть на некоторое время.\n\n------------\n\n### 2. Скачайте пакет контроллера Робономики\nЧтобы загрузить пакет контролера для типа марсоход, введите в терминале:\n```shell\ncd ~/robonomics_ws/src\ngit clone https://github.com/PaTara43/robonomics_sample_controller\ncd robonomics_sample_controller\npip3 install -r requirements.txt\npip3 install rospkg\ncd ..\ncatkin build -DPYTHON_EXECUTABLE=/usr/bin/python3 # The controller supports python3\n```\n\n------------\n\n### 3. Управление аккаунтами в децентрализованном приложении\nТак как мы тестируем, давайте создадим локальную сеть Робономики с двоичным файлом Робономики:\n```shell\n./robonomics --dev --tmp\n```\n\n![Запускаем узел](../images/curiosity-demo/robonomics.jpg?raw=true \"Запускаем узел\")\n\n\nПерейдите на [портал парачейна Робономики](https://polkadot.js.org/apps/?rpc=wss%3A%2F%2Fkusama.rpc.robonomics.network%2F#/) и переключитесь на локальный узел. \n\n![Локальный узел](../images/curiosity-demo/local_node.jpg?raw=true \"Локальный узел\")\n\n\nПерейдите в Accounts и создайте аккаунты **CURIOSITY** и **EMPLOYER**.\n\n**Важно**! Скопируйте адрес каждого аккаунта (чтобы это сделать, кликните на иконку аккаунта) и **сид-фразу** аккаунта Curiosity (сгенерированную при создании аккаунта). Отправьте токены на эти аккаунты. Подробнее об аккаунтах Робономики можно прочесть [здесь](https://wiki.robonomics.network/docs/ru/create-account-in-dapp/)\n\n![Создание аккаунта](../images/curiosity-demo/account_creation.jpg?raw=true \"Создание аккаунта\")\n\n\nДобавьте эти адреса, сид и адрес узла (по умолчанию `ws://127.0.0.1:9944` - узел разработчика) в `config.config` в `robonomics_ws/src/robonomics_sample_controller/src`. Без кавычек.\n\n------------\n\n\n### 4. Запустите Робономику\n\nПеред тем как двигаться дальше, убедитесь, что Вы установили [расширение IPFS Companion](https://github.com/ipfs/ipfs-companion).\n\nВ отдельном терминале запустите IPFS:\n```shell\nifps init #you only need to do this once per IPFS installation\nipfs daemon\n```\n\nВ другом отдельном терминале запустите симуляцию Curiosity, если она еще не запущена:\n```shell\nroslaunch curiosity_mars_rover_description main_real_mars.launch\n```\nДождитесь выполнения операций.\n\nВ другом терминале запустите контроллера:\n```shell\nrosrun robonomics_sample_controller sample_controller.py\n```\n![Контроллер](../images/curiosity-demo/controller.jpg?raw=true \"Контроллер\")\n\n\nТеперь Вы можете отправлять транзакции, запускающие движение и сборку данных марсоходом. Чтобы это сделать, Вы можете использовать все тот же [портал парачейна Робономики](https://polkadot.js.org/apps/?rpc=wss%3A%2F%2Fkusama.rpc.robonomics.network%2F#/).\nПерейдите в `Developer->Extrinsics` и выберите аккаунт employer для Curiosity, экстринсик `launch`, аккаунт Curiosity как целевой аккаунт и `yes` как параметр.\nОтправьте экстринсик.\n\n![Экстринсик](../images/curiosity-demo/extrinsic.jpg?raw=true \"Экстринсик\")\n\n\nРобот должен начать двигаться. Он не будет принимать команды от других аккаунтов, а также команды с параметром `no`. Марсоход будет двигаться и собирать данные примерно около минуты.\nЗатем, после выполнения работы:\n\n![Работа выполнена](../images/curiosity-demo/job_done.jpg?raw=true \"Работа выполнена\")\n\n\nНа портале Робономики перейдите в `Developer -> Chain state` и получите журнал данных `CURIOSITY`, используя кнопку “+” с выбранным `datalog -> RingBufferItem` в качестве запроса: \n\n![Журнал данных](../images/curiosity-demo/datalog.jpg?raw=true \"Журнал данных\")\n\nТеперь хэш IPFS телеметрии сохранен в блокчейне. Чтобы посмотреть данные, просто скопируйте хэш и найдите его на шлюзе:\n\n![Данные в IPFS](../images/curiosity-demo/data_in_ipfs.jpg?raw=true \"Данные в IPFS\")\n\n\nЭта телеметрия хранится в децентрализованном хранилище, а ее хэш хранится в блокчейне!\n","tools":[],"fileInfo":{"path":"ru/connect-mars-curiosity-rover-under-robonomics-parachain-control.md","name":"connect-mars-curiosity-rover-under-robonomics-parachain-control"}}},"context":{}}