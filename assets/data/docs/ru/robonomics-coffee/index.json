{"hash":"65eb7e2243ac23978972df5dbeb12db972fbcfc3","data":{"doc":{"id":"5c87576509494ad06f31e8c7e0885e70","title":"Robonomics Coffee","description":"","contributors":["PaTara43"],"translated":false,"headings":[],"subtitles":[{"depth":2,"value":"About","anchor":"#about"},{"depth":2,"value":"How to make coffee?","anchor":"#how-to-make-coffee"},{"depth":2,"value":"How it works?","anchor":"#how-it-works"},{"depth":2,"value":"Tutorial","anchor":"#tutorial"},{"depth":3,"value":"Used hardware","anchor":"#used-hardware"},{"depth":3,"value":"Tools","anchor":"#tools"},{"depth":3,"value":"Hardware installation","anchor":"#hardware-installation"},{"depth":4,"value":"1. Disassembly the coffee machine.","anchor":"#1-disassembly-the-coffee-machine"},{"depth":4,"value":"2. Solder two wires to the button you need.","anchor":"#2-solder-two-wires-to-the-button-you-need"},{"depth":4,"value":"3. Assemble the entire coffee machine back leaving the front panel removed.","anchor":"#3-assemble-the-entire-coffee-machine-back-leaving-the-front-panel-removed"},{"depth":4,"value":"4. Circuit","anchor":"#4-circuit"},{"depth":4,"value":"5. Connect coffee machine and RPI","anchor":"#5-connect-coffee-machine-and-rpi"},{"depth":3,"value":"Software installation","anchor":"#software-installation"},{"depth":4,"value":"Option 1: Using Robonomics Parachain in Kusama Network","anchor":"#option-1-using-robonomics-parachain-in-kusama-network"},{"depth":4,"value":"Option 2: Using Everscale Network.","anchor":"#option-2-using-everscale-network"},{"depth":3,"value":"Account management","anchor":"#account-management"},{"depth":4,"value":"Option 1: Using Robonomics Parachain in Kusama Network","anchor":"#option-1-using-robonomics-parachain-in-kusama-network-1"},{"depth":4,"value":"Option 2: Using Everscale Network.","anchor":"#option-2-using-everscale-network-1"},{"depth":3,"value":"Run Robonomics coffee","anchor":"#run-robonomics-coffee"},{"depth":4,"value":"Option 1: Using Robonomics Parachain in Kusama Network","anchor":"#option-1-using-robonomics-parachain-in-kusama-network-2"},{"depth":4,"value":"Option 2: Using Everscale Network.","anchor":"#option-2-using-everscale-network-2"},{"depth":2,"value":"Things to point out","anchor":"#things-to-point-out"}],"content":"\n## About\n\n\"Robonomics coffee\" - is a smart coffee machine integrated in  [Robonomics Network](https://robonomics.network/).\nThis project aims to show Robonomics potential in the IoT sphere by a real-world example.\n\nhttps://www.youtube.com/watch?v=Z8pXcLjlJnQ\n\n## How to make coffee?\n\nIn order to have a cup of delicious coffee, a customer should send some funds (1 Statemine's token \n[ACT](https://statemine.statescan.io/asset/3077), id=3077) to the address of a coffee machine in Statemine parachain.\nAfter that the pouring process is started and action log is published in the \n[Robonomics Parachain portal](https://polkadot.js.org/apps/?rpc=wss%3A%2F%2Fkusama.rpc.robonomics.network%2F#/explorer) \nvia Datalog function.\n\n**NOTE!** *You may use **any** token on Statemine, more on that [here](#things-to-point-out)*\n\n## How it works?\n\nThere is a single-board computer attached to the body of the coffee machine. This computer is the center of the entire\nsystem, where all the processes are happening. The single-board (Raspberry Pi 4) is connected to the control panel of the \ncoffee machine via jumper breadboard wires and GPIO interface. RPI is also the one interacting with Robonomics and\nStatemine parachains. Sample flowchart of the workflow is presented below.\n\n![Workflow](../images/robonomics-coffee/workflow.png)\n\n## Tutorial\n\n### Used hardware\n- Coffee machine  \nThe very important criteria for a coffee machine was the ability to solder some wires to the control panel since GPIO\nwas selected as a communication interface being the easiest one to implement. Several options were considered\n([Saeco PicoBaristo HD 8925](https://www.philips.com/c-p/SM5478_10R1/picobaristo-super-automatic-espresso-machine),\n[De'Longhi ESAM3200.S](https://www.delonghi.com/en/esam3200-s-ex-1-magnifica-automatic-coffee-maker/p/ESAM3200.S%20EX%3A1)). \nAs may be seen, no touchscreen and no bells and whistles, just buttons and espresso. Finally,\n[Deâ€™Longhi Magnifica ECAM 22.110](https://www.delonghi.com/en/ecam22-110-sb-magnifica-s-automatic-coffee-maker/p/ECAM22.110.SB) \nwas chosen as it is cheap and has an easy-removed front panel.\n- Single-board [Raspberry Pi 4B](https://www.raspberrypi.com/products/raspberry-pi-4-model-b/) (2 GB) with Ubuntu server\ninstalled via [RPi Imager](https://www.raspberrypi.com/software/).\n- 5V adapter and USB A to USB type C cable ([this](https://www.amazon.com/Charger-FOBSUNLAND-Universal-Adapter-S6-Note/dp/B073Q1N8FL/ref=sr_1_2_sspa?keywords=5v+adapter&qid=1636572682&sr=8-2-spons&psc=1&spLa=ZW5jcnlwdGVkUXVhbGlmaWVyPUExQ1JDSkQ5NlBGTFU2JmVuY3J5cHRlZElkPUEwODgwMDgzMUJKMU5YVEdXRjdBWCZlbmNyeXB0ZWRBZElkPUEwMTc3NjgwMldDQ1lJWUkwTVY4VSZ3aWRnZXROYW1lPXNwX2F0ZiZhY3Rpb249Y2xpY2tSZWRpcmVjdCZkb05vdExvZ0NsaWNrPXRydWU=) and [this](https://www.amazon.com/Charger-Braided-Charging-Compatible-Samsung/dp/B0794M53HQ/ref=sr_1_1?keywords=usb+a+type+c+cable&qid=1636572602&sr=8-1) are examples)\n- A set of F-M, M-M, F-F jumper wires, a breadboard (again, [this](https://www.amazon.com/Standard-Jumper-Solderless-Prototype-Breadboard/dp/B07H7V1X7Y/ref=sr_1_13?keywords=breadboard&qid=1636572396&sr=8-13) is just an example).\n- Transistor and a resistor(optionally). More on that [later](#4-circuit).\n\n### Tools\n- A set of screwdrivers.\n- Soldering iron with some solder and resin.\n- Multimeter.\n\n### Hardware installation\n#### 1. Disassembly the coffee machine. \nThere is a [sample tutorial](https://www.youtube.com/watch?v=7Y5NCePD0PM) \non YouTube. Your goal is to remove the front panel (it won't be used anymore, so this is a thing to improve to hide all\nthe wires) and detach the control PCB.\n\n![Detached PCB](../images/robonomics-coffee/detached_pcb.png)\n\n#### 2. Solder two wires to the button you need.\nSolder them to the isolated contacts (in our case - two bottom contacts).\nYou can use any wires, but keep im mind that in the end there should be an M-wire to put it into the breadboard.\n\n![Soldered Wires](../images/robonomics-coffee/soldered_wires.png)\n\n#### 3. Assemble the entire coffee machine back leaving the front panel removed.\n\n![Coffee machine Overview](../images/robonomics-coffee/coffee_machine_overview.png)\n\n#### 4. Circuit  \nOverall circuit is presented below, this is a very simple transistor switch, we used **R<sub>1</sub>**=1k&Omega;, a npn \ntransistor **Q<sub>1</sub>** (*h<sub>fe</sub>*=40, *U<sub>ce</sub>*>5V, *I<sub>c</sub>*>0.015A, sample [here](https://alltransistors.com/adv/pdfdatasheet_rca/2n1613.pdf), but almost any general \ntransistor suites, since this is a switch) and a small 3.3V diode **D** in base circuit found in the storage of our lab:) One \ncan use a MOSFET transistor as well.\n\n![Circuit](../images/robonomics-coffee/circuit.png)\n\n![Circuit Assembled](../images/robonomics-coffee/circuit_assembled.png)\n\n#### 5. Connect coffee machine and RPI\nConnect wires marked as *RPI GND* and *RPI GPIO Pin* to pins **GND** and **21** respectively. RPI GPIO scheme is presented below.\nWires marked as *Button+* and *Button-* should be connected to the left button contact and right button contact \nrespectively.\n\n![RPI GPIO](../images/robonomics-coffee/rpi_gpio.png)\n\n### Software installation\n\nTime to turn the Raspberry Pi into blockchain-powered coffee maker!  \n\n#### Option 1: Using Robonomics Parachain in Kusama Network\n\n- Prepare the RPI for Substrate libs ([source](https://www.rust-lang.org/tools/install)):\n```bash\ncurl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh\nrustup default nightly\n```\n- Install gpiozero library ([source](https://gpiozero.readthedocs.io/en/stable/installing.html)) and reboot:\n```bash\nsudo apt update\nsudo apt install python3-gpiozero\nsudo pip3 install gpiozero\nsudo reboot\n```\n- Clone the repository\n```bash\ngit clone https://github.com/Multi-Agent-io/robonomics-coffee-maker\n```\n- Install project requirements\n```bash\npip3 install -r requirements.txt\n```\n\n#### Option 2: Using Everscale Network.\n\n- Install gpiozero library ([source](https://gpiozero.readthedocs.io/en/stable/installing.html)) and reboot:\n```bash\nsudo apt update\nsudo apt install python3-gpiozero\nsudo pip3 install gpiozero\nsudo reboot\n```\n\n- Clone the repository\n```bash\ngit clone https://github.com/Multi-Agent-io/robonomics-coffee-maker\ncd robonomics-coffee-maker\n```\n\n- Install Node.js requirements\n```bash\nnpm install @eversdk/core\nnpm install python-shell\nmv eversdk.node ~/.tonlabs/binaries/1\ngit clone https://github.com/tonlabs/ever-sdk-js\ncd ever-sdk-js/packages/lib-node\nnpm install -g\n```\n\nThe reason why we can't just npm install @eversdk/lib-node is because this library is not compiled for the ARM architecture.\n\n\n### Account management\n\n#### Option 1: Using Robonomics Parachain in Kusama Network\n\nOn your PC install [Polkadot Extension](https://polkadot.js.org/extension/) and register a coffee machine account there. **Save \nmnemonic seed phrase as it is going to be used later.**\n\n![Coffee machine Account](../images/robonomics-coffee/account.png)\n\nLogging actions in Robonomics is optional, you will need XRT on \n[Robonomics Parachain portal](https://polkadot.js.org/apps/?rpc=wss%3A%2F%2Fkusama.rpc.robonomics.network%2F#/) for coffee machine account (it is the same across\nnetworks) for this. If not, there will simply be an error message *\"Balance too low.\"*\n\n#### Option 2: Using Everscale Network.\n\nCreate an account in the Everscale with, for example mobile app. Save seed and activate a coffee-machine address there.\nInsert this address in `main.js`\n\n### Run Robonomics coffee\n\n#### Option 1: Using Robonomics Parachain in Kusama Network\n\nRun this in corresponding network repo folder:\n```bash\npython3 main.py <previously saved seed in quotes>\n```\nYou should see the program waiting for ACT incomes:\n\n![Waiting for ACT](../images/robonomics-coffee/waiting_for_act.png)\n\nYou can send tokens from another account created the same way via `assets:transfer` *extrinsic* on \n[Statemine](https://polkadot.js.org/apps/?rpc=wss%3A%2F%2Fstatemine-rpc.polkadot.io#/explorer).\n\nAs soon as there is an income (positive change in `assets:account` *storage function* for address \nderived from seed and for token id `3077`) the RPI triggers GPIO pin 18 and coffee machine starts making coffee and \nrecords a datalog!\n\n![Making coffee](../images/robonomics-coffee/making_coffee.png)\n\n![Recorded Datalog](../images/robonomics-coffee/datalog.png)\n\n#### Option 2: Using Everscale Network.\n\nRun poller by \n```bash\nnode main.js\n```\n\nThen send 0.5 EVR to the address specified in the `main.js` file. Everscale use case does not imply Datalog recording.\n\n## Things to point out\n- This is a POC of a blockchain-driven IoT device, it has things to improve, wires to hide and functionality to implement.\n- Token ID, the one, coffee machine is waiting to receive, is set\n[here](https://github.com/Multi-Agent-io/robonomics-coffee-maker/blob/master/statemine_monitor.py#L27), **so you can use your own token**,\nexisting one or newly created. To create one, go to \n[Statemine Kusama parachain page](https://github.com/airalab/robonomics-wiki), `Network -> Assets -> Create`.\nSet an ID there, complete the procedure and paste ID in the code.\n\n![Creating Any Token for Paying](../images/robonomics-coffee/create_token.png)\n\n\n- Right now the only thing that matters for income tracker is the positive difference between current and previous\nasset balance. This may be filtered [code](https://github.com/Multi-Agent-io/robonomics-coffee-maker/blob/master/statemine_monitor.py#L59).\n- One may use QR-code for mobile apps for convenient transfers.\n\n![QR-codes](../images/robonomics-coffee/qr_codes.png)\n\n- Powered by [Robonomics](https://robonomics.network/), made by [Multi-Agent.io](https://multi-agent.io/).","tools":[],"fileInfo":{"path":"ru/robonomics-coffee.md","name":"robonomics-coffee"}}},"context":{}}