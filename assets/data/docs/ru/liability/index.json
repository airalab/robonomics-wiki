{"hash":"0fc731af9b90653b97e5d5b575cb73fa2319c9c4","data":{"doc":{"id":"87cbbb4087aa49ec1fb5f29b522ca88e","title":"Liability","description":"","contributors":["PaTara43"],"headings":[],"subtitles":[{"depth":2,"value":"Обзор теории","anchor":"#обзор-теории"},{"depth":3,"value":"Переговоры","anchor":"#переговоры"},{"depth":3,"value":"Signatures","anchor":"#signatures"},{"depth":2,"value":"Создать обязательство","anchor":"#создать-обязательство"},{"depth":3,"value":"Подготовка","anchor":"#подготовка"},{"depth":3,"value":"1. Создайте три аккаунта и добавьте на них средства","anchor":"#1-создайте-три-аккаунта-и-добавьте-на-них-средства"},{"depth":3,"value":"1. Перейдите в Developer -> Extrinsics","anchor":"#1-перейдите-в-developer---extrinsics"},{"depth":3,"value":"2. Выберите liability -> create из выпадающего списка возможных внешних обязательств","anchor":"#2-выберите-liability---create-из-выпадающего-списка-возможных-внешних-обязательств"},{"depth":3,"value":"3. Отправьте транзакцию","anchor":"#3-отправьте-транзакцию"},{"depth":3,"value":"4. Просмотрите свое обязательство в событиях","anchor":"#4-просмотрите-свое-обязательство-в-событиях"},{"depth":3,"value":"5. Исследование хранения","anchor":"#5-исследование-хранения"},{"depth":2,"value":"Отчеты","anchor":"#отчеты"},{"depth":3,"value":"1. Перейдите к extrinsics, liability -> finalize(report)","anchor":"#1-перейдите-к-extrinsics-liability---finalizereport"},{"depth":3,"value":"2. Исследуйте reports","anchor":"#2-исследуйте-reports"},{"depth":3,"value":"3. Проверьте балансы","anchor":"#3-проверьте-балансы"}],"content":"\n**Чтобы превратить роботов в экономические агенты, нужен инструмент контракта. Знакомьтесь с Liability - паллет Robonomics, реализующий\nконтракты между учетными записями parachain!**\n\n<robo-wiki-note type=\"warning\" title=\"Dev Node\">\n\n  Обратите внимание, что этот учебник демонстрируется на локальном экземпляре Robonomics Node. Настройте свой с помощью [этих инструкций](/docs/run-dev-node).\n\n</robo-wiki-note>\n\n## Обзор теории\n\nНа Ethereum была довольно сложная структура взаимодействия с ответственностью. Вы можете ознакомиться с ней \n[здесь](/docs/robonomics-how-it-works). В наши дни с Kusama все немного проще!\n\n### Переговоры\n\nДля подписания контракта стороны должны сначала провести переговоры. Это может быть сделано несколькими способами, включая \n[IPFS PubSub](https://blog.ipfs.tech/25-pubsub/) или Robonomics PubSub. Пример кода на Python с использованием Robonomics PubSub \nпредставлен [здесь](https://multi-agent-io.github.io/robonomics-interface/usage.html#pubsub). \n\nПредложение и спрос - это сообщения, содержащие две основные характеристики контракта: **описание работы** и **цена**. Формат сообщения\nдолжен быть разработан пользователем для каждого конкретного приложения. Важно не соблюдать строгое правило формата в процессе переговоров.\nВозможный ход представлен на рисунке ниже.\n\n<robo-wiki-picture src=\"liability/negotiations.jpg\" />\n\n<robo-wiki-note type=\"warning\" title=\"PubSub\">\n\n  Обратите внимание, что PubSub - это открытый протокол, поэтому нельзя передавать конфиденциальные данные. Для этого следует использовать другие протоколы.\n\n</robo-wiki-note>\n\n\n### Signatures\n\nКогда переговоры успешно завершены, каждая сторона должна подписать свое так называемое соглашение, названное подписью. Это \nсообщение, содержащее описание работы и цену **в определенном формате**, подписанное с помощью закрытого ключа учетной записи. Для этого есть \n[инструмент на Python](https://multi-agent-io.github.io/robonomics-interface/modules.html#robonomicsinterface.Liability.sign_liability).\n - Описание работы называется **техника**. Это строка длиной 32 байта, похожая на запуск, которая может быть закодирована в IPFS CID.\n - Цена называется **экономика**. Это десятичное число XRT - Вейнер. 1 Вейнер = 10**-9 XRT.\n\n<robo-wiki-note type=\"note\" title=\"32 bytes\">\n\n  Вы можете получить [IPFS](https://ipfs.tech/) CID, отформатированный правильно, с помощью [библиотеки на Python](https://multi-agent-io.github.io/robonomics-interface/modules.html#robonomicsinterface.utils.ipfs_qm_hash_to_32_bytes).\n  При использовании функции `sign_liability` нет необходимости преобразовывать хеш, это будет сделано автоматически.\n\n</robo-wiki-note>\n\nСледуя примеру с кофе:\n\n1. Задача - это JSON\n```json\n{\"task\": \"make_espresso\", \"description\": \"Make one cup of espresso\"}\n```\n2. Его IPFS CID - `QmP17mWKtQtq2Gq6qZAggPRrho3sVjQGBpXZ8KZiQ57FDi`\n3. Таким образом, **техника** (преобразованный CID) - `0x09daaa8055722a6894951b1273e807f8a46628efeec46805f0228ace230bd5a9` \n4. **Экономика** составляет `1.5 XRT`.\n\nКогда подписано, пришло время создать обязательство! Это может быть сделано одной из сторон (либо обещающей стороной, либо обещателем), либо \n3-ей стороной, так называемым поставщиком.\n\n## Создать обязательство\n\n### Подготовка\n\nКак уже упоминалось ранее, в процессе участвуют как минимум две стороны. В этом примере давайте используем три и создадим\nотдельного поставщика для этого. Предположим, что переговоры уже состоялись каким-то образом.\n\n### 1. Создайте три аккаунта и добавьте на них средства\n\n<robo-wiki-picture src=\"liability/balances.jpg\" />\n\nЗдесь мы предоставили поставщику 100 XRT для подписи внешних обязательств, обещающей стороне было предоставлено 2 XRT для оплаты работы.\nОбещатель не получил никаких средств (за исключением существенного депозита не менее 1 мXRT).\n\n### 1. Перейдите в Developer -> Extrinsics\n\n<robo-wiki-picture src=\"liability/extrinsics.jpg\" />\n\n### 2. Выберите liability -> create из выпадающего списка возможных внешних обязательств\n\nТакже выберите аккаунт, с которым вы хотите отправить extrinsic. Заполните все параметры.\n\n<robo-wiki-picture src=\"liability/create.jpg\" />\n\n<robo-wiki-note type=\"note\" title=\"Signatures\">\n\n  Поскольку здесь используется поставщик, нет необходимости знать семена участников. Необходимы только их подписи.\n\n</robo-wiki-note>\n\n### 3. Отправьте транзакцию\n\n<robo-wiki-picture src=\"liability/submit.jpg\" />\n\n### 4. Просмотрите свое обязательство в событиях\n\nДля этого перейдите в `Network -> Explorer`  и найдите список событий справа. Нажмите на треугольник, чтобы развернуть его.\n\n<robo-wiki-picture src=\"liability/new-liability.jpg\" />\n\n<robo-wiki-note type=\"note\" title=\"Hash\">\n\n  Хэш может быть преобразован в IPFS CID с тем же \n  [Python tool](https://multi-agent-io.github.io/robonomics-interface/modules.html#robonomicsinterface.utils.ipfs_32_bytes_to_qm_hash).\n\n</robo-wiki-note>\n\n### 5. Исследование хранения\n\nВы также можете изучить некоторые характеристики обязательств в модуле хранения `liability`.\n\n<robo-wiki-picture src=\"liability/storage-liability.jpg\" />\n\n<robo-wiki-note type=\"note\" title=\"Next Index\">\n\n  Функция хранения `Next Index` показывает последний индекс обязательства +1, поэтому, даже если это `1`, обязательство `0` исследуется.\n\n</robo-wiki-note>\n\n## Отчеты\n\nПредставьте себе, что кофе был приготовлен, и теперь кофеварке нужно somehow сообщить об этом. Вот где появляются отчеты об обязательствах\n. В качестве доказательства труда аккаунт добавляет еще один IPFS CID в качестве содержимого отчета при завершении существующего\nобязательства. Для этого также требуется подпись обещателя.\n\n<robo-wiki-note type=\"note\" title=\"Report signature\">\n\n  Подписанное сообщение содержит существующий индекс обязательства и IPFS CID отчета, закодированный в 32-байтовом представлении. Опять же,\n  [инструмент Python](https://multi-agent-io.github.io/robonomics-interface/modules.html#robonomicsinterface.Liability.sign_report) может помочь подписать отчет.\n\n</robo-wiki-note>\n\nПродолжая пример с кофеваркой:\n\n1. Отчет - это JSON\n```json\n{\"report\": \"Coffee made! Time to execute - 80 seconds.\"}\n```\n2. Его IPFS CID - `QmeXCrBuv6cw825JJfSWqNVv28AyjJZW9KReN9wcLQjfCm`\n3. Таким образом, **payload** (преобразованный CID) — это `0xf06f2394f55537a5f37d63fd72bfbef50e9f60ea9e0e34224e455afae27a97a2` \n4. **Индекс** - `0`, это существующий индекс обязательства.\n\n### 1. Перейдите к extrinsics, liability -> finalize(report)\n\nЗаполните параметры и отправьте внешнее обязательство. Опять же, это может быть сделано 3-ей стороной. \n\n<robo-wiki-picture src=\"liability/report.jpg\" />\n\n<robo-wiki-note type=\"warning\" title=\"Existential deposit\">\n\n  Обратите внимание, что учетная запись обещателя не должна быть \"мертвой\" - у нее должен быть существенный депозит не менее 1 мXRT.\n\n</robo-wiki-note>\n\nПодпишите и отправьте отчет. После выполнения вы можете изучить его в событиях.\n\n<robo-wiki-picture src=\"liability/new-report.jpg\" />\n\n### 2. Исследуйте reports\n\nВы также можете наблюдать отчет в хранилище. Перейдите в `Developer -> Storage` и выберите `liability` из выпадающего списка.\n\n<robo-wiki-picture src=\"liability/storage-report.jpg\" />\n\n### 3. Проверьте балансы\n\nНа картинке показано, что теперь обещатель получил \"зарплату\". Произошли экономические отношения!\n\n<robo-wiki-picture src=\"liability/balances-2.jpg\" />\n\n\n<robo-wiki-note type=\"note\" title=\"Проверка\">\n\n  На данный момент нет способа проверить, выполнена ли работа, поэтому как только обещатель сообщает, токены переводятся на его счет.\n  Функция проверки будет добавлена в будущем.\n\n</robo-wiki-note>","tools":["Robonomics 2.3.0 https://github.com/airalab/robonomics","robonomics_interface 1.3.5 https://github.com/Multi-Agent-io/robonomics-interface"],"fileInfo":{"path":"ru/liability.md","name":"liability"}}},"context":{}}