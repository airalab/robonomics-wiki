{"hash":"e70e5d83b59e22ac1f1f08820f9edc38637839ff","data":{"doc":{"id":"653cfe3e804d77e003753e00803ba26a","title":"Substrate Cumulus Parachain Testsuite для межцепочечной передачи сообщений","description":"","contributors":["ddulesov","boogerwooger","tubleronchik"],"headings":[],"subtitles":[{"depth":2,"value":"Верхний поток","anchor":"#верхний-поток"},{"depth":2,"value":"Сборка и запуск","anchor":"#сборка-и-запуск"},{"depth":2,"value":"Проверка работы начальной настройки","anchor":"#проверка-работы-начальной-настройки"},{"depth":3,"value":"Пример:","anchor":"#пример"},{"depth":3,"value":"Тестирование передачи сообщений UMP","anchor":"#тестирование-передачи-сообщений-ump"},{"depth":3,"value":"Тестирование передачи сообщений HRMP","anchor":"#тестирование-передачи-сообщений-hrmp"},{"depth":3,"value":"Дополнительные параметры","anchor":"#дополнительные-параметры"},{"depth":2,"value":"Локальная тестовая сеть","anchor":"#локальная-тестовая-сеть"},{"depth":3,"value":"Создание настраиваемой спецификации цепи","anchor":"#создание-настраиваемой-спецификации-цепи"},{"depth":2,"value":"Взлом парачейна","anchor":"#взлом-парачейна"},{"depth":2,"value":"Learn More","anchor":"#learn-more"}],"content":"\n\nОсновная цель этого проекта - упрощение разработки времени выполнения парачейна при использовании межцепочечных сообщений. \nОн позволяет разрабатывать код времени выполнения с интеграционными тестами с высокой степенью повторяемости и простым использованием.\nОн автоматизирует построение, создание предварительно заданной конфигурации сети (т.е. 1 ретрансляционная цепочка + 2 парачейна), настройку каналов передачи сообщений между парачейнами и запуск тестов передачи сообщений, отправку сообщений с использованием вызова времени выполнения, все это создано и составлено на языке Python.\n\nXCM Testsuite используется для тестирования производственного цикла Robobank - набора палеток Substrate, которые позволяют роботам регистрироваться на внешних парачейнах, получать предоплаченные заказы, выполнять их и получать платежи с использованием внешних токенов. Это позволяет роботам работать внутри сети Robonomics со всей необходимой инфраструктурой, но в то же время предлагать свои услуги на любом другом парачейне.\n\nПример видео доступен на [YouTube](https://www.youtube.com/watch?v=S_bZgsxngiM)\n\nОсновные шаги в демонстрационном сценарии:\n- запуск ретрансляционной цепочки и двух парачейнов в пакете из 6 процессов\n- настройка каналов передачи сообщений XCM между парачейнами\n- регистрация робота в обоих парачейнах\n- создание заказа для этого робота в клиентском парачейне (резервирование платежа для завершения заказа)\n- отправка сообщения XCM на парачейн Robonomics\n- создание \"зеркальной\" записи заказа на парачейне Robonomics\n- робот принимает заказ на парачейне Robonomics\n- отправка сообщения XCM о принятии заказа обратно на клиентский парачейн\n- принятие заказа на клиентском парачейне (резервирование штрафного сбора за невыполнение заказа до срока)\n- робот завершает заказ на парачейне Robonomics\n- отправка сообщения XCM о завершении заказа на клиентский парачейн\n- расчет всех платежей (платеж клиента передается роботу, а также неиспользованный штрафной сбор)\n- закрытие заказа1\n\n\n## Верхний поток\nЭтот проект является форком\n[Substrate Developer Hub Node Template](https://github.com/substrate-developer-hub/substrate-node-template).\nОн содержит код палеток времени выполнения, которые тестируются.\nКак и в исходном коде узла, код парачейнов находится в каталогах \"./pallets\", \"./runtime\", \"./node\".\n\nОтличия от исходного \"substrate-node-template\":\n- этот временной код имеет модуль обработчика HRMP и может обрабатывать сообщения от соседних парачейнов\n- готовый к использованию тестовый временной код для внутренних тестов XCM\n\n## Сборка и запуск\nРекомендуется (очень) настройка: \n```\nUbuntu 20, 16 Gb RAM, 8 CPU, 120 Gb SSD\n```\n[ПРИМЕЧАНИЕ] Первая сборка может занять много времени, до нескольких часов на неоптимальных машинах.\n\n[ПРИМЕЧАНИЕ] Скрипт работает с ФИКСИРОВАННЫМИ версиями (хэшами коммитов) Polkadot(Rococo) в ретрансляционной цепочке и парачейнах.\n\n[ПРИМЕЧАНИЕ] По умолчанию скрипт каждый раз создает одну и ту же среду при запуске, удаляя все предыдущие состояния. Это поведение можно изменить в \"config.sh\", используя параметр \"PERSISTENT\".\n\n\nЗапустите сборку и настройку скрипта.  \n```bash\ngit clone https://github.com/airalab/xcm-robobank-prototype.git\ncd xcm-robobank-prototype\n./scripts/init.sh\n```\n\nОсновные действия скрипта \"init.sh\":\n - чтение конфигурации (файл \"config.sh\" с номером ревизии, начальными ключами и идентификаторами узлов, параметром сохранения цепных данных и т.д.)\n - настройка пакетов ОС, Rust и Python\n - создание отдельных двоичных файлов для ретрансляционной цепочки и также для обоих парачейнов\n    - бинарные файлы будут сгенерированы в подкаталоге ./bin. \n - (необязательно) удаление всех предыдущих цепных данных для всех цепей\n    - отключается, если \"PERSISTENT=1\" установлено в \"config.sh\"\n - запуск в виде отдельных процессов (с отдельными PID и каналами ввода-вывода):\n    - валидаторы ретрансляционной цепочки (т.е. 4 валидатора, работающих на стабильной ревизии Rococo)\n    - коллаторы для парачейна-100 (т.е. один коллатор для первого парачейна, который вы разрабатываете)\n    - коллаторы для парачейна-200 (т.е. один коллатор для второго парачейна, который вы разрабатываете)\n - печать всех конечных точек, портов в консоль, позволяющая изучать любую цепь с помощью приложений фронтенда (обозреватель, DApp)\n - продолжайте печатать все выходные данные всех цепей в консоль\n\n[ПРЕДУПРЕЖДЕНИЕ] После запуска дождитесь, пока сеть будет работать, убедитесь, что финализация блока началась и что парачейны зарегистрированы. Эти процессы должны занимать примерно 5 минут (50 блоков x 6 секунд).\n\n## Проверка работы начальной настройки \n\nИспользуйте стандартный фронтенд Polkdot и сгенерированные конечные точки \"--ws-port\" для подключения к каждому узлу.\nОткройте [приложение Polkadot](https://polkadot.js.org/apps/?rpc=ws://localhost:9500/) для мониторинга цепей. \n\n### Пример:\nLocalhost, 4 валидатора ретрансляционной цепочки, один коллатор парачейна-100, один коллатор парачейна-200:\n- [Relay validator 1](https://polkadot.js.org/apps/?rpc=ws://localhost:9500/)\n- [Relay validator 2](https://polkadot.js.org/apps/?rpc=ws://localhost:9501/)\n- [Relay validator 3](https://polkadot.js.org/apps/?rpc=ws://localhost:9502/)\n- [Relay validator 4](https://polkadot.js.org/apps/?rpc=ws://localhost:9503/)\n- [Parachain-100 collator](https://polkadot.js.org/apps/?rpc=ws://localhost:10054/)\n- [Parachain-200 collator](https://polkadot.js.org/apps/?rpc=ws://localhost:10055/)\n\n\nЕсли все работает, и согласование началось, мы можем перейти к запуску наших тестовых случаев (в новом терминале).\n\n### Тестирование передачи сообщений UMP\n```bash\n./scripts/init.sh ump\n```\nОн создает сообщение `Balance.transfer` в `парачейн-100` и передает его на цепочку реле.\nКогда цепочка реле получает сообщение, она переводит 15 токенов со счета `пара 100` на счет Чарли.\n\n\n### Тестирование передачи сообщений HRMP\n```bash\n./scripts/init.sh ump\n```\n\nОн создает сообщение `Balance.transfer` в `парачейн-100` и передает его в `соседний 200`.\nДо этого он наделяет счет `субл 100` 1000 токенами и устанавливает коммуникационный канал между парачейнами.\n```bash\n./scripts/init.sh hrmp\n```\nСледующие сообщения могут быть отправлены, запустив подкоманду `hrmpm`. Он не создает канал, поэтому работает быстрее.\n```bash\n./scripts/init.sh hrmpm\n```\n\n### Дополнительные параметры\n```bash\n./scripts/init.sh help\n```\n\n## Локальная тестовая сеть\n\n### Создание настраиваемой спецификации цепи\n```\n./bin/polkadot build-spec --chain rococo-local --disable-default-bootnode > rococo_local.json\n```\n\nОтредактируйте файл rococo_local.json, заменив параметры балансов и авторитетов на свои.\n```json\n  \"keys\": [\n    [\n      \"\",\n      \"\",\n      {\n        \"grandpa\": \"\",\n        \"babe\": \"\",\n        \"im_online\": \"\",\n        \"para_validator\": \"\",\n        \"para_assignment\": \"\",\n        \"authority_discovery\": \"\"\n      }\n    ]\n```\n\nАдрес Polkadot для //Alice//stash (криптография sr25519).\n```bash\n$ polkadot key inspect-key --scheme sr25519 --network substrate //Alice//stash\n```\n\n```text\nSecret Key URI `//Alice//stash` is account:\nSecret seed:      \n\nPublic key (hex): \n\nAccount ID:       \n\nSS58 Address:     \n```\n\nКлюч сессии Polkadot grandpa для //Alice (криптография ed25519).\n```bash\n$ polkadot key inspect-key --scheme ed25519 --network substrate //Alice\n```\n```text\nSecret Key URI `//Alice` is account:\nSecret seed:      \n\nPublic key (hex): \n\nAccount ID:       \n\nSS58 Address:     \n```\n\nАдрес Polkadot для //Alice (криптография sr25519).\n```\n$ polkadot key inspect-key --scheme sr25519 --network substrate //Alice\n```\n```text\nSecret Key URI `//Alice` is account:\nSecret seed:      \n\nPublic key (hex): \n\nAccount ID:       \n\nSS58 Address:     \n```\n\nПреобразование rococo_local.json в необработанный формат.\n```\n./bin/polkadot build-spec --chain rococo_local.json --raw --disable-default-bootnode > rococo_local.json\n```\nЧтобы использовать новую спецификацию цепи, замените файл rococo.json в каталоге ./config/ на этот новый и перезапустите цепь.\n```bash\n./scripts/init.sh run\n```\nВы можете свободно редактировать код. Вышеуказанная команда перестроит проект и обновит узел коллатора перед запуском.\nCumulus - это предварительная версия программного обеспечения, которое все еще находится в активной разработке.\nWe are using a specific commit of polkadot [46c826f595021475fa5dbcd0987ed53f104e6e15  18 mar 2021](https://github.com/paritytech/polkadot/tree/46c826f595021475fa5dbcd0987ed53f104e6e15)\n\nВы можете использовать более новые версии программного обеспечения. Для этого измените POLKADOT_COMMIT в ./scipt/config.sh\nна последний коммит ветки `rococo-v1`, удалите ./bin/polkadot и запустите \n```bash\n./scripts/init.sh run\n```\n\nОбновление зависимостей проекта коллатора \n```bash\ncargo update\n./scripts/init.sh build\n```\nНекоторые зависимости, вероятно, требуют новых функций инструментальной цепи Rust. Этот проект основан на Rust `nightly-2021-01-26`\nОбновите версию инструментальной цепи Rust в ./scripts/config.sh перед сборкой.\n\n## Взлом парачейна\n[Добавление внешнего паллета](https://substrate.dev/docs/en/tutorials/add-a-pallet/) - возможно, это должно быть в разделе \"Узнать больше\"?\n## Learn More\n\nСсылка на оригинальный [Шаблон узла разработчика Substrate](https://github.com/substrate-developer-hub/substrate-node-template), чтобы узнать больше о структуре этого проекта, его возможностях и способе их реализации. Вы можете узнать больше о [Пути блока парачейна](https://polkadot.network/the-path-of-a-parachain-block/) на официальном блоге Polkadot. [Parity Cumulus Workshop](https://substrate.dev/cumulus-workshop/#/)\n","tools":[],"fileInfo":{"path":"ru/xcm-robobank.md","name":"xcm-robobank"}}},"context":{}}