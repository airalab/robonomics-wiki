{"hash":"fafc1a72b280365300824608799e28058e0a2c73","data":{"doc":{"id":"6ce1e7bf6ac314cc0b9e8975f1357a29","title":"Drone control with robonomics","description":"","cover_image":{"type":"image","mimeType":"image/png","src":"/assets/static/iris-drone.0b85c65.4e943304b239b64ec4ec58ebed73ddc5.png","size":{"width":1920,"height":1080},"sizes":"(max-width: 1920px) 100vw, 1920px","srcset":["/assets/static/iris-drone.1b91758.4e943304b239b64ec4ec58ebed73ddc5.png 480w","/assets/static/iris-drone.3df3210.4e943304b239b64ec4ec58ebed73ddc5.png 1024w","/assets/static/iris-drone.0b85c65.4e943304b239b64ec4ec58ebed73ddc5.png 1920w"],"dataUri":"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 1920 1080' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-fdbfeb15a2f3cc791b16cf1882c4c277'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='40'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-fdbfeb15a2f3cc791b16cf1882c4c277)' width='1920' height='1080' xlink:href='data:image/png%3bbase64%2ciVBORw0KGgoAAAANSUhEUgAAAEAAAAAkCAYAAAA5DDySAAAACXBIWXMAAAsSAAALEgHS3X78AAADa0lEQVRo3u2YWU9TQRTH%2bQgGUR9UBFQExbglPvkdfPTJ%2bKaJJLiguCA7CrJYZBFZJIIBgYC4sCj76r6%2bqAgillpbWuzeQkv7d87QkgoUfKCxwTnJyZ05Z%2bbM3N%2bduZkzfmuDw0AaELQN/hu3ICRiH/QGA0jsdjuWSxwOB3xR/NawFycN3rF3HgCSMdkPDH0dwah0DJ8Gv0A6JsPI6HcolOMYGv4K2Q855AoFhp1tRqVSqCcmZvuQX6PR%2biwEv9WBW/nLHzx0GIFhuxC0fc8fAKpq63DyXCxKbt/BkaORyC8qRXxqOpLTs5CWfR1xKWm4mJiK8wkpqKiqQW5hMe49bMKxqGgkpWUiQ5KHpy9e8VjT09O%2bByBgUygCw3cjYv8BrA%2bNQBCD4Q5Ap9fjp0LJvzh9TYVSCeW4ChqtFjK5HL80GqdfiXGVmvnGYTAYoVZPQMXrKuj1Bt9dAXz/Mwj%2bbCWs2rAZITv/w38AQVgXEj7vH0CTJrXbXU/7rM29bneqYxH16RXg0oUArHQRAAQAAUAAEAAEAAHAMwD3g8xCtr/1L3Y48lSee4r0xqFqUQDuR2FKZOapBz/1c5U9TZ5Ol3Pjk33are%2bMztRtTj9vs0BsrwAgsUxOwmgyeQxgtdqg1ekWHcRqs82WbW5lEpPJ/E9zjCUBPGhqgSS/EE/au9DV24%2be/gG0dXajs6cPHz8Porm1HTX193nK2903gBZWv3O3Fi1tHRh49gLVdQ14/fY9snMLeKpcVFaOvJulKCi%2bhdHvUqRmXEN5ZTVvSyk3jTHw/CU6unu5Ulyy3W9sRuPjVjQxffPuA9q7ejA1NeX9FVBT34DYpMvIzMlnk83GiZhYZF3Px5FjkXziDY%2baUVZRyXN/8tGLxlxKREZOHq5kSXD8VAyGR77hLLNdSEjBjZIyfndwVZKLB40trE0Or8fEJfF7h9MX4hB9MZ7fMySnZyKa1c/EJuBy5jU%2bDyrnFpbgaNRpqFjK7XUAlMu7BjIaTTAYjXwZ07ag/WmxWPhdANW5j%2b1N6k9fh9sMRt6O%2blitVkyyLUU2elIb2h5mFkOn0/OxKIaOPWf8Vmi1OjbGJO9rNlt4bLJRO9cFi9cALOd9gLfEq/8AxxI5vi%2boV1eAOAgJAAKAACAACAACgAAgAAgAAoAAIACsUPkNSjaFkpDEp6gAAAAASUVORK5CYII=' /%3e%3c/svg%3e"},"contributors":["tubleronchik","Vourhey"],"translated":false,"headings":[],"subtitles":[{"depth":2,"value":"Requirements","anchor":"#requirements"},{"depth":2,"value":"Environment Setup","anchor":"#environment-setup"},{"depth":2,"value":"Control Package Installation","anchor":"#control-package-installation"},{"depth":2,"value":"Robonomics Network","anchor":"#robonomics-network"},{"depth":2,"value":"Running Simulation","anchor":"#running-simulation"}],"content":"\n**Drone starts moving after transcation and store file with the coordinates in IPFS. The control script is based on the [GAAS demo script](https://github.com/generalized-intelligence/GAAS)**  \n\nhttps://youtu.be/4CwtGAX1OwM\n\n## Requirements\n* dependencies for control:\n``` sh\nsudo apt install -y \\\n\tpython3-pip \\\n\tninja-build \\\n\texiftool \\\n\tpython-argparse \\\n\tpython-empy \\\n\tpython-toml \\\n\tpython-numpy \\\n\tpython-yaml \\\n\tpython-dev \\\n\tpython-pip \\\n\tninja-build \\\n\tprotobuf-compiler \\\n\tlibeigen3-dev \\\n\tgenromfs\n```\n```sh \npip3 install \\\n\tpandas \\\n\tjinja2 \\\n\tpyserial \\\n\tcerberus \\\n\tpyulog \\\n\tnumpy \\\n\ttoml \\\n\tpyquaternion\n```\n* ROS Melodic + Gazebo [installation tutorial](http://wiki.ros.org/melodic/Installation)\n* extra packages: \n``` bash \nsudo apt-get install ros-melodic-gazebo-ros-control ros-melodic-effort-controllers ros-melodic-joint-state-controller\nsudo apt-get install python-jinja2\nsudo apt-get install python-catkin-pkg\nsudo apt-get install python3-catkin-pkg-modules\n```\n* IPFS verson 0.4.22\n```bash\nwget https://dist.ipfs.io/go-ipfs/v0.4.22/go-ipfs_v0.4.22_linux-amd64.tar.gz\ntar -xvzf go-ipfs_v0.4.22_linux-amd64.tar.gz\ncd go-ipfs\nsudo bash install.sh\nipfs init\n```\n* ipfshttpclient\n```sh\npip3 install ipfshttpclient\n```\n* Robonomics node (binary file) (download latest release [here](https://github.com/airalab/robonomics/releases))\n## Environment Setup\n```bash \nsudo apt-get install ros-melodic-mavros ros-melodic-mavros-extras\nwget https://raw.githubusercontent.com/mavlink/mavros/master/mavros/scripts/install_geographiclib_datasets.sh\nsudo ./install_geographiclib_datasets.sh\ncd ~/catkin_ws/src\ngit clone https://github.com/PX4/Firmware.git\ncd Firmware\ngit checkout v1.9.0\nbash ./Tools/setup/ubuntu.sh\n```\n```bash\ncd ~/catkin_ws/src\ngit clone https://github.com/generalized-intelligence/GAAS.git\ncp -r ~/catkin_ws/src/GAAS/simulator/models/* ~/catkin_ws/src/Firmware/Tools/sitl_gazebo/models/\ncp -r ~/catkin_ws/src/GAAS/simulator/worlds/* ~/catkin_ws/src/Firmware/Tools/sitl_gazebo/worlds/\ncp -r ~/catkin_ws/src/GAAS/simulator/posix-config/* ~/catkin_ws/src/Firmware/posix-configs/SITL/init/ekf2/\n```\n\nModifying your `.bashrc` file, adding the following lines to the bottom:  \n\n`source ~/catkin_ws/devel/setup.bash `  \n`source ~/catkin_ws/src/Firmware/Tools/setup_gazebo.bash ~/catkin_ws/src/Firmware/ ~/catkin_ws/src/Firmware/build posix_sitl_default `   \n`export GAZEBO_MODEL_PATH=:~/catkin_ws/src/simulator/models`  \n`export ROS_PACKAGE_PATH=$ROS_PACKAGE_PATH:~/catkin_ws/src/Firmware`  \n`export ROS_PACKAGE_PATH=$ROS_PACKAGE_PATH:~/catkin_ws/src/Firmware/Tools/sitl_gazebo`  \n`export GAZEBO_MODEL_PATH=:~/catkin_ws/src/simulator/models:~/catkin_ws/src/GAAS/simulator/models`  \n\n  \n## Control Package Installation\nIn a new Terminal:\n```bash\ncd catkin_ws/src\ngit clone https://github.com/tubleronchik/robonomics_drone_sim.git\ncd ..\ncatkin build\n```\n## Robonomics Network\nTo create a local robonomics network go to the folder with the robonomic binary file and run:  \n`./robonomics --dev --rpc-cors all`  \n\nAdd robonomic's path to `config.py`\n\n![IPFS](../images/iris-drone-demo/IPFS.jpg)\n\nGo to the [Robonomics Parachain portal](https://polkadot.js.org/apps/?rpc=wss%3A%2F%2Fkusama.rpc.robonomics.network%2F#/) and switch to local node.\n![localNode](../images/iris-drone-demo/localNode.jpg)\n\nGo to **Accounts** and create **DRONE** and **EMPLOYER** accounts. Save the account names and keys and path to **robonomics** to `~/catkin_ws/src/drone_sim/src/config.py`. Transfer some money into the accounts.\n\n![accounts](../images/iris-drone-demo/addingAcc.jpg)\n\n## Running Simulation\nRun IPFS daemon\n```bash\ncd go-ipfs\nipfs daemon\n```\nIn another terminal launch the simulation:\n```bash\nroslaunch px4 mavros_posix_sitl.launch\ncd ~/catkin_ws/src/robonomics_drone_sim/src\npython3 takeoff.py\n```\nWaiting till \"Waiting for payment\" \n\n![launch](../images/iris-drone-demo/launch.jpg)\n\nTo send a transaction run in another window:\n`echo \"ON\" | ./robonomics io write launch -r <drone_addres> -s <employer_key>` - where **<drone_address>** and **<employer_key>** should be replaced with the strings from `config.py` accordingly.\n\nAfter data was pushed to IPFS, go to the **Chain State** in [Robonomics Parachain portal](https://polkadot.js.org/apps/?rpc=wss%3A%2F%2Fkusama.rpc.robonomics.network%2F#/). Select **datalog** in query and add DRONE datalog using `+` button.\n\n![datalog](../images/iris-drone-demo/datalog.jpg)\n\nYou can find drone's telemetry running `https://gateway.ipfs.io/ipfs/<hash>` inserting the hash from above.\n\n![output](../images/iris-drone-demo/output.jpg)\n\nIt's important to remove `db` derictory before next launches using  \n` rm -rf ~/.local/share/robonomics/chains/dev/db`\n","tools":[]}},"context":{}}