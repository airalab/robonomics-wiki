{"hash":"1ca1c2e9eb79a0e8c67655508915b5798519f749","data":{"doc":{"id":"50a7edd0757b7dcc4d2fb8fb7335eecd","title":"Gaka-Chu setup and software Установка","description":"","contributors":["PaTara43"],"headings":[],"subtitles":[{"depth":2,"value":"Установка программного обеспечения на KRC4","anchor":"#установка-программного-обеспечения-на-krc4"},{"depth":2,"value":"Установка программного обеспечения на NUC","anchor":"#установка-программного-обеспечения-на-nuc"},{"depth":2,"value":"Заполнение констант","anchor":"#заполнение-констант"},{"depth":2,"value":"Калибровка Gaka-Chu","anchor":"#калибровка-gaka-chu"},{"depth":2,"value":"Тестирование калибровки Gaka-Chu","anchor":"#тестирование-калибровки-gaka-chu"},{"depth":2,"value":"Создание искусства","anchor":"#создание-искусства"},{"depth":3,"value":"Интерфейс EKI","anchor":"#интерфейс-eki"},{"depth":3,"value":"RViz и MOVEit","anchor":"#rviz-и-moveit"},{"depth":3,"value":"Окружение","anchor":"#окружение"},{"depth":3,"value":"Обработчик изображений","anchor":"#обработчик-изображений"},{"depth":3,"value":"Модуль рисования траекторий","anchor":"#модуль-рисования-траекторий"},{"depth":2,"value":"Отправьте роботу изображение для рисования","anchor":"#отправьте-роботу-изображение-для-рисования"}],"content":"\nhttps://www.youtube.com/watch?v=GxlYxaykqTU\n\n**В этой статье мы рассмотрим некоторые этапы установки и запуска робота-художника. Требования:**\n- KUKA KR6 R900 sixx с KRC4 и SmartPad;\n- установленные Intel NUC с [ROS melodic](http://wiki.ros.org/melodic/Установка/Ubuntu);\n- Стол, краска, кисть, вода.\n\n## Установка программного обеспечения на KRC4\nТребуется интерфейс EKI как на KRC4, так и на NUC. Подробная информация о том, как его настроить на KRC4, представлена [здесь](https://github.com/AlexeiOvcharov/kuka_experimental/tree/a915bf4e932990379c84164713e7ae11a24a2a13/kuka_eki_hw_interface/krl). Запустите его на контроллере робота.\n\n## Установка программного обеспечения на NUC\nСоздайте рабочее пространство catkin:\n```\nmkdir -p ~/catkin_ws/src\ncd ~/catkin_ws/\ncatkin build\n```\nЗагрузите пакеты ROS. Все скрипты хранятся [здесь](https://github.com/airalab/robot_painter/tree/test_branch). Клонировать репозиторий:\n```\ncd src\ngit clone --branch test_branch https://github.com/airalab/robot_painter\ncd robot_painter\nrm -rf scenes\nmv * ../\ncd ..\nrmdir robot_painter\n```\nВам может понадобиться некоторые заголовочные файлы и библиотеки, чтобы все работало правильно. Загрузите их:\n```\ncd ~\ngit clone https://github.com/PaTara43/kuka_moveit_webots\ncd kuka_moveit_webots\nsudo mv -r headers/* usr/include/c++/7/\nsudo mv libs/* usr/local/lib/\ncd ~\nsvn checkout https://github.com/PX4/Matrix/trunk/matrix\nmv matrix -r /usr/include/c++/7/\nsudo apt-get install ros-melodic-brics-actuator\ncd ~/catkin_ws\ncatkin build\n```\nДобавьте команду source в файл `.bashrc`:\n```\necho “source ~/catkin_ws/devel/setup.bash” >> ~/.bashrc\nsource ~/.bashrc\n```\nНа данный момент вы должны иметь возможность запускать скрипты. Если что-то идет не так, попробуйте некоторые [решения проблем](https://github.com/airalab/robot_painter/issues)\n\n## Заполнение констант\nПрежде всего, роботу необходимо знать местоположение и ориентацию холста, а также позицию банки с краской. Все это указывается в `fake_painter_enviroment_tf/src/tf_broadcaster.cpp`. Давайте посмотрим на это.\n```\n// Plane constants\nconst double A = -0.0641;\nconst double B = 0.0214;\nconst double C = 0.9977;\nconst double D = -0.2198;\n\n// Canvas transform\nconst double px = 0.52;\nconst double py = -0.24;\nconst double qx = -0.011;\nconst double qy = -0.032;\nconst double qz = 0.0;\nconst double qw = 0.999;\n```\nЭто константы уравнения плоскости, которые указывают положение холста в трехмерном пространстве. Они должны быть получены во время процесса калибровки, описанного ниже. Далее идет краска.\n```\ncolorTransform.transform.translation.x = 0.5;\ncolorTransform.transform.translation.y = 0.2;\ncolorTransform.transform.translation.z = 0.258;\n```\nЭто координаты банки с краской. Они также могут быть указаны при калибровке. Размер холста указывается в\n```\ncanvas.width = 0.5;\ncanvas.height = 0.4;\n```\nЕще несколько важных констант хранятся в `local_task_planner/src/Drawing.cpp`:\n```\nconst double COLOR_BOTLE_HEIGHT = 0.06;\nconst double COLOR_HEIGHT = 0.045;\nconst double HEIGHT_OFFSET = COLOR_BOTLE_HEIGHT - COLOR_HEIGHT + 0.02;\nconst double BRUSH_HEIGHT = 0.01;\nconst double BRUSH_WIDTH = 0.01;\n```\nИх названия говорят сами за себя, поэтому заполните их в соответствии с ситуацией.\n\n## Калибровка Gaka-Chu\nСам процесс калибровки довольно прост.\n\n1) Запустите интерфейс EKI на KRC4:\n\nВойдите в режим 'AUT', включите драйверы и запустите скрипт `eki_hw_interface`\n\n2) Запустите интерфейс EKI на NUC\n```\nroslaunch kuka_eki_hw_interface test_hardware_interface.launch\n```\nОн должен выводить бесконечные журналы.\n\n3) Запустите RViz\n```\nroslaunch kuka_moveit_config demo.launch\n```\nВы должны увидеть следующее:\n\n![KUKA in RViz](../images/kuka-real/kuka_rviz.png \"KUKA in RViz\")\n\nПопробуйте переместить рабочий орган и нажмите 'Plan and Execute'. Робот должен двигаться. На SmartPad перейдите к **Display -> Actual position** и наблюдайте координаты рабочего органа. Горизонтально расположите холст на базе робота. Вставьте кисть в держатель и аккуратно перемещайте ее, пока она едва касается холста. В этом положении сохраните координаты рабочего органа. Повторите 12-15 раз. Также сохраните координаты центра холста и банки с краской.\nКогда у вас есть набор координат, используйте [эти](https://github.com/nakata5321/Matlab_scripts_gaka-chu) скрипты Matlab для определения недостающих констант и кватерниона. Вставьте их. Перестройте свое рабочее пространство с\n```\ncd ~/catkin_workspace\nrm -rf build logs devel\ncatkin build\n```\n\n## Тестирование калибровки Gaka-Chu\nПосле калибровки Gaka-Chu необходимо протестировать, нарисовав границы холста. Чтобы сделать это, выполните каждую в новом терминале:\n```\nroslaunch kuka_eki_hw_interface test_hardware_interface.launch\nroslaunch kuka_moveit_config demo.launch\nrosrun fake_painter_enviroment_tf tf_broadcaster\nrosrun local_task_planner draw_workspace\n```\nПосле этого вы должны увидеть контур холста в RViz:\n\n![KUKA in RViz canvas](../images/kuka-real/kuka_rviz_canvas.png \"KUKA in RViz canvas\")\n\nВ терминале нажмите \"S\" для выполнения тестирования. Конечный эффектор робота должен двигаться прямо над границами холста, и кисть должна мягко касаться холста во время всего движения. Если это не так, попробуйте перекалибровать. Если модель холста повернута неправильно, вы можете повернуть ее, изменив кватернион в Matlab.\n\n## Создание искусства\nДля работы вам понадобятся 6 основных модулей:\n- Интерфейс EKI;\n- MOVEit + RViz;\n- Трансляция окружающих рамок;\n- Сервис конвертации изображений;\n- Модуль рисования траекторий;\n- Триггер запуска.\n\nДавайте запустим их по одному.\n\n### Интерфейс EKI\nПри запуске KRC4 запустите `eki_hw_interface`, на NUC в новом терминале выполните следующее:\n```\nroslaunch kuka_eki_hw_interface test_hardware_interface.launch\n```\n\n### RViz и MOVEit\nВам понадобится планировщик и симуляция. Запустите их с помощью\n```\nroslaunch kuka_moveit_config demo.launch\n```\n\n### Окружение\nСообщите роботу, где находятся банка с краской и холст. Обратите внимание, что нет необходимости запускать узел `draw workspace`, `tf_broadcaster` передает размер холста. Он просто не отображается в RViz.\n```\nrosrun fake_painter_enviroment_tf tf_broadcaster\n```\n\n### Обработчик изображений\nВсе входящие изображения должны быть обработаны. Запустите сервис.\n```\nrosrun picture_preprocessing TextConverter.py\n```\nКогда он получает вызов, он обрабатывает изображение с помощью фильтра HP и создает файл rosbag с траекториями.\n\n### Модуль рисования траекторий\nОсновной скрипт здесь - это сам модуль рисования траекторий. Он ожидает изображение, вызывает сервис TextConverter и рисует картину.\n```\nrosrun local_task_planner trajectory_drawing\n```\n\n## Отправьте роботу изображение для рисования\nРобот слушает определенную ROS-тему, где вам нужно передать путь к желаемому изображению. Изображение должно быть квадратным (ширина равна высоте) и состоять из линий. Отправьте путь:\n```\nrostopic pub /run std_msgs/String \"data: '<path_to_picture>'\"\n```\nПосле этого появятся два окна, показывающие контуры и траектории. Закройте их и посмотрите, как рисует Gaka-Chu. Будьте внимательны к безопасности и всегда готовы нажать кнопку аварийной остановки.\nКогда Gaka-Chu заканчивает свое искусство, вы можете отправить другой путь к изображению, и художник повторяет весь процесс.\n","tools":[],"fileInfo":{"path":"ru/gaka-chu.md","name":"gaka-chu"}}},"context":{}}