{"hash":"fd5d0a5f3aa1c3e6f4368684b3f72c24a1a4a9b2","data":{"doc":{"id":"ac1566c2461e18b5e7757bc8baae80e4","title":"Connect ROS-compatibale Drone To Robonomics Parachain. Part 1. Launch by Transaction","description":"","cover_image":{"type":"image","mimeType":"image/png","src":"/assets/static/connect-any-ros-compatible-robot-under-robonomics-parachain-control-1.0b85c65.1b13b11453311c3bb2e5716bedda3ed6.png","size":{"width":1920,"height":1080},"sizes":"(max-width: 1920px) 100vw, 1920px","srcset":["/assets/static/connect-any-ros-compatible-robot-under-robonomics-parachain-control-1.1b91758.1b13b11453311c3bb2e5716bedda3ed6.png 480w","/assets/static/connect-any-ros-compatible-robot-under-robonomics-parachain-control-1.3df3210.1b13b11453311c3bb2e5716bedda3ed6.png 1024w","/assets/static/connect-any-ros-compatible-robot-under-robonomics-parachain-control-1.0b85c65.1b13b11453311c3bb2e5716bedda3ed6.png 1920w"],"dataUri":"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 1920 1080' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-eb2bbad036e7a4c9ec635d686d45a9cf'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='40'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-eb2bbad036e7a4c9ec635d686d45a9cf)' width='1920' height='1080' xlink:href='data:image/png%3bbase64%2ciVBORw0KGgoAAAANSUhEUgAAAEAAAAAkCAYAAAA5DDySAAAACXBIWXMAAAsSAAALEgHS3X78AAAFkElEQVRo3u1YaU%2bUVxTmJzTWth/aWrSt1Zami0k/9S80fmratDFNa2rdoIqKgwKVRUE2WaWIU9lkkVUQkE1FlF0UBNyQXWSYhWVWwOHpPacMmSnIjGFipva9ycn7vnO3c595zr33PG5vrt8EsrXuH2HNux9gg8cWTGu1oGI2m%2bGsMj8/D1csbm%2bIhZOt/%2bTLJQBQGR55gkeP%2bzAwNIx7Dx5iaHgEfQODGFOM41HvY4w8GcXo2Bh6F9oMDA1BpVYv9qH6iYlJlwXB7fV1H/Lit363Des2fQb3j7%2bwASDrQj72HT6KlNQM/LRjDxKSzyIgJAxBYZEIjYqFf3AojhwLgeyPYKRn5SIu6QwKS8rwm9cBBIZGIPxUPBqaW3msZ8%2beuR4Aa9/biHWbP4fHV1/j7Y0ecBdgWAMwNT2Np2MK/sfp3xxTKKAYV2JichIjo6PQTEws1CswrlSJunFotTqoVGoo%2bVuJ6Wmt6zKA41%2bAsEYw4bV33seGT/%2bHewCB8NaGzUv2AHKazGy2PM2Lv1l/mxdsfgVzaQZYbDkAXvUiASABIAEgAbAiAM4w67GcOa4jc60KAOt7AL3TTW45s3dfsK5ffgyzbZuFuSztrRdjaW/d3/quYRnHKQBQmZ2d4xufI4X6GU0mvvtPTU3zt8Fg4Dq6Iep0%2bhX7G41GzMzM2ABhKU9FvkELX66Qj3QbXQ7wVQOQV3QRqZnZKK2oFO8lOJ%2bbh%2by8AuQWFCG/uATlVTVIO5%2bDkvLLOPNXGn7du4/zhaSz5%2bB5UIYKUf/gUS8i4xJRXlmNguJSZOcX4lxGFnLEs%2bDiJVyurkXiGbnILWI4f6C5aHzKK9Kzc9HVcx/BIveIS0rBhcJiYReFD4WiTbHoX8oJGOUnNC%2b1tYDgCAvsAlB15dqiM5T4xP%2bZgjCRBEXFncaufYc4IaLFFl8qZ6OFnk3LFElUAffJEX3b73QiWZ7Gzh8NPI6Q8GhOrgisw/6BOHAkAL4imaLEiQA4EXkKOzy9cTziFCdVN5taGCCah8b2DwlFdEISwqJjhQ8HOd%2boqr3K/hHI1omXPRDsAjAzO8tJzosUCwXpqdXpntuOHKfxbek8y33%2bTePJqanF8LCElTPyD7sAEN0o9W1uuyXon4%2bi0jK0tLXjWv1NVAt2NLa04kZjMyoEjUvKLnP9rdt3UN/QhN6%2bfkTGJgpqylF/sxFX6upxXTwbRXpM/ZNFyHR2daOy5goyc/JQd6OBnY49ncx0rr12HbV115mBXT33OOQ0Yn%2b50djEGgSFH2kT5Ae1be/oZIbQt6OngV0AMkXM7/H2Yep6HfSFt8wfPn7HsP%2bwH1PUW%2bbHegG9%2bwWdwN4DMkTEJMBHUDsj%2bwLk6eeFUxnY%2bv02/p3a/LzTEzGJyUx5ov/23b9j934fnIyOQ1NrG1LOpfO%2b8s23PzAYcrEoApP2IwI3XoBD4fXj9p3sC4VRUFgE6xIRsQkcLiaxGa86BKgzUZR2WZOgn15vgFKlgk6vX4yx2bk5m3ibE980udFostnRSVcwmWb4JNAJims0E0x3mov0Avqd%2blE784LTdJrQeHSy0BwGg5HnVqrUrDfoRSiQ%2bkRPGovGpHp6d/Q4tMsA2qEJ7cGhYT7a6J8pLa9keaz73n10CArf7e5BX/8Aeu4/RL%2bgZFNLG4dCx91ubkfhQ4t/2fqBU/aAZHkqftnlBa9Dvmhtv43qq3V8EhDlicrBJ6O4jmhIktkhQcnwmHimJslk3r7%2bkAUEiVjvsbnYvAxzCgPogkFCaHllDUtdRF%2b1RoPRp/8IofROUhmJoI9FnA6KtlRHYir1I1OpNUxTV8wvHL4Kv6qymN1NkOQwAmKpHGYliS3UP89cWRZzKB3%2bL2h7kh4gASABIAEgASABIAEgASABIAHwYuVvVvrnqXdz65wAAAAASUVORK5CYII=' /%3e%3c/svg%3e"},"contributors":["PaTara43"],"translated":false,"headings":[],"subtitles":[{"depth":2,"value":"1. Find a simulation","anchor":"#1-find-a-simulation"},{"depth":2,"value":"2. Inspect ROS topics","anchor":"#2-inspect-ros-topics"},{"depth":2,"value":"3. Download controller package","anchor":"#3-download-controller-package"},{"depth":2,"value":"4. Manage accounts in DAPP","anchor":"#4-manage-accounts-in-dapp"},{"depth":2,"value":"5. Launching the drone under parachain control","anchor":"#5-launching-the-drone-under-parachain-control"}],"content":"\n**In this article we will show that with the help of Robonomics tools you can control any ROS-compatible device. We will find a random drone simulation package on the web and adjust it to run with Robonomics.**\n**Requirements:**\n- Ubuntu 18.04 LTS\n- ROS Melodic + Gazebo + RViz (installation manual [here](http://wiki.ros.org/melodic/Installation))\n- Robonomics node (binary file) (download latest release [here](https://github.com/airalab/robonomics/releases))\n\nThe entire process of coding this part of demo is presented in a video below.\n\nhttps://www.youtube.com/watch?v=fDpwhBasQ5o&feature=youtu.be\n\n## 1. Find a simulation\nLet's surf the web. Google for `ROS drone simulator`. The first link will mostly likely show you the `tum_simulator` page on [http://wiki.ros.org/tum_simulator](http://wiki.ros.org/tum_simulator)\n\n![tum_simulator](../images/drone-demo/tum_simulator.jpg \"tum_simulator\")\n\nIt's pretty outdated, so we better find a fork for our system. Google for `tum_simulator Ubuntu 18 Gazebo 9 fork`. The first result is a GitHub [repo](https://github.com/tahsinkose/sjtu-drone) with an appropriate package. Dowload it\n```\nmkdir -p drone_simulator_ws/src\ncd drone_simulator_ws/src\ngit clone https://github.com/tahsinkose/sjtu-drone\ncd ..\ncatkin build\n```\nDon’t forget to add source command to `~/.bashrc`:\n```\necho \"source /home/$USER/drone_simulator_ws/devel/setup.bash\" >> ~/.bashrc\nsource \"~/.bashrc\"\n```\nNow we can run the simulation to see what do we need to do to take the drone under parachain control.\n```\nroslaunch sjtu_drone simple.launch\n```\n\n## 2. Inspect ROS topics\nWhen the simulation is runnung, in a new tab run the following command to see the list of topics used by the drone:\n```\nrostopic list\n```\nLet's take a look at `/cmd_vel`, `/drone/takeoff` and `/drone/land`:\n```\nrostopic info /cmd_vel\nrostopic info /drone/takeoff\nrostopic info /drone/land\n```\n\n![topics_info](../images/drone-demo/topics_info.jpg \"topics_info\")\n\nAs may be seen, there should be messages of `Twist` and `Empty` types, they are parts of `std_msgs` and `geometry_msgs`, we'll use this in the controller. Shut the simulation for a while.\n## 3. Download controller package\nGlobally, the main difference from the casual ROS robot controller is a block of code, which checks all the transactions in the network using [Robonomics IO](https://wiki.robonomics.network/docs/rio-overview/). The package itself is available on GitHub. Download it and build the workspace:\n```\ncd ~/drone_simulator_ws/src\ngit clone https://github.com/PaTara43/drone_simulator_controller\ncd drone_simulator_controller/src\nchmod +x *.py\ncd ~/drone_simulator_ws/src\ncatkin build\n```\n## 4. Manage accounts in DAPP\nSince we are testing, let's create a local robonomics network node with robonomics binary file:\n```\n./robonomics --dev\n```\n**Important!** Before next launches it is necessary to remove a directory `db` with\n\n```\nrm -rf /home/$USER/.local/share/robonomics/chains/dev/db\n```\nAfter a successful launch create accounts following [this](/docs/create-account-in-dapp) manual. **Do not forget to save each account's seed and address! You will need them for transactions**. Add these addresses, seeds and path to robonomics binary file to file `config.config` in `robonomics_ws/src/robonomics_sample_controller/src`. Transfer some money (units) to these accounts:\n\n![balances](../images/drone-demo/balances.jpg \"balances\")\n## 5. Launching the drone under parachain control\nUp to now the **only thing running** should be the robonomics local node. In a separate terminal launch drone simulation:\n```\nroslaunch sjtu_drone simple.launch\n```\nRun the script:\n```\nrosrun drone_simulator_controller drone_sample_controller.py\n```\n\n![launched_drone](../images/drone-demo/launched_drone.jpg \"launched_drone\")\n\nNow you can send a transaction triggering the drone to start flying. To do so, you should use the Robonomics IO `write` subcommand of robonomics binary file:\n```\necho \"ON\" | ./robonomics io write launch -r <DRONE_ADDRESS> -s <EMPLOYER’S_KEY>\n```\nWhere `<DRONE_ADDRESS>`  and `<EMPLOYER’S_KEY>` are replaced with  previously saved strings accordingly.\nYou should see the log `\"Taking Off\"` and the drone should start flying:\n\n![flying](../images/drone-demo/flying.jpg \"flying\")\n\nThat's how any ROS-compatible robot can be controlled by Robonomics parachain control. Proceed to [part 2](/docs/connect-any-ros-compatible-robot-under-robonomics-parachain-control-2) to learn more\n"}},"context":{}}