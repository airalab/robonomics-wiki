{"hash":"b5e63c4cd2ec742004f48fab5a85468e4b699535","data":{"doc":{"id":"35929027353b3f1db519b7558822d36e","title":"Robonomics-js","description":"","contributors":["Vourhey"],"translated":true,"headings":[],"subtitles":[{"depth":2,"value":"Installation","anchor":"#installation"},{"depth":3,"value":"Dependencies","anchor":"#dependencies"},{"depth":2,"value":"Usage","anchor":"#usage"},{"depth":3,"value":"options","anchor":"#options"},{"depth":2,"value":"API","anchor":"#api"},{"depth":3,"value":"Messages","anchor":"#messages"},{"depth":4,"value":"Demand","anchor":"#demand"},{"depth":4,"value":"Offer","anchor":"#offer"},{"depth":4,"value":"Result","anchor":"#result"},{"depth":3,"value":"Smart Contracts","anchor":"#smart-contracts"},{"depth":4,"value":"Liability","anchor":"#liability"},{"depth":4,"value":"Lighthouse","anchor":"#lighthouse"},{"depth":5,"value":"Creation of a new lighthouse","anchor":"#creation-of-a-new-lighthouse"},{"depth":5,"value":"Become a provider","anchor":"#become-a-provider"},{"depth":4,"value":"Token","anchor":"#token"},{"depth":5,"value":"Check balance","anchor":"#check-balance"},{"depth":5,"value":"Check allowance","anchor":"#check-allowance"},{"depth":5,"value":"Approve","anchor":"#approve"},{"depth":2,"value":"Links","anchor":"#links"}],"content":"\n[Robonomics-js](https://github.com/airalab/robonomics-js) is a simple Javascript library for working with Robonomics Network.\n\n## Installation\n\n```\nnpm install robonomics-js --save\n```\n\nor\n\n```\nyarn add robonomics-js\n```\n\n### Dependencies \n\n* [Web3](https://github.com/ethereum/web3.js/) version 1.2.4\n* [Ipfs](https://github.com/ipfs/js-ipfs) version 0.34.0\n\n\n## Usage \n\nCreates a Robonomics instance\n\n```JavaScript\nconst options = {...};\nconst robonomics = new Robonomics(options);\n```\n\n### options\n\nThe object of properties:\n\n```\noptions.web3\n```\n\nAn instance of [web3.js](https://github.com/ethereum/web3.js/):\n\n```JavaScript\n// metamask\nconst options = {\n  web3: new Web3(window.ethereum),\n  ...\n};\n\n// infura\nconst options = {\n  web3: new Web3(\n    new Web3.providers.WebsocketProvider(\n      \"wss://mainnet.infura.io/ws/v3/0b2f2a5026264b57b6d698b480332e89\"\n    )\n  ),\n  ...\n};\n```\n\n```\noptions.messageProvider\n```\n\nThis is an instance of MessageProviderIpfs which uses a [js-ipfs](https://github.com/ipfs/js-ipfs) node with pubsub support\n\n```JavaScript\nconst ipfs = new Ipfs({\n  repo: 'robonomics-example',\n  relay: {\n    enabled: true,\n    hop: {\n      enabled: true\n    }\n  },\n  EXPERIMENTAL: {\n    pubsub: true\n  },\n  config: {\n    Addresses: {\n      Swarm: [\n        '/dns4/ws-star.discovery.libp2p.io/tcp/443/wss/p2p-websocket-star',\n        '/dns4/1.wsstar.aira.life/tcp/443/wss/p2p-websocket-star/',\n        '/dns4/2.wsstar.aira.life/tcp/443/wss/p2p-websocket-star/',\n        '/dns4/3.wsstar.aira.life/tcp/443/wss/p2p-websocket-star/'\n      ]\n    },\n    Bootstrap: [\n      '/dns4/ams-1.bootstrap.libp2p.io/tcp/443/wss/ipfs/QmSoLer265NRgSp2LA3dPaeykiS1J6DifTC88f5uVQKNAd',\n      '/dns4/lon-1.bootstrap.libp2p.io/tcp/443/wss/ipfs/QmSoLMeWqB7YGVLJN3pNLQpmmEk35v6wYtsMGLzSr5QBU3',\n      '/dns4/nyc-1.bootstrap.libp2p.io/tcp/443/wss/ipfs/QmSoLueR4xBeUbY9WZ9xGUUxunbKWcrNFTDAadQJmocnWm',\n      '/dns4/nyc-2.bootstrap.libp2p.io/tcp/443/wss/ipfs/QmSoLV4Bbm51jM9C4gDYZQ9Cy3U6aXMJDAbzgu2fzaDs64',\n      '/dns4/node0.preload.ipfs.io/tcp/443/wss/ipfs/QmZMxNdpMkewiVZLMRxaNxUeZpDUb34pWjZ1kZvsd16Zic',\n      '/dns4/node1.preload.ipfs.io/tcp/443/wss/ipfs/Qmbut9Ywz9YEDrz8ySBSgWyJk41Uvm2QJPhwDJzJyGFsD6',\n      '/dns4/1.pubsub.aira.life/tcp/443/wss/ipfs/QmdfQmbmXt6sqjZyowxPUsmvBsgSGQjm4VXrV7WGy62dv8',\n      '/dns4/2.pubsub.aira.life/tcp/443/wss/ipfs/QmPTFt7GJ2MfDuVYwJJTULr6EnsQtGVp8ahYn9NSyoxmd9',\n      '/dns4/3.pubsub.aira.life/tcp/443/wss/ipfs/QmWZSKTEQQ985mnNzMqhGCrwQ1aTA6sxVsorsycQz9cQrw'\n    ]\n  }\n})\n\nconst options = {\n  messageProvider: new MessageProviderIpfs(ipfs),\n  ...\n};\n```\n\n```\noptions.account\n```\n\nThis is an account object which will be used to sign messages. It's necessary to specify either account address (that one must be unlocked) or a private key (the address will be recovered from the given private key).\n\nOption `isSignPrefix` tells whether or not a prefix must be appended. Default is `true`.\n\n```JavaScript\nconst options = {\n  account: {\n    address: '0x0000000000000000000000000000000000000000',\n    privateKey: '0x0000000000000000000000000000000000000000000000000000',\n    isSignPrefix: true\n  },\n  ...\n};\n```\n\n```\noptions.ens\n```\n\nThis is a `ens` contract object. This one is not required. If it's necessary you may specify `address` of the contract if the network is not set to mainnet. `suffix` may be `sid` for sidechain or `eth` for mainnet. `eth` is default. `version` is the version of Robonomics Network. Default is the latest deployed version.\n\n```JavaScript\nconst options = {\n  ens: {\n    address: '0x314159265dD8dbb310642f98f50C066173C1259b',\n    suffix: 'eth',\n    version: 5\n  },\n  ...\n};\n```\n\n```\noptions.lighthouse\n```\n\nENS name of a lighthouse, not required. Default is `airalab.lighthouse.5.robonomics.eth`. It's possible to specify only the first part of the name, like `airalab`.\n\n```JavaScript\nconst options = {\n  lighthouse: 'airalab.lighthouse.5.robonomics.eth',\n  ...\n};\n```\n\nIt's necessary to wait until full initialization\n\n```JavaScript\nconst options = {...};\nconst robonomics = new Robonomics(options);\nrobonomics.ready().then(() => {\n  console.log('Robonomics instance ready')\n})\n```\n\n## API\n\n### Messages\n\n#### Demand \n\nThe message specification\n\n```JavaScript\nconst demand = {\n  // REQUIRED\n  model: \"QmSt69qQqGka1qwRRHbdmAWk4nCbsV1mqJwd8cWbEyhf1M\",      // ipfs hash of the model \n  objective: \"QmSt69qQqGka1qwRRHbdmAWk4nCbsV1mqJwd8cWbEyhf2M\",  // ipfs hash of the objective\n  token: robonomics.xrt.address,                                // payment token address\n  cost: 1,                                                      // cost\n  deadline: 9999999,                                            // until which block demand is valid\n\n  // NOT REQUIRED \n  lighthouse: \"0x0000000000000000000000000000000000000000\",     // lighthouse address, by default the initialization address\n  validator: \"0x0000000000000000000000000000000000000000\",      // validator address if necessary\n  validatorFee: 0,                                              // validator fee \n  nonce: 1                                                      // index number \n};\n```\n\n`robonomics.sendDemand`\n\nSigning and broadcasting the demand message. A liability is returned as promise\n\n```JavaScript\nrobonomics.sendDemand(demand).then(liability => {\n  console.log(liability.address);\n});\n```\n\n`robonomics.onDemand`\n\nListens to demand messages with a defined model. If model is `null` returns any demand message.\n\n```JavaScript\nrobonomics.onDemand(model, message => {\n  console.log(message);\n});\n```\n\n#### Offer \n\nThe message specification\n\n```JavaScript\nconst offer = {\n  // REQUIRED \n  model: \"QmSt69qQqGka1qwRRHbdmAWk4nCbsV1mqJwd8cWbEyhf1M\",      // ipfs hash of the model \n  objective: \"QmSt69qQqGka1qwRRHbdmAWk4nCbsV1mqJwd8cWbEyhf2M\",  // ipfs hash of the objective\n  token: robonomics.xrt.address,                                // payment token address\n  cost: 1,                                                      // cost \n  deadline: 9999999,                                            // until which block demand is valid\n\n  // NOT REQUIRED\n  lighthouse: \"0x0000000000000000000000000000000000000000\",     // lighthouse address, by default the initialization address\n  lighthouseFee: 0,                                             // lighthouse fee\n  validator: \"0x0000000000000000000000000000000000000000\",      // validator address if necessary\n  nonce: 1                                                      // index number \n};\n```\n\n`robonomics.sendOffer`\n\nSigns and broadcasts an offer message. A liability is returned as promise\n\n```JavaScript\nrobonomics.sendOffer(offer).then(liability => {\n  console.log(liability.address);\n});\n```\n\n`robonomics.onOffer`\n\nListens to offer messages with a defined model. If model is `null` returns any offer message\n\n```JavaScript\nrobonomics.onOffer(model, message => {\n  console.log(message);\n});\n```\n\n#### Result \n\nThe message specification\n\n```JavaScript\nconst result = {\n  // REQUIRED \n  liability: \"0x0000000000000000000000000000000000000000\",  // liability contract address\n  success: true,                                            // status of the task\n  result: \"QmWXk8D1Fh5XFJvBodcWbwgyw9htjc6FJg8qi1YYEoPnrg\"  // ipfs hash of the rosbag log file\n};\n```\n\n`robonomics.sendResult`\n\nSigns and broadcasts a result message\n\n```JavaScript\nrobonomics.sendResult(result).then(() => {\n  console.log(\"ok\");\n});\n```\n\n`robonomics.onResult`\n\nListens to result messages. These results may be not valid. Valid results are stored in a liability contract\n\n```JavaScript\nrobonomics.onResult(result => {\n  console.log(result);\n});\n```\n\n### Smart Contracts \n\n#### Liability \n\n`liability.getInfo`\n\nReturn a property object of the contract\n\n```JavaScript\nliability.getInfo().then(data => {\n  console.log(data);\n  /*\n  {\n    model,\n    objective,\n    result,\n    token,\n    cost,\n    lighthouseFee,\n    validatorFee,\n    demandHash,\n    offerHash,\n    promisor,\n    promisee,\n    lighthouse,\n    validator,\n    isSuccess,\n    isFinalized\n  }\n  */\n});\n```\n\n`liability.onResult`\n\nWaits until a liability is finished. Returns a result\n\n```JavaScript\nliability.onResult().then(result => {\n  console.log(result);\n});\n```\n\n#### Lighthouse \n\n`robonomics.lighthouse.getInfo`\n\nReturns a property object of the contract\n\n```JavaScript\nrobonomics.lighthouse.getInfo().then(data => {\n  console.log(data);\n  /*\n  {\n    minimalStake,\n    timeoutInBlocks,\n    keepAliveBlock,\n    marker,\n    quota\n  }\n  */\n});\n```\n\n`robonomics.lighthouse.getProviders`\n\nReturns a list of providers on the lighthouse\n\n```JavaScript\nrobonomics.lighthouse.getProviders().then(list => {\n  console.log(list);\n});\n```\n\n##### Creation of a new lighthouse\n\n```JavaScript\nconst minimalFreeze = 1000      // Wn\nconst timeout = 25              // blocks\nconst name = 'mylighthouse'     // lighthouse name\nrobonomics.factory.methods.createLighthouse(minimalFreeze, timeout, name).send({ from: robonomics.account.address })\n    .then((tx) => console.log(tx))\n\nrobonomics.factory.onLighthouse((lighthouse) => {\n    console.log(lighthouse.name)\n})\n```\n\n##### Become a provider \n\nPreliminarily you must call `approve` for the tokens `XRT`\n\n```JavaScript\nconst name = \"mylighthouse\";    // lighthouse name\nconst stake = 1000;             // Wn\nrobonomics.lighthouse.methods\n  .refill(stake)\n  .send({ from: robonomics.account.address })\n  .then(tx => console.log(tx));\n```\n\n#### Token \n\n`robonomics.xrt.getInfo`\n\nReturns property object of the token\n\n```JavaScript\nrobonomics.xrt.getInfo().then(data => {\n  console.log(data);\n  /*\n  {\n    name,\n    totalSupply,\n    decimals,\n    symbol\n  }\n  */\n});\n```\n\n##### Check balance \n\n```JavaScript\nrobonomics.xrt.methods\n  .balanceOf(robonomics.account.address)\n  .call()\n  .then(balance => console.log(balance));\n```\n\n##### Check allowance \n\n```JavaScript\nrobonomics.xrt.methods\n  .allowance(robonomics.account.address, robonomics.factory.address)\n  .call()\n  .then(allowance => console.log(allowance));\n```\n\n##### Approve \n\n```JavaScript\nrobonomics.xrt.methods\n  .approve(robonomics.lighthouse.address, 100)\n  .send({\n    from: robonomics.account.address\n  })\n  .then(tx => console.log(tx));\n```\n\n## Links \n\n- [Website](https://robonomics.network/)\n- [Minimal template of dApp](https://github.com/airalab/vue-dapp-robonomics-template)\n- [dApp example](https://codesandbox.io/s/robonomics-vue-template-ewuiw)\n","tools":[],"fileInfo":{"path":"ja/robonomics-js.md","name":"robonomics-js"}}},"context":{}}