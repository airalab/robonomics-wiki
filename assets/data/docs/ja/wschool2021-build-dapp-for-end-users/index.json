{"hash":"8c63e72a8aa06948451fe9a9dad2639503f4f0d2","data":{"doc":{"id":"b30810c63d9d7e89c50523daf6d2024e","title":"Lesson 6.1, エンドユーザー向けのIoT Dappsの構築","description":"","contributors":["KiichiSugihara"],"translated":true,"headings":[],"subtitles":[{"depth":2,"value":"準備","anchor":"#準備"},{"depth":3,"value":"Robonomicsノードの立ち上げ","anchor":"#robonomicsノードの立ち上げ"},{"depth":3,"value":"ブラウザ拡張","anchor":"#ブラウザ拡張"},{"depth":2,"value":"DApp 開発","anchor":"#dapp-開発"},{"depth":3,"value":"Step 1","anchor":"#step-1"},{"depth":3,"value":"Step 2. polkadot.jsを使い始める","anchor":"#step-2-polkadotjsを使い始める"},{"depth":4,"value":"依存関係のインストール","anchor":"#依存関係のインストール"},{"depth":4,"value":"Robonomicsへの接続","anchor":"#robonomicsへの接続"},{"depth":3,"value":"Step 3. vueをコンポーネントに接続","anchor":"#step-3-vueをコンポーネントに接続"},{"depth":4,"value":"接続","anchor":"#接続"},{"depth":4,"value":"アカウントの残高表示","anchor":"#アカウントの残高表示"},{"depth":3,"value":"Step 4. データログ","anchor":"#step-4-データログ"},{"depth":3,"value":"Step 5. 起動","anchor":"#step-5-起動"},{"depth":3,"value":"Step 6. デモ","anchor":"#step-6-デモ"}],"content":"\n## 準備\n\n### Robonomicsノードの立ち上げ\n\ndAppの開発とテストには、ローカルのRobonomicsノードを使用します。そのためには、コンパイル済みのバイナリファイル https://github.com/airalab/robonomics/releases をダウンロードする必要があります。私はUbuntuを使用するので、適切なバージョンをダウンロードします。\n\nアーカイブを解凍\n```sh\nwget https://github.com/airalab/robonomics/releases/download/v0.24.0/robonomics-ubuntu-0.24.0-x86_64.tar.xz\ntar -xvf robonomics-ubuntu-0.24.0-x86_64.tar.xz\nchmod +x robonomics\n```\n\nこれでノードを開発モードで起動できるようになりました。これには --dev フラグを使います。\n```sh\n./robonomics --dev --tmp\n```\n\n> トラブルシューティング\n```sh\n./robonomics purge-chain --dev\n```\n\n### ブラウザ拡張\n\nブラウザに鍵を保存するために、`polkadot{.js}`という拡張機能があります。dAppでは、これを使ってトランザクションに署名します。\n\nこの拡張機能は現在、`Google chrome` と `Firefox` で利用可能です。https://polkadot.js.org/extension/ \n\n拡張機能をインストールしたら、新しいアカウントを作成します。 \n![screen1](../images/build-iot-dapps/screen1.png)\n\n> 最初のステップが完了しました。\n\n## DApp 開発\n\n### Step 1\n\n> ここでは、vue.jsのフレームワークを使ってdAppを書きますが、好きなもの・できるものを使っても構いません。\n\nvue.jsで起動アプリを作ってdAppの開発を始めましょう ここでは、2つの方法で行うことができます。\n\n方法 1:\n\n`Vue cli`コンソールユーティリティを使用する。これを行うには、`Vue cli`をインストールする必要があります。https://cli.vuejs.org/guide/installation.html \nAlso we will need `yarn`. Install it from [here](https://yarnpkg.com)\n\nインストールが完了したら、ターミナルで次のコマンドを実行します。\n\n\n```sh\nvue create mydapp\n```\n\nセットアップウィザードのいくつかの質問に答えます。ここでは、Vue 2バージョンを使用するので、デフォルトのバージョン`Default ([Vue 2] babel, eslint)`のままにしておきます。\n\n\n方法 2:\n\n例のために準備されたgitリポジトリをクローンして、step-1にチェックアウトする。\n\n```sh\ngit clone https://github.com/airalab/example-robonomics-dapp.git mydapp\ncd mydapp\ngit checkout step-1\n```\n\nその結果、起動アプリケーションがインストールされたディレクトリが作成され、起動してブラウザで開くことができるようになります。\n\n\n```sh\nyarn\nyarn serve\n```\n\n### Step 2. polkadot.jsを使い始める\n\n#### 依存関係のインストール\n\nロボノミクスチェーンにdAppを接続するために、`@polkadot/api`ライブラリがあります。また、キーを持つ拡張機能とdAppを連動させるためには、`@polkadot/extension-dapp`ライブラリがあります。これらをアプリケーションにインストールする必要があります。このライブラリの使い方の詳細は、ドキュメント https://polkadot.js.org/docs/ に記載されています。\n\n方法 1:\n\n```sh\nyarn add @polkadot/api @polkadot/extension-dapp\n```\n\nまた、mjs拡張をサポートするために、vue.config.jsファイルを追加する必要があります。\n\n`vue.config.js`\n```js\nmodule.exports = {\n  publicPath: \"\",\n  configureWebpack: {\n    resolve: {\n      extensions: [\"*\", \".mjs\", \".js\", \".vue\", \".json\", \".gql\", \".graphql\"]\n    },\n    module: {\n      rules: [\n        {\n          test: /\\.mjs$/,\n          include: /node_modules/,\n          type: \"javascript/auto\"\n        }\n      ]\n    }\n  }\n};\n```\n\n#### Robonomicsへの接続\n\nまず、Robonomicsノードに接続するためのパラメータを記述した設定ファイルを作成しましょう。デモのリポジトリには、このファイル`config.template.json`の例があります。\n\n`src/config.json`\n```json\n{\n  \"endpoint\": \"ws://localhost:9944\",\n  \"types\": {\n    \"Record\": \"Vec<u8>\",\n    \"Parameter\": \"Bool\",\n    \"Address\": \"AccountId\",\n    \"LookupSource\": \"AccountId\"\n  }\n}\n```\n\nこのファイルでは、接続先のノードとカスタムタイプを指定しています。\n\n\n次に、実行中のノードに接続するためのスクリプトを書きます。\n\n`src/utils/api.js`\n```js\nimport { ApiPromise, WsProvider } from \"@polkadot/api\";\nimport config from \"../config.json\";\n\nlet api;\nexport async function initApi() {\n  const provider = new WsProvider(config.endpoint);\n  api = await ApiPromise.create({\n    provider,\n    types: config.types\n  });\n  return api;\n}\n\nexport function getApi() {\n  return api;\n}\n```\n\n拡張機能のキーを使ってトランザクションに署名できるように、拡張機能への接続用の関数と、アカウントを初期化するための関数の2つを追加しましょう。\n\n`src/utils/api.js`\n```js\n...OTHER_CODE...\n\nimport {\n  web3Accounts,\n  web3Enable,\n  web3FromAddress\n} from \"@polkadot/extension-dapp\";\n\nasync function getExtension() {\n  const extensions = await web3Enable(\"demo\");\n  if (extensions.length === 0) throw new Error(\"no extension\");\n  return extensions[0];\n}\n\nexport async function initAccount(index = 0) {\n  const timeout = new Promise(resolve => {\n    setTimeout(resolve, 300);\n  });\n  await timeout;\n  await getExtension();\n  const accounts = await web3Accounts();\n  if (accounts.length > 0) {\n    const injector = await web3FromAddress(accounts[index].address);\n    api.setSigner(injector.signer);\n    return accounts[index].address;\n  }\n  throw new Error(\"no accounts\");\n}\n\n...OTHER_CODE...\n```\n\n口座の残高はゼロですが、ちょっとした資金が必要になります。そこで、別のfaucet関数を作る必要があります。Robonomicsを --dev フラグで起動したところ、残高の多いアリスアカウントがあるので、そこから資金を要求します。\n\n`src/utils/api.js`\n```js\n...OTHER_CODE...\n\nimport { Keyring } from \"@polkadot/keyring\";\n\nexport function getBalance(account, cb) {\n  api.query.system.account(account, ({ data: { free: currentFree } }) => {\n    cb(currentFree);\n  });\n}\n\nexport const keyring = new Keyring({ type: \"sr25519\" });\n\nexport async function faucet(address) {\n  keyring.setSS58Format(api.registry.chainSS58);\n  const account = keyring.addFromUri(\"//Alice\");\n  const tx = api.tx.balances.transfer(address, 1000000000000000);\n  await tx.signAndSend(account);\n}\n\n...OTHER_CODE...\n```\n\nフルバージョンのスクリプト  https://github.com/airalab/example-robonomics-dapp/blob/master/src/utils/api.js\n\nアプリの実行\n\n```sh\nyarn serve\n```\n\n方法 2:\n\nリポジトリをクローンしてアプリケーションを開始した場合、このステップを完了するためには、ステップ2に切り替えて残りの依存関係をインストールするだけで十分です。\n\n```sh\ngit checkout step-2\ncp src/config.template.json src/config.json\nyarn\nyarn serve\n```\n\n### Step 3. vueをコンポーネントに接続\n\n#### 接続\n\n接続用のスクリプトはすでに書いてあります。あとはそれをインターフェイス上で使います。書かれた`initApi`関数を、ルートコンポーネントの`App.vue`で呼び出すだけで十分です。そして、ユーザーが接続を待っている間に、小さなローダーを表示します（今のところ、省略記号の形で）。\n\n方法 1:\n\nコンポーネントのテンプレートとベーススタイル。\n\n`src/App.vue`\n```js\n<template>\n  <div id=\"app\">\n    <h1>Robonomics dApp</h1>\n    <div v-if=\"load\">...</div>\n    <template v-else>\n      <div v-if=\"error\" class=\"error\">{{ error }}</div>\n      <template v-else-if=\"api\">\n        connected\n      </template>\n    </template>\n  </div>\n</template>\n\n...OTHER_CODE...\n\n<style>\n#app {\n  font-family: Avenir, Helvetica, Arial, sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  text-align: center;\n  color: #2c3e50;\n  margin-top: 60px;\n}\nbutton {\n  font-size: 14px;\n  padding: 5px 12px;\n}\nbutton:hover {\n  cursor: pointer;\n}\ninput {\n  font-size: 14px;\n  padding: 5px;\n}\nselect {\n  font-size: 14px;\n  padding: 5px;\n}\nbutton:focus,\ninput:focus {\n  outline: none;\n}\n.error {\n  color: rgb(151, 31, 31);\n  font-weight: bold;\n  text-align: center;\n  margin: 10px 0;\n}\n</style>\n```\n\n`initApi`関数が呼び出されるコンポーネントコードがあります。\n\n`src/App.vue`\n```js\n<script>\nimport { initApi } from \"./utils/api\";\n\nexport default {\n  name: \"App\",\n  data() {\n    return {\n      load: false,\n      api: null,\n      error: null\n    };\n  },\n  created() {\n    this.init();\n  },\n  methods: {\n    async init() {\n      try {\n        this.load = true;\n        this.api = await initApi();\n        this.load = false;\n      } catch (error) {\n        this.error = error.message;\n        this.load = false;\n      }\n    }\n  }\n};\n</script>\n```\n\n#### アカウントの残高表示\n\nこれで、アカウントを使用し、残高を追加してインターフェイスに表示できるようになりました。\n\n適切なマークアップをテンプレートに追加しましょう。\n\n`src/App.vue`\n```js\n<template>\n\n  ...OTHER_CODE...\n\n    <template v-else>\n      <div v-if=\"error\" class=\"error\">{{ error }}</div>\n      <template v-else-if=\"api && account\">\n        <p>\n          Account: <b>{{ account }}</b> {{ balance }} |\n          <button @click=\"faucet\">\n            faucet\n          </button>\n        </p>\n      </template>\n    </template>\n\n  ...OTHER_CODE...\n\n</template>\n```\n\nアカウントアドレスと残高の新しいフィールドを追加しよう\n\n`src/App.vue`\n```js\n\n...OTHER_CODE...\n\ndata() {\n  return {\n\n    ...OTHER_CODE...\n\n    account: null,\n    balance: 0,\n\n    ...OTHER_CODE...\n\n  };\n}\n\n...OTHER_CODE...\n```\n\n`init`関数にアカウントの初期化を追加し、その残高を取得する必要があります。\n\n`src/App.vue`\n```js\n<script>\nimport { initApi, initAccount, getBalance, faucet } from \"./utils/api\";\nimport { formatBalance } from \"@polkadot/util\";\n\n...OTHER_CODE...\n\nasync init() {\n\n  ...OTHER_CODE...\n\n  this.api = await initApi();\n  this.account = await initAccount();\n  getBalance(this.account, balance => {\n    this.balance = formatBalance(balance);\n  });\n\n  ...OTHER_CODE...\n\n}\n\n...OTHER_CODE...\n</script>\n```\n\nあとは、ボタンをクリックすると、残高が補充される機能を追加します。\n\n`src/App.vue`\n```js\n\n...OTHER_CODE...\n\n  methods: {\n    faucet() {\n      faucet(this.account);\n    },\n\n...OTHER_CODE...\n```\n\nhttps://github.com/airalab/example-robonomics-dapp/blob/step-3/src/App.vue\n\nアプリの実行\n\n```sh\nyarn serve\n```\n\n方法 2:\n\nリポジトリをクローンした状態でアプリケーションを起動した場合、このステップを完了するには、ステップ3に切り替えるだけです。\n\n```sh\ngit checkout step-3\nyarn serve\n```\n\nAs a result we will get this picture in the browser\n\n![screen2](../images/build-iot-dapps/screen2.png)\n\n### Step 4. データログ\n\nチェーン内の任意のデータを保存したり読み出したりするには、`datalog`モジュールを使用します。\n\nこのモジュールの使い方の例として、`Datalog.vue`コンポーネントを作ってみましょう。\n\n方法 1:\n\n\nマークアップでは、ブロックでデータを読むための`read`ボタンを用意し、そこに日付の形式でリストを表示し、データそのものを表示するようにします。そして、文字列の形で任意のデータを入力できるテキスト入力のあるフォームと、`write`ボタンを用意します。\n\n`src/components/Datalog.vue`\n```js\n<template>\n  <div>\n    <h2>Datalog</h2>\n    <button @click=\"read\">read</button> |\n    <input v-model=\"data\" :disabled=\"isWrite\" />\n    <button @click=\"write\" :disabled=\"isWrite\">write</button>\n    <div v-if=\"error\" class=\"error\">{{ error }}</div>\n    <div v-if=\"log\" class=\"log\">\n      <p v-if=\"log.length === 0\" class=\"error\">Not found</p>\n      <div v-for=\"(item, k) in log\" :key=\"k\" class=\"row\">\n        date: <b>{{ item[0] | dateFormat }}</b>\n        <br />\n        data: <b>{{ item[1] | dataFormat }}</b>\n      </div>\n    </div>\n  </div>\n</template>\n\n...OTHER_CODE...\n\n<style scoped>\n.log {\n  border: 1px solid #eee;\n  text-align: left;\n  width: 800px;\n  margin: 20px auto;\n}\n.log .row {\n  margin: 10px;\n}\n</style>\n```\n\nコンポーネントコードです。ここでは、トランザクションを送信する際の主なポイントは、データを転送し、アカウントで署名する関数を、apiを介して呼び出すことです。\n`this.api.tx.datalog.record(stringToHex(this.data)).signAsync(this.account);`\n\n`src/components/Datalog.vue`\n```js\n<script>\nimport { stringToHex, u8aToString } from \"@polkadot/util\";\n\nexport default {\n  props: [\"api\", \"account\"],\n  data() {\n    return {\n      data: \"data string\",\n      log: null,\n      isWrite: false,\n      error: \"\"\n    };\n  },\n  filters: {\n    dateFormat: function(v) {\n      return new Date(Number(v)).toLocaleString();\n    },\n    dataFormat: function(v) {\n      return u8aToString(v);\n    }\n  },\n  methods: {\n    async read() {\n      this.log = (await this.api.query.datalog.datalog(this.account)).toArray();\n    },\n    async write() {\n      try {\n        this.error = \"\";\n        this.isWrite = true;\n        const tx = await this.api.tx.datalog\n          .record(stringToHex(this.data))\n          .signAsync(this.account);\n        await tx.send(result => {\n          if (result.status.isInBlock) {\n            this.read();\n            this.isWrite = false;\n          }\n        });\n      } catch (error) {\n        this.error = error.message;\n        this.isWrite = false;\n      }\n    }\n  }\n};\n</script>\n```\n\nhttps://github.com/airalab/example-robonomics-dapp/blob/master/src/components/Datalog.vue\n\nコンポーネントを切り替えるには、`App.vue`にコンポーネントの出力を追加します。\n\n`src/App.vue`\n```js\n...OTHER_CODE...\n\n<template v-else-if=\"api && account\">\n  <p>\n    Account: <b>{{ account }}</b> {{ balance }} |\n    <button @click=\"faucet\">faucet</button>\n  </p>\n\n  <div>\n    <div class=\"tabs\">\n      <button\n        @click=\"tab = 'datalog'\"\n        :class=\"{ active: tab === 'datalog' }\"\n      >\n        datalog\n      </button>\n    </div>\n    <Datalog v-if=\"tab === 'datalog'\" :api=\"api\" :account=\"account\" />\n  </div>\n</template>\n\n...OTHER_CODE...\n\n<script>\nimport Datalog from \"./components/Datalog\";\n\n...OTHER_CODE...\n\nexport default {\n  name: \"App\",\n  components: {\n    Datalog\n  },\n  data() {\n    return {\n      tab: \"datalog\"\n\n...OTHER_CODE...\n</script>\n\n<style>\n...OTHER_CODE...\n\n.tabs button {\n  font-size: 14px;\n  padding: 10px 20px;\n  font-weight: bold;\n  background: #ececec;\n  border: 1px solid #aaa;\n}\n.tabs button:hover {\n  background: #bfbfbf;\n}\n.tabs button:last-child {\n  border-left: none;\n}\n.tabs button.active {\n  background: #ced5e2;\n}\n</style>\n```\n\nアプリの実行\n\n```sh\nyarn serve\n```\n\n方法 2:\n\nリポジトリをクローンした状態でアプリケーションを開始した場合、このステップを完了するには、ステップ4に切り替えるだけです。\n\n```sh\ngit checkout step-4\nyarn serve\n```\n\nその結果、ブラウザには次のような画像が表示されます。\n\n![screen3](../images/build-iot-dapps/screen3.png)\n\n### Step 5. 起動\n\nこの関数は、ロボットの起動と停止に使用されます。このモジュールの使い方を説明するために、`Launch.vue`コンポーネントを書いてみましょう。\n\n\n方法 1:\n\nコンポーネントのテンプレートには、ロボットのアドレス、ON/OFFクリッカー、送信用ボタンを指定するフォームを用意します。\n\n`src/components/Launch.vue`\n```js\n<template>\n  <div>\n    <h2>Launch</h2>\n    <input v-model=\"robot\" :disabled=\"isWrite\" placeholder=\"Robot address\" />\n    <select v-model=\"parameter\" :disabled=\"isWrite\">\n      <option value=\"ON\">ON</option>\n      <option value=\"OFF\">OFF</option>\n    </select>\n    <button @click=\"launch\" :disabled=\"isWrite\">launch</button>\n    <div v-if=\"error\" class=\"error\">{{ error }}</div>\n    <div v-if=\"log.length > 0\" class=\"log\">\n      <div v-for=\"(item, k) in log\" :key=\"k\" class=\"row\">\n        sender: <b>{{ item.sender }}</b>\n        <br />\n        robot: <b>{{ item.robot }}</b>\n        <br />\n        parameter: <b>{{ item.parameter ? \"ON\" : \"OFF\" }}</b>\n      </div>\n    </div>\n  </div>\n</template>\n\n...OTHER_CODE...\n\n<style scoped>\n.log {\n  border: 1px solid #eee;\n  text-align: left;\n  width: 800px;\n  margin: 20px auto;\n}\n.log .row {\n  margin: 10px;\n}\n</style>\n```\n\nこのコードは`Datalog.vue`コンポーネントのように見えます。違いは読み方だけです。ロボットはイベントを通じてコマンドを受け取ります。\n\n`src/components/Launch.vue`\n```js\n<script>\nexport default {\n  props: [\"api\", \"account\"],\n  data() {\n    return {\n      robot: this.account,\n      parameter: \"ON\",\n      log: [],\n      isWrite: false,\n      error: \"\",\n      unsubscribe: null\n    };\n  },\n  async created() {\n    this.unsubscribe = await this.api.query.system.events(events => {\n      events.forEach(record => {\n        const { event } = record;\n        if (event.section === \"launch\" && event.method === \"NewLaunch\") {\n          const sender = event.data[0].toString();\n          const robot = event.data[1].toString();\n          const parameter = event.data[2].toHuman();\n          this.log.push({\n            sender,\n            robot,\n            parameter\n          });\n        }\n      });\n    });\n  },\n  destroyed() {\n    if (this.unsubscribe) {\n      this.unsubscribe();\n    }\n  },\n  methods: {\n    async launch() {\n      try {\n        this.error = \"\";\n        this.isWrite = true;\n        const tx = await this.api.tx.launch\n          .launch(this.robot, this.parameter === \"ON\")\n          .signAsync(this.account);\n        await tx.send(result => {\n          if (result.status.isInBlock) {\n            this.isWrite = false;\n          }\n        });\n      } catch (error) {\n        this.error = error.message;\n        this.isWrite = false;\n      }\n    }\n  }\n};\n</script>\n```\n\nhttps://github.com/airalab/example-robonomics-dapp/blob/master/src/components/Launch.vue\n\n\n表示のために、`App.vue`に新しいコンポーネントを追加します。\n\n`src/App.vue`\n```js\n<template>\n...OTHER_CODE...\n\n  <div>\n    <div class=\"tabs\">\n      <button\n        @click=\"tab = 'datalog'\"\n        :class=\"{ active: tab === 'datalog' }\"\n      >\n        datalog\n      </button>\n      <button\n        @click=\"tab = 'launch'\"\n        :class=\"{ active: tab === 'launch' }\"\n      >\n        launch\n      </button>\n    </div>\n    <Datalog v-if=\"tab === 'datalog'\" :api=\"api\" :account=\"account\" />\n    <Launch v-if=\"tab === 'launch'\" :api=\"api\" :account=\"account\" />\n  </div>\n\n...OTHER_CODE...\n</template>\n\n...OTHER_CODE...\n\n<script>\nimport Datalog from \"./components/Datalog\";\nimport Launch from \"./components/Launch\";\n\n...OTHER_CODE...\n\ncomponents: {\n  Datalog,\n  Launch\n},\n\n...OTHER_CODE...\n```\n\nアプリの実行\n\n```sh\nyarn serve\n```\n\n方法 2:\n\nリポジトリをクローンした状態でアプリケーションを起動した場合、このステップを完了するには、ステップ5に切り替えるだけです。\n\n```sh\ngit checkout step-5\nyarn serve\n```\n\nその結果、ブラウザには次のような画像が表示されます。\n\n![screen4](../images/build-iot-dapps/screen4.png)\n\n### Step 6. デモ\n\nこのデモでは、dAppを介して起動・停止できる車を用意します。車は走行中にログを収集し、停車後にはチェーンに保存します。ここでは、別々に試した2つのモジュールを組み合わせて使用します。\n\nロボット(車)の動作をエミュレートするために、Robotクラスを書きます。このロボットのアカウントとして`Alice`キーを使います。`Robot`クラスは、`NewLaunch`イベントを監視して、自分の電源を入れたり切ったりします。電源を入れた後は、ログにデータを集め始めます。そして、シャットダウンの後、このログを`datalog`モジュールに保存します。\n\n方法 1:\n\n`src/utils/robot.js`というファイルを作成します。ファイルのフルコード https://github.com/airalab/example-robonomics-dapp/blob/master/src/utils/robot.js\n\nビジュアル化のために、`Demo.vue`コンポーネントを作成し、スタートボタン、車のアニメーション、ログ出力を行います。\n\n`src/components/Demo.vue`\n```js\n<template>\n  <div>\n    <h2>Demo</h2>\n    <template v-if=\"robot\">\n      <h3>Robot: {{ robot.address }}</h3>\n      <p v-if=\"robot.state\">Driver: {{ robot.driver }}</p>\n      <button @click=\"run\" :disabled=\"isWrite\">\n        <template v-if=\"!robot.state\">run</template>\n        <template v-else>stop</template>\n      </button>\n      <div class=\"road\">\n        <div\n          class=\"robot\"\n          :class=\"[robot.state ? 'robot-play' : 'robot-stop']\"\n        ></div>\n      </div>\n      <div v-if=\"error\" class=\"error\">{{ error }}</div>\n      <div v-if=\"log\" class=\"log\">\n        <p v-if=\"log.length === 0\" class=\"error\">Not found</p>\n        <div v-for=\"(item, k) in log\" :key=\"k\" class=\"row\">\n          <b>{{ item[0] | dateFormat }}</b>\n          <pre>{{ item[1] | dataFormat }}</pre>\n        </div>\n      </div>\n    </template>\n  </div>\n</template>\n\n...OTHER_CODE...\n\n<style scoped>\n.log {\n  border: 1px solid #eee;\n  text-align: left;\n  width: 800px;\n  margin: 20px auto;\n  height: 500px;\n  overflow-y: auto;\n}\n.log .row {\n  margin: 10px;\n  border-bottom: 1px solid #eee;\n}\n.road {\n  width: 1000px;\n  margin: 20px auto;\n  background-color: #eee;\n  padding: 20px 0;\n  border: 5px solid #a5a5a5;\n  border-left: 0;\n  border-right: 0;\n  position: relative;\n}\n.road::before {\n  content: \" \";\n  width: 1000px;\n  border-top: 5px dashed #a5a5a5;\n  position: absolute;\n  top: 50%;\n  left: 0;\n}\n@keyframes move {\n  from {\n    transform: translateX(0);\n  }\n  to {\n    transform: translateX(100%);\n  }\n}\n.robot {\n  height: 100px;\n  width: 100px;\n  color: #fff;\n  font-weight: bold;\n  font-style: 14px;\n  animation: move 30s linear infinite;\n  border-radius: 0 10px 10px 0;\n  background: url(\"../images/build-iot-dapps/car.png\") no-repeat 0 0;\n  background-size: cover;\n}\n.robot-play {\n  animation-play-state: running;\n}\n.robot-stop {\n  animation-play-state: paused;\n}\n</style>\n```\n\nコンポーネントのコードです。ここでは、`Robot`クラスのインスタンスと、launch/stop関数を作成する必要があります。\n\n`src/components/Demo.vue`\n```js\n...OTHER_CODE...\n\n<script>\nimport { u8aToString } from \"@polkadot/util\";\nimport Robot from \"../utils/robot\";\n\nexport default {\n  props: [\"api\", \"account\"],\n  data() {\n    return {\n      isWrite: false,\n      error: \"\",\n      robot: null,\n      log: []\n    };\n  },\n  filters: {\n    dateFormat: function(v) {\n      return new Date(Number(v)).toLocaleString();\n    },\n    dataFormat: function(v) {\n      return JSON.parse(u8aToString(v));\n    }\n  },\n  async created() {\n    this.robot = new Robot(\"//Alice\", this.api);\n    await this.robot.subscribeLog(r => {\n      this.log = r.reverse().map(item => {\n        return [item[0], item[1]];\n      });\n    });\n  },\n  destroyed() {\n    this.robot.destroy();\n  },\n  methods: {\n    async run() {\n      try {\n        this.error = \"\";\n        this.isWrite = true;\n        const tx = await this.api.tx.launch\n          .launch(this.robot.account.address, !this.robot.state)\n          .signAsync(this.account);\n        await tx.send(result => {\n          if (result.status.isInBlock) {\n            this.isWrite = false;\n          }\n        });\n      } catch (error) {\n        this.error = error.message;\n        this.isWrite = false;\n      }\n    }\n  }\n};\n</script>\n\n...OTHER_CODE...\n```\n\nhttps://github.com/airalab/example-robonomics-dapp/blob/master/src/components/Demo.vue\n\n車の写真をもう一枚、`src/images/build-iot-dapps/car.png`and `src/assets/car.png` に追加してみましょう。 例 https://github.com/airalab/example-robonomics-dapp/blob/master/src/assets/car.png\n\n表示のために、`App.vue`に新しいコンポーネントを追加します。\n\n`src/App.vue`\n```js\n<template>\n\n...OTHER_CODE...\n\n  <div>\n    <div class=\"tabs\">\n      <button\n        @click=\"tab = 'datalog'\"\n        :class=\"{ active: tab === 'datalog' }\"\n      >\n        datalog\n      </button>\n      <button\n        @click=\"tab = 'launch'\"\n        :class=\"{ active: tab === 'launch' }\"\n      >\n        launch\n      </button>\n      <button @click=\"tab = 'demo'\" :class=\"{ active: tab === 'demo' }\">\n        demo\n      </button>\n    </div>\n    <Datalog v-if=\"tab === 'datalog'\" :api=\"api\" :account=\"account\" />\n    <Launch v-if=\"tab === 'launch'\" :api=\"api\" :account=\"account\" />\n    <Demo v-if=\"tab === 'demo'\" :api=\"api\" :account=\"account\" />\n  </div>\n\n...OTHER_CODE...\n\n</template>\n\n...OTHER_CODE...\n\n<script>\nimport Datalog from \"./components/Datalog\";\nimport Launch from \"./components/Launch\";\nimport Demo from \"./components/Demo\";\n\n...OTHER_CODE...\n\ncomponents: {\n  Datalog,\n  Launch,\n  Demo\n},\n\n...OTHER_CODE...\n```\n\nアプリの実行\n\n```sh\nyarn serve\n```\n\n方法 2:\n\nリポジトリをクローンした状態でアプリケーションを起動した場合、このステップを完了するには、ステップ6に切り替えるだけです。\n\n```sh\ngit checkout step-6\nyarn serve\n```\n\nその結果、ブラウザには次のような画像が表示されます。\n\n![screen5](../images/build-iot-dapps/screen5.png)\n\n以上で、今回のレッスンは終了です。\n\nありがとうございました！\n","tools":[],"fileInfo":{"path":"ja/wschool2021-build-dapp-for-end-users.md","name":"wschool2021-build-dapp-for-end-users"}}},"context":{}}