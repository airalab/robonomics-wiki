{"hash":"83714a640c2ff4928dd12a1f514b5f28b7ff1786","data":{"doc":{"id":"8a3a94c1f0b4791fb118a9637c89559f","title":"Lesson 6.2, Dapp インターフェースの構築","description":"","contributors":["KiichiSugihara"],"translated":true,"headings":[],"subtitles":[{"depth":2,"value":"はじめに","anchor":"#はじめに"},{"depth":2,"value":"前提条件","anchor":"#前提条件"},{"depth":2,"value":"このチュートリアルのための設定","anchor":"#このチュートリアルのための設定"},{"depth":2,"value":"コードの確認","anchor":"#コードの確認"},{"depth":2,"value":"CSS-IN-JS VS. グローバルスタイルシート","anchor":"#css-in-js-vs-グローバルスタイルシート"},{"depth":2,"value":"最初のインポート、どこから始めるか","anchor":"#最初のインポートどこから始めるか"},{"depth":2,"value":"レイアウトの変更とタイトルの装飾","anchor":"#レイアウトの変更とタイトルの装飾"},{"depth":2,"value":"dappのデータに合わせてスタイルを定義する","anchor":"#dappのデータに合わせてスタイルを定義する"},{"depth":2,"value":"dappのデータに応じてビューを定義する","anchor":"#dappのデータに応じてビューを定義する"},{"depth":2,"value":"再利用可能なコンポーネントの使用","anchor":"#再利用可能なコンポーネントの使用"},{"depth":3,"value":"ボックスの追加","anchor":"#ボックスの追加"},{"depth":3,"value":"ボタンの追加","anchor":"#ボタンの追加"},{"depth":3,"value":"アイコンの追加","anchor":"#アイコンの追加"},{"depth":3,"value":"ポルカドットのアバターを追加する","anchor":"#ポルカドットのアバターを追加する"},{"depth":2,"value":"見やすいようにデータを操作する","anchor":"#見やすいようにデータを操作する"},{"depth":2,"value":"CSS magic","anchor":"#css-magic"},{"depth":2,"value":"Datalog","anchor":"#datalog"},{"depth":2,"value":"起動","anchor":"#起動"},{"depth":2,"value":"デモ","anchor":"#デモ"},{"depth":2,"value":"Conclusion","anchor":"#conclusion"},{"depth":3,"value":"Checkout links","anchor":"#checkout-links"},{"depth":3,"value":"実践","anchor":"#実践"}],"content":"\n<!-- ![Building User Interface for Decentralized Applications, on top of Robonomics and Polkadot](../images/build-dapp-interface/sum.gif \"Building User Interface for Decentralized Applications, on top of Robonomics and Polkadot\") -->\n<img alt=\"Building User Interface for Decentralized Applications, on top of Robonomics and Polkadot\" src=\"../images/build-dapp-interface/sum.gif\" />\n\n## はじめに\n\nこのチュートリアルは前回の続きで、すでにシンプルなアプリケーションを構築し、アカウントとノードの接続、トランザクションの送信など、アプリの重要な機能に焦点を当てていました。今度は、このアプリケーションのために、**ユーザーフレンドリーなインターフェースを構築**します。\n\n## 前提条件\n\nこのチュートリアルは、**HTML、CSS、JavaScript**に少し慣れていて、これらのスキルを分散型アプリケーションに適用する方法を学びたい方を対象としています。\n\n\nアプリのインターフェイスを構築するために、自分にとって快適なJavaScriptフレームワークを選ぶことができますし、フレームワークなしでインターフェイスを構築することもできます。Robonomics2021では、スケーラブルで使いやすい[Vue.js](https://vuejs.org) を使用しています。\n\n## このチュートリアルのための設定\n\nこのステップから始めて、**実際にやってみて学びたい**という方は、以下のTo-Doリストに従って、前のレッスンで作成したdappを起動してください。\n\n1.あなたのOSに合ったRobonomics v0.22のローカルノードを[リリースページ](https://github.com/airalab/robonomics/releases/tag/v0.22.0) からダウンロードしてください。もしあなたのシステムが最新のリリースにない場合は、過去のリリースから最新のバージョンを探してください。\n\n2.ターミナルで `./robonomics --dev --tmp` と入力して、ロボノミクスノードを開発者モードで起動します。\n\n3.ChromeまたはFirefox用のPolkadot Extensionをダウンロードしてください。[Polkadot Extension](https://polkadot.js.org/extension/)\n\n4. [このリポジトリ](https://github.com/vol4tim/example-robonomics-dapp/)をクローンします。\n\n5. [Yarn](https://yarnpkg.com)をインストールします。\n\n6. [@vue/cli](https://cli.vuejs.org/guide/installation.html)をインストールします。\n\n7. ターミナルで コマンドを実行して、dappの開発を開始します。\n```shell\ncp src/config.template.json src/config.json\nyarn\nyarn serve\n```\n\n\n**ブラウザにこのような画面が表示されるはずです。:**\n\n![Dapp Start](../images/build-dapp-interface/dapp-start.png \"Dapp Start\")\n\n\n<details>\n\n  <summary>起動のためのいくつかの追加のヒント</summary>\n\n  - **ノードが起動している**ことを確認します:\n    ![Example of running a Robonomics node](../images/build-dapp-interface/robonomics-node-launch.png \"Example of running Robonomics node\")\n\n  - **macOS**の場合、**アクセス権**を変更する必要があるかもしれません`chmod +x robonomics`\n  - **Polkadot Extensionへのアクセスが許可**されていることを確認してください:\n    ![Polkadot Extension giving access](../images/build-dapp-interface/polkadot-permission.png \"Polkadot Extension giving access\")\n\n  - 実行中のノードのログにエラーがあり、dappが正しくロードされていない場合、devチェーンのデータベースを削除してみてください: `sudo rm -rf <YOUR LOCAL PATH>/robonomics/chains/dev/db/` そしてノードを再起動してください。それでもだめな場合は、マシンを再起動してください。\n\n\n</details>\n\n## コードの確認\n\nUIを変更するために、何をどこで修正すればよいかを明確にするために、dappの構造を確認してみましょう。\n\n```\n.\n├── public/\n│   ├── favicon.ico           # dappのアイコンです\n│   └── index.html            #  テンプレートファイル（アプリのアイコンのリンク、JavaScript、CSSファイルを注入します\n├── src/\n│   ├── assets/               # 画像やグローバルスタイルのフォルダ\n│   ├── components/           # コンポーネントを格納するフォルダ\n│   │   ├── Datalog.vue       # dapp内のDatalogタブ\n│   │   ├── Demo.vue          #  dappの中のDemoタブ\n│   │   ├── Launch.vue        # dappの中のLaunchタブ\n│   ├── utils/                # アプリ用の重要な機能が入ったフォルダ (このチュートリアルでは api.js を触ります)\n│   ├── App.vue               # アプリのルートであり、ページ全体のHTML、CSS、JSを含む。実際にはVueコンポーネントでもあります\n│   ├── main.js               # アプリのエントリーファイル、ここでグローバルスタイルをインポートします\n├── ...                       # 設定ファイルや依存関係のファイルがありますが、通常は変更しません\n├── README.md                 # ここには、アプリの説明を書くことができます。\n\n```\n\n> **このチュートリアルのコードは、[このリポジトリ](https://github.com/positivecrash/wscool21-ui-dapp)にあります。**\n\n## CSS-IN-JS VS. グローバルスタイルシート\n\nこのチュートリアルでは、UIコンポーネントの安定したライブラリがなくても、小さなdappのインターフェースをゼロから変更する方法を紹介します。そこで、さまざまなVueコンポーネントをインポートして作成するだけでなく、独自のスタイルも作成します。\n\n\nもしあなたのアプリケーションが大きかったり、プロジェクトにたくさんのdappsがある場合は、UIをより整理して効率的にするために、将来的にはあなたのプロジェクトに特化したコンポーネントのライブラリを探した方がいいでしょう（[例えば、コンポーネントを整理するためのツール](https://storybook.js.org)があります）。また、標準的なインターフェイスのテーマで良いのであれば、[サードパーティ製のUIライブラリ](https://vuetifyjs.com/)を利用することもできます。\n## 最初のインポート、どこから始めるか\n\n\nこのアプリのための特別なデザインはありませんが、[ブランドブック](https://static.robonomics.network/assets/Robonomics-Visual-Identity.pdf)があり、[タイポグラフィ、フォント、ボタンのスタイルなどが確立](https://robonomics.network/community#assets)されています。そこで、まずは以下のcssファイルをグローバルにインポートします。\n```\n...\n├── src/\n│   ├── assets/\n│   │   ├── styles/\n│   │   │   ├── reset.css         # 目的は、ブラウザの不整合を減らすことです。\n│   │   │   ├── variables.css     # 色、フォント名、スペース値など、再利用する特定の値を含む\n│   │   │   ├── typography.css    #  dapp全体のグローバルなタイポグラフィ\n│   │   │   ├── animation.css     # dapp全体で使われるキーフレームアニメーション\n...\n\n```\n\nこれらのファイルの内容は、あなたの認識に合うのであれば、代わりにApp.vueに書くことができます。しかし、この例では、App.vueを少しでもわかりやすくするために、いくつかのCSSファイルをグローバルにインポートすることをお勧めします。\n\n\nこれらのCSSファイルをアプリにインポートするには、**main.js**ファイルを編集します:\n\n![VueアプリにグローバルなCSSをインポートする](../images/build-dapp-interface/import-css-vue-1.png \"Import global CSS in Vue app\")\n\n```JS\nimport './assets/styles/reset.css'\nimport './assets/styles/variables.css'\nimport './assets/styles/typography.css'\nimport './assets/styles/animation.css'\n```\n\n**dappでフォントが変更されているかどうかを確認:**\n\n![Dapp Interface changing step 1](../images/build-dapp-interface/dapp-1.png \"Dapp Interface changing step 1\")\n\n\n## レイアウトの変更とタイトルの装飾\n\n\nアプリケーションのレイアウトを変更してみましょう。先に述べたように、App.vueに直接スタイルを書くこともできますが、今回の例では、このプロセスを分けて考えたいと思います。\n\n- **App.vue**の`<style>`タグからスタイルをコメントまたは削除する\n\n- このアプリケーションのstylesフォルダにcssファイル**app.css**を作成し、**main.js**にインポートします。\n\n```JS\nimport './assets/styles/app.css'\n```\n\n<details>\n\n<summary>app.cssにアプリの最初の基本スタイルを記述します。:</summary>\n\n```css\n#app {\n  display: grid;\n  grid-template-rows: auto 1fr;\n  align-items: stretch;\n\n  text-align: center;\n}\n\nbody {\n  background-color: var(--color-gray-light);\n}\n```\n\n</details>\n\n\n<details>\n\n<summary>アプリのタイトルを変更する [app.vue]</summary>\n\n```html\n<div class=\"top\">\n    <h1>dApp Robonomics Demo</h1>\n    <i>Winter School 2021</i>\n    <img class=\"label\" alt=\"\" src=\"./assets/images/robonomics-winter-school-2021-logo.png\"/>\n</div>\n```\n\n</details>\n\n\n\n<details>\n\n<summary>タイトル用のスタイルを書く [app.css]</summary>\n\n```css\n.top {\n  position: relative;\n  padding-top: var(--space);\n  padding-bottom: calc(var(--space)*2);\n\n  border-bottom: 2px solid var(--color-dark);\n  background-color: var(--color-light);\n}\n\n.top h1 {\n  font-size: 1.8rem;\n}\n\n.top i {\n  display: block;\n}\n\n.top .loader-label {\n  display: block;\n  margin: calc(var(--space)/3) auto;\n  max-width: 150px;\n\n  visibility: hidden;\n  opacity: 0;\n  animation: 0.5s FadeIn 0.3s ease forwards, 0.5s ScaleDown 0.1s ease forwards;\n}\n\n.top .label {\n  position: absolute;\n  width: 100px;\n  bottom: -50px;\n  left: calc(50% - 50px);\n  display: block;\n\n  transform: translateY(1rem);\n  visibility: hidden;\n  opacity: 0;\n  animation: 0.7s FadeIn 0.5s ease forwards, 1s ScaleUp 0.5s ease forwards;\n}\n```\n\n</details>\n\n- ロボノミクスウィンタースクール2021のロゴが入ったファイルを、**./src/assets/images**フォルダに置く。\n\n**次のような画面が表示されます:**\n![Dapp Interface changing step 2](../images/build-dapp-interface/dapp-2.png \"Dapp Interface changing step 2\")\n\n## dappのデータに合わせてスタイルを定義する\n\nここで、アプリのコンテンツを`<div>`要素で囲みます。また、アプリの状態（ロードされている、されていない）に応じて、異なるスタイルが必要です。\n\n- **App.vue**を開いて、ラッピング要素を書きます。:\n```html\n<div class=\"content\">\n  <!--here is everything going after the title-->\n</div>\n```\n- `<script>`で定義されている変数`load`を見つけます。\n- オブジェクトを`v-bind:class`に渡して、クラスを動的に切り替えます（私は短縮版の`:class`を使っています）。\n\n```html\n<div class=\"content\" :class=\"{ load: load }\">\n  <!--here is everything going after the title-->\n</div>\n```\nこのようにして、取得したデータに応じてアプリのスタイルを簡単に切り替えることができます。このクラスの使い方は以下の通りです。\n\n## dappのデータに応じてビューを定義する\n\nアプリのローダを変更しましょう。\n- この目的のために、別のRobonomicsプロジェクトからコンポーネントをインポートします。\n\n\n<details>\n\n<summary>./src/components/AnimatedRobonomicsLogo.vue</summary>\n\n```HTML\n<template>\n  <div class=\"logo-animated\" :style=\"{transform: 'scale('+scale+')'}\">\n      <svg version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\" width=\"196.9px\" height=\"170.3px\" viewBox=\"0 0 196.9 170.3\" style=\"enable-background:new 0 0 196.9 170.3;\" xml:space=\"preserve\">\n\t\t<g transform=\"translate(2530 155)\">\n            <path class=\"line\" d=\"M-2523.4,7.9l184.2,0.5l-91.7-158.1L-2523.4,7.9z\"/>\n\n            <circle class=\"dot\" cx=\"-2339.7\" cy=\"8.7\" r=\"6.6\"/>\n            <circle class=\"dot\" cx=\"-2523.4\" cy=\"8.2\" r=\"6.6\"/>\n            <circle class=\"dot\" cx=\"-2430.8\" cy=\"-148.4\" r=\"6.6\"/>\n            \n            <path class=\"triangle-1\" d=\"M-2477.3-18.3l92.1,0.3l-45.8-79L-2477.3-18.3z\"/>\n            <path class=\"triangle-2\" d=\"M-2431.2-18.1l46,0.1l-45.8-79L-2431.2-18.1z\"/>\n            <path class=\"triangle-3\" d=\"M-2477.3-18.3l92.1,0.3l-46-20.3L-2477.3-18.3z\"/>\n          </g>\n\t</svg>\n  </div>\n</template>\n\n<script>\n\nexport default {\n\n  props: {\n    scale: {\n      type: String,\n      default: '1'\n    },\n  },\n\n};\n</script>\n\n<style scoped>\n    /*\n    Global styles required:\n    FadeIn - keyframe animation from animation: .css\n    all --color- variables from variables.css\n    */\n\n    .logo-animated {\n        transform-origin: 0 0;\n    }\n\n    .logo-animated .dot {\n        fill: var(--color-blue);\n        visibility: hidden;\n        opacity: 0;\n        animation: 1s FadeIn 0.3s ease forwards;\n    }\n\n    .logo-animated .line {\n        fill: transparent;\n        stroke: var(--color-blue);\n        stroke-miterlimit:10;\n        stroke-dasharray: 700;\n        stroke-dashoffset: 700;\n        animation: 1s DrawSvgPath 0.5s ease-in-out forwards; \n    }\n\n    .logo-animated .triangle-1 {\n        fill: var(--color-blue);\n        visibility: hidden;\n        opacity: 0;\n        animation: 0.5s FadeIn 0.3s ease forwards, 5s logo-triangle-1 0.1s linear infinite;\n    }\n\n    .triangle-2 {\n        fill: var(--color-violet-light);\n        visibility: hidden;\n        opacity: 0;\n        animation: 0.5s FadeIn 0.3s ease forwards, 5s logo-triangle-2 0.1s linear infinite;\n    }\n\n    .triangle-3 {\n        fill: var(--color-violet-mid);\n        visibility: hidden;\n        opacity: 0;\n        animation: 0.5s FadeIn 0.3s ease forwards, 5s logo-triangle-3 0.1s linear infinite;\n    }\n\n\n    @keyframes DrawSvgPath\n        {\n        to {\n            stroke-dashoffset: 0;\n        }\n        }\n\n    @keyframes logo-triangle-1\n    {\n        0% { fill: var(--color-blue); }\n        25% { fill: var(--color-blue); }\n        50% { fill: var(--color-blue); }\n        75% { fill: var(--color-violet-light); }\n        100% { fill: var(--color-blue); }\n    }\n\n    @keyframes logo-triangle-2\n    {\n        0% { fill: var(--color-violet-light); }\n        25% { fill: #E0BDED; }\n        50% { fill: var(--color-blue); }\n        75% { fill: var(--color-blue); }\n        100% { fill: var(--color-violet-light); }\n    }\n\n    @keyframes logo-triangle-3\n    {\n        0% { fill: var(--color-violet-mid); }\n        25% { fill: var(--color-violet-light); }\n        50% { fill: var(--color-violet-light); }\n        75% { fill: var(--color-violet-dark); }\n        100% { fill: var(--color-violet-mid); }\n    }\n</style>\n```\n\n</details>\n\n- このコンポーネントを**App.vue**に登録します。\n```JS\nexport default {\n  components: {\n    Loader: () => import(\"./components/AnimatedRobonomicsLogo\")\n  }\n}\n```\n- 既に知られている変数`load`を使って、条件付きのVueディレクティブ`v-if`で挿入します。\n```HTML\n<div class=\"content\" :class=\"{ load: load }\">\n  <Loader v-if=\"load\" />\n  <template v-else>\n    <!-- ここがロードされたDAPのメインコンテンツになります -->\n  </template>\n</div>\n```\n- ブラウザで結果を見てみましょう。いくつかの問題がありますが、これから修正していきます:\n\n1. ローダーがタイトルまでポップアップしています（中央にあるべきです）。以下の行を**app.css**に挿入してみましょう。\n\n```css\nbody, html, #app {\n  height: 100%;\n  position: relative;\n}\n```\n2. 通信速度が速すぎると、一瞬、ローダーが点滅するだけになります。混乱してしまうかもしれません。そこで、アプリからの応答にタイムアウトを設定してみましょう。そのためには、**api.js**を開き、関数`initAccount`の中に以下のコードを見つけます:\n\n```JS\nconst timeout = new Promise(resolve => {\n  setTimeout(resolve, 300);\n});\n```\n`300`の代わりに`1700`を設定して、結果を確認します:\n\n<!-- ![Dappインターフェース変更ステップ3](../images/build-dapp-interface/dapp-3.gif \"Dappインターフェース変更ステップ3\") -->\n<img alt=\"Dappインターフェース変更ステップ3\" src=\"../images/build-dapp-interface/dapp-3.gif\" />\n\n\n## 再利用可能なコンポーネントの使用\n\nコンポーネントを登録して使用する方法は、前回のLoaderの項ですでに見ていますが、今回はもっと注意深く注目してみたいと思います。\n\nAccountの部分を変えてみましょう。ここでは、自分で書いたコンポーネント（ボックス、ボタン、アイコン）とサードパーティのコンポーネント（[Vue Polkadot Libraryのもの](https://vue-polkadot.js.org/vue-ui/vue-identicon/#vue-polkadot-vue-identicon )）を使います。\n\n### ボックスの追加\n\n<details>\n\n<summary>./src/components/Box.vueファイルにBoxコンポーネントを作成します。</summary>\n\n```HTML\n<template>\n    <section class=\"box\" :class=\"classList\">\n        <slot />\n    </section>\n</template>\n\n<script>\n\nexport default {\n\n  props: {\n    classList: {\n      type: String\n    },\n  },\n\n};\n</script>\n\n<style>\n    /*\n    Global styles required for css variables from variables.css\n    */\n\n    .box {\n        background-color: var(--color-light);\n        border: 1px solid var(--color-dark);\n        padding: calc(var(--space)*0.5) var(--space);\n        box-shadow: 2px 2px 0 var(--color-dark);\n        margin-bottom: calc(var(--space)*1.5);\n    }\n</style>\n```\n</details>\n\nこれで、Dappの中で何度も使うことができます。これをAccountセクションの例で見てみましょう:\n\n- コンポーネントを登録 (**App.vue**):\n\n```JS\nexport default {\n  components: {\n    Box: () => import(\"./components/Box\")\n  }\n}\n```\n\n- これをAccountセクションに使用し、prop `classList`で追加のクラスを渡します:\n\n```HTML\n<Box :classList=\"'account'\">\n  Account: <b>{{ account }}</b> {{ balance }} |\n  <button @click=\"faucet\">\n    faucet\n  </button>\n</Box>\n```\n\n**結果の確認:**\n![Dapp Interface changing step 4](../images/build-dapp-interface/dapp-4.png \"Dapp Interface changing step 4\")\n\n### ボタンの追加\n\n追加したボックス内のボタンに気づかないこともあるかもしれません。このアプリにはボタンが1つしかないわけではないので、修正してボタン用のコンポーネントを追加しましょう。\n\n<details>\n\n<summary>./src/components/Button.vueファイルにButtonコンポーネントを作成します。</summary>\n\n```HTML\n<template>\n  <button type=\"button\" :class=\"classList\" @click=\"onClick\" :disabled=\"disabled\" class=\"inline-block\">\n    {{ label }}\n  </button>\n</template>\n\n<script>\n\nexport default {\n\n  components: {\n    Icon: () => import(\"./Icon\")\n  },\n\n  props: {\n    label: {\n      type: String,\n    },\n    type: {\n      type: String,\n      default: 'primary',\n      validator: function (value) {\n        return ['primary', 'secondary'].indexOf(value) !== -1;\n      }\n    },\n    disabled: {\n      type: Boolean,\n      default: false,\n    },\n    size: {\n      type: String,\n      default: 'medium',\n      validator: function (value) {\n        return ['small', 'medium', 'large'].indexOf(value) !== -1;\n      }\n    }\n  },\n\n  computed: {\n    classList() {\n      return {\n        'button': true,\n        [`${this.type}`]: true,\n        [`button__${this.size}`]: true,\n      };\n    },\n  },\n\n  methods: {\n    onClick() {\n      this.$emit('onClick');\n    },\n  },\n\n};\n</script>\n\n<style>\n    /*\n    Global styles required for css variables from variables.css\n    */\n\n    .button {\n        appearance: none;\n        -webkit-appearance: none;\n        outline: 0;\n        border: 0;\n\n        transition: 0.1s all linear;\n\n        padding: .15rem 0.6rem;\n        border-width: 1px;\n        border-style: solid;\n        border-radius: .25rem;\n  \n        cursor: pointer;\n\n        font-family: var(--font-family);\n        font-size: calc(var(--font-size)*0.9);\n        line-height: 1;\n        font-weight: 500;\n\n        text-transform: uppercase;\n        letter-spacing: 1px;\n    }   \n\n    .button:not([disabled]):hover {\n    filter: saturate(1.5);\n    }\n\n    .button[disabled] {\n        cursor: default;\n        opacity: 0.6;\n    }\n\n    button.primary {\n        border-color: var(--color-green);\n        background-color: var(--color-green);\n        color: var(--color-light);\n    }\n\n    button.secondary {\n        border-color: var(--color-blue);\n        color: var(--color-blue);\n    }\n\n    button.secondary:not([disabled]):hover {\n        background-color: var(--color-blue);\n        color: var(--color-light);\n    }\n\n    .button__small {\n        font-size: .85rem;\n        padding: .1rem 0.45rem;\n    }\n\n    .button__large {\n        font-size: 1.2rem;\n        padding: .5rem 1.7rem;\n    }\n\n</style>\n```\n</details>\n\n\n- コンポーネントの登録 (**App.vue**):\n\n```JS\nexport default {\n  components: {\n    Button: () => import(\"./components/Button\")\n  }\n}\n```\n\n- `Button`コンポーネントで定義されたプロップを持つ`Faucet`ボタンに使用します。\n\n```HTML\n<Box :classList=\"'account'\">\n  Account: <b>{{ account }}</b> {{ balance }}\n  <Button label=\"Faucet\" size=\"large\" @onClick=\"faucet\" />\n</Box>\n```\n\n**次のようなビューが得られます:**\n![Dapp Interface changing step 5](../images/build-dapp-interface/dapp-5.png \"Dapp Interface changing step 5\")\n\nButtonコンポーネントでは、`@onClick`でpropからクリックイベントを発火していますので、faucet機能が正しく動作しているかどうか（クリックで残高が変化するはず）に注目します。\n\n\n<!-- ![Dapp Interface changing step 6](../images/build-dapp-interface/dapp-6.gif \"Dapp Interface changing step 6\") -->\n<img alt=\"Dappインターフェース変更ステップ6\" src=\"../images/build-dapp-interface/dapp-6.gif\" />\n\n### アイコンの追加\n\nこのボタンにアイコンを追加して、インターフェイスのこの要素に注目させましょう。ユーザーは、このボタンをユニット化してクリックしないと、Dappを正しく操作できないからです。\n\nこの目的のために、アイコンのためのVueライブラリを使用することができますが、私はアイコンを持つ独自のコンポーネントを作成します。\n\n- [アイコンの大きなオンライン・アーカイブ](https://www.flaticon.com)で適切なアイコンを見つけました。\n- .svgファイルをダウンロードして、ベクター・グラフィックス・エディターで編集し、適切なサイズにします。\n\n- Icon.vueコンポーネントにsvgをテキストとして挿入しました。\n\n<details>\n\n<summary>これで、Icon.vueコンポーネントの出来上がりです。</summary>\n\n```JS\n<template>\n  <div class=\"icon inline-block\" :class=\"classList\">\n    <svg v-if=\"icon == 'faucet'\" class=\"icon-fill\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\" :width=\"SvgWidth(20)\"  viewBox=\"0 0 20 24.9\" style=\"enable-background:new 0 0 20 24.9;\" xml:space=\"preserve\">\n      <path d=\"M2.7,24.9c0.2,0,2.4,0,2.4-2.4c0-2-2.2-5.2-2.2-5.2s-2.5,3.3-2.5,5.3C0.4,24.6,2.4,24.9,2.7,24.9z M20,10.8V7.2V3.1h-2.6v2.6h-3.1V1.5h2.6c0.4,0,0.8-0.3,0.8-0.8S17.3,0,16.9,0h-6.7C9.8,0,9.5,0.3,9.5,0.8s0.3,0.8,0.8,0.8h2.6v4.1H7.9c-4.7,0-6.2,3.2-6.3,4.8c0,0,0,0.1,0,0.1v2.8H0v2.1h6.2v-2.1H4.6v-2.7c0-0.3,0.4-1.9,3.3-1.9h9.6v2.1L20,10.8L20,10.8z\"/>\n    </svg>\n\n  </div>\n</template>\n\n<script>\n\nexport default {\n  props: {\n    icon: {\n      type: String\n    },\n    classList: {\n      type: String\n    },\n    scale: {\n      type: String,\n      default: '1'\n    },\n  },\n\n  methods: {\n    SvgWidth(SvgWidth) {\n      return `${SvgWidth * this.scale}px`;\n    }\n  }\n};\n</script>\n\n<style>\n.icon {\n    line-height: 1;\n}\n</style>\n\n```\n\n</details>\n\nこれをボタンで使うには、Buttonコンポーネントを編集します。\n\nIconを**Button.vue**にインポートします:\n\n```JS\ncomponents: {\n    Icon: () => import(\"./Icon\")\n}\n```\n\npropを登録:\n\n```JS\nprops: {\n  icon: {\n    type: String,\n    default: 'none'\n  }\n}\n```\n\nアイコンをボタンに追加します（`v-if`条件で異なるテンプレートを指定できます）。\n\n```HTML\n<template v-if=\"icon != 'none'\">\n  <Icon :icon=\"icon\" />\n  <span v-if=\"label != ''\" class=\"inline-block\">{{ label }}</span>\n</template>\n<template v-if=\"icon == 'none' & label != ''\">\n  {{ label }}\n</template>\n```\n\nスタイルを追加:\n\n```CSS\n.button .icon-fill path {\n  fill: var(--color-light);\n}\n\n.button > *:not(:last-child) {\n  margin-right: calc(var(--space)/2);\n}\n\n```\n\n**App.vue**でアイコンプロップをボタンに追加:\n\n```HTML\n<Button label=\"Faucet\" size=\"large\" icon=\"faucet\" @onClick=\"faucet\" />\n```\n\n**確認:**\n\n![Dapp Interface changing step 7](../images/build-dapp-interface/dapp-7.png \"Dapp Interface changing step 7\")\n\n### ポルカドットのアバターを追加する\n\n- インストール [@vue-polkadot/vue-identicon](https://vue-polkadot.js.org/vue-ui/vue-identicon/#vue-polkadot-vue-identicon)\n\n- App.vueにインポート:\n```JS\ncomponents: {\n    Identicon: () => import(\"@vue-polkadot/vue-identicon\")\n}\n```\n\n- `Account`という単語の代わりにアバターを挿入し、ドキュメントにしたがってpropsを渡し、value propとして`account`データを使用します:\n\n```HTML\n<Identicon\n  :value=\"account\"\n  :theme=\"'polkadot'\"\n  :size=\"40\"\n  :class=\"'inline-block'\"\n/>\n```\n\n**確認:**\n\n![Dapp Interface changing step 8](../images/build-dapp-interface/dapp-8.png \"Dapp Interface changing step 8\")\n\n## 見やすいようにデータを操作する\n\nアカウントのアドレスをカットしてみましょう:\n\n- 変数`account`をcomputedプロパティでラップします。\n\n```JS\ncomputed: {\n  AccountAddress() {\n    return this.account.slice(0, 6) + \"...\" + this.account.slice(-4);\n  }\n}\n```\n\n- テンプレート内の変数 `account` を `AccountAddress` に置き換えてください。\n\n**確認:**\n\n![Dapp Interface changing step 9](../images/build-dapp-interface/dapp-9.png \"Dapp Interface changing step 9\")\n\n## CSS magic\n\nアカウントセクションをもう少し可愛くしてみましょう:\n\n<details>\n\n<summary>Template</summary>\n\n```HTML\n<Box :classList=\"'account'\">\n              \n  <div class=\"account__address\">\n    <Identicon\n      :value=\"account\"\n      :theme=\"'polkadot'\"\n      :size=\"40\"\n      :class=\"'inline-block'\"\n    />\n\n    <code class=\"inline-block\">{{ AccountAddress }}</code>\n  </div>\n  \n  <div class=\"account__balance\">{{ balance }}</div>\n\n  <Button label=\"Faucet\" size=\"large\" @onClick=\"faucet\" />\n  \n</Box>\n```\n\n</details>\n\n\n<details>\n\n<summary>Styles (in app.css)</summary>\n\n```CSS\n.account {\n  display: grid;\n  grid-template-columns: repeat(3, 1fr);\n  align-items: center;\n  justify-items: stretch;\n  column-gap: var(--space);\n}\n\n.account__balance {\n    font-size: 150%;\n    font-weight: 500;\n    font-family: var(--font-family-code);\n    white-space: nowrap;\n}\n\n.account__address > *:not(:last-child) {\n    margin-right: calc(var(--space)/2);\n}\n```\n\n</details>\n\n<!-- ![Dapp Interface changing step 10](../images/build-dapp-interface/dapp-10.gif \"Dapp Interface changing step 10\") -->\n<img alt=\"Dappインターフェース変更ステップ10\" src=\"../images/build-dapp-interface/dapp-10.gif\" />\n\nタブのスタイルを編集しましょう:\n\n<details>\n\n<summary>Styles (in app.css)</summary>\n\n```CSS\n.tabs {\n  display: grid;\n  grid-template-columns: repeat(3, 1fr);\n  margin-top: calc(var(--space)*2.5);\n}\n\n.tabs button {\n  text-transform: uppercase;\n  letter-spacing: 1px;\n  border-width: 0 0 1px;\n  font-family: var(--font-family);\n  font-size: calc(var(--font-size)*1.5);\n  font-weight: 300;\n  cursor: pointer;\n  transition: 0.2s all linear;\n}\n\n.tabs button:not(.active) {\n  opacity: 0.5;\n  border-color: var(--color-gray)\n}\n\n.tabs-content {\n  padding-top: var(--space);\n}\n```\n\n</details>\n\n<details>\n\n<summary>テンプレートの変更は最小限に</summary>\n\n```HTML\n<div class=\"tabs-content\">\n  <Demo v-if=\"tab === 'demo'\" :api=\"api\" :account=\"account\" />\n  <Launch v-if=\"tab === 'launch'\" :api=\"api\" :account=\"account\" />\n  <Datalog v-if=\"tab === 'datalog'\" :api=\"api\" :account=\"account\" /> \n</div>\n```\n\n</details>\n\n<!-- ![Dapp Interface changing step 11](../images/build-dapp-interface/dapp-11.gif \"Dapp Interface changing step 11\") -->\n<img alt=\"Dappインターフェース変更ステップ11\" src=\"../images/build-dapp-interface/dapp-11.gif\" />\n\n> このチュートリアルの完成したコードは、[このリポジトリ](https://github.com/positivecrash/wscool21-ui-dapp)にあることを覚えておいてください。そして、次のステップに進みましょう :)\n\n## Datalog\n\nまず、dapp で既に知られている UI 要素であるボタンを修正することから始めましょう（`Faucet`で行ったのと同じですが、異なるプロップを使用しています）。\n\n次に、これらの要素を`<fieldset>`で囲み、意味ごとに分離します。そして、fieldsetとinputの要素に自分のスタイルを書きます。\n\n<details>\n\n<summary>Datalog.vueのテンプレート:</summary>\n\n```HTML\n<div class=\"tools\">\n  <fieldset>\n    <Button label=\"Read data\" size=\"large\" type=\"secondary\" @onClick=\"read\" />\n  </fieldset>\n\n  <fieldset>\n    <input v-model=\"data\" :disabled=\"isWrite\" class=\"large\" />\n    <Button label=\"Write\" :disabled=\"isWrite\" size=\"large\" type=\"secondary\" @onClick=\"write\" />\n  </fieldset>\n</div>\n```\n\n</details>\n\n\n<details>\n\n<summary>app.cssのinput要素のスタイル - グローバルなものになるはず:</summary>\n\n```CSS\ninput, select{\n  padding: .3rem 0.6rem;\n  border: 1px solid var(--color-gray);\n  background-color: var(--color-light);\n  border-radius: var(--radius);\n  font-size: var(--font-size);\n  font-family: var(--font-family-code);\n  border-radius: .25rem;\n  transition: 0.2s ease all;\n}\n\ninput:focus {\n  border-color: var(--color-dark);\n}\n\ninput.large, select.large {\n  font-size: 1.2rem;\n  padding: .35rem 1rem;\n}\n\n\n.tools *, .tools fieldset:not(:last-child):after {\n  display: inline-block;\n  vertical-align: middle;\n  vertical-align: -moz-middle-with-baseline;\n  vertical-align: -webkit-baseline-middle;\n}\n\n.tools fieldset {\n  border: 0;\n}\n\n.tools fieldset:not(:last-child):after {\n  content: \"•\";\n}\n\n.tools fieldset > *,  .tools > * {\n  margin-right: calc(var(--space)/2)\n}\n```\n\n</details>\n\n**アップデート後にすべてが問題なく動作することを確認してみましょう。:**\n\n<!-- ![Dapp Interface changing step 12](../images/build-dapp-interface/dapp-12.gif \"Dapp Interface changing step 12\") -->\n<img alt=\"Dappインターフェース変更ステップ12\" src=\"../images/build-dapp-interface/dapp-12.gif\" />\n\ndappの中にはdatalogセクションがあるので、そのためのコンポーネントを作ります。\n\n<details>\n\n<summary>新しいコンポーネントDatalogSection.vueのコードは以下のとおりです。</summary>\n\n```HTML\n<template>\n    <div v-if=\"log\" class=\"log\">\n        <h4 class=\"log-title\">Datalog</h4>\n\n        <div class=\"log-content\">\n\n          <p v-if=\"log.length === 0\" class=\"error\">Not found</p>\n\n          <details v-for=\"(item, k) in log\" :key=\"k\" class=\"box\" :open=\"k === 0\">\n              <summary>{{ item[0] }}</summary>\n              <pre>{{ item[1] }}</pre>\n          </details>\n        </div>\n    </div>\n</template>\n\n<script>\n\nexport default {\n\n  props: {\n    log: {\n      type: Array\n    }\n  },\n\n}\n\n</script>\n\n<style>\n\n.log {\n  text-align: left;\n  margin: var(--space) auto;\n  width: 100%;\n}\n\n.log-content {\n  border: 1px solid var(--color-gray);\n  max-height: 500px;\n  overflow-y: auto;\n  padding: var(--space);\n  background-color: var(--color-gray-middark);\n  outline: 1px solid #fff;\n  box-shadow: 0 0 60px 20px #fff inset;\n}\n\n.log-title {\n  color: var(--color-gray-dark);\n  font-weight: 300;\n  font-family: var(--font-family-code);\n\n  border-bottom: 1px solid var(--color-gray);\n}\n\n.log .box {\n  margin-bottom: var(--space);\n}\n\ndetails {\n  transition: 0.2s all ease;\n}\n\ndetails summary {\n  cursor: pointer;\n}\n\ndetails.box {\n  padding-top: 0;\n  padding-bottom: 0;\n}\n\ndetails.box[open] {\n  padding-bottom: calc(var(--space)*0.5);\n}\n\ndetails.box:focus {\n  box-shadow: 0 0 5px var(--color-gray)\n}\n\ndetails.box summary {\n  padding-top: calc(var(--space)*0.5);\n  padding-bottom: calc(var(--space)*0.5);\n}\n\ndetails.box[open] summary {\n  border-bottom: 1px solid var(--color-dark);\n  margin-bottom: calc(var(--space)*0.5);\n  font-weight: 500;\n}\n\n.log details.box summary {\n  font-family: var(--font-family-code);\n}\n\n</style>\n```\n\n</details>\n\n\nここで注意しなければならないのは、prop `log`を配列として渡していることです。この多次元配列にはエントリーのログが含まれていて、すべてのエントリーにはタイトル（dappのすべてのログには日付を書いています）とコンテンツがあると仮定しています。**Datalog.vue**と**Launch.vue**のコンポーネントで配列を再フォーマットする必要があります。\n\n次に**Datalog.vue**を編集します。ログを取得するFindメソッドを編集します:\n```JS\nasync read() {\n  this.log = (await this.api.query.datalog.datalog(this.account)).toArray();\n}\n```\n\n次に、**Datalog.vue**でデータをフォーマットして、**DatalogSection.vue**にログの配列を渡す必要があります。そこで、ログの配列をマッピングしてみましょう:\n```JS\nasync read() {\n  this.log = (await this.api.query.datalog.datalog(this.account)).toArray().map((item) => {\n    return [new Date(Number(item[0])).toLocaleString(), u8aToString(item[1])]\n  });\n}\n```\n\nこのコードはもう必要ありません。:\n```JS\nfilters: {\n  dateFormat: function(v) {\n    return new Date(Number(v)).toLocaleString();\n  },\n  dataFormat: function(v) {\n    return u8aToString(v);\n  }\n}\n```\n\n**DatalogタブのDatalogセクションを確認してみましょう:**\n\n<!-- ![Dapp Interface changing step 13](../images/build-dapp-interface/dapp-13.gif \"Dapp Interface changing step 13\") -->\n<img alt=\"Dappインターフェース変更ステップ13\" src=\"../images/build-dapp-interface/dapp-13.gif\" />\n\n## 起動\n\nこのステップでは、ほとんどの改善点がすでに完了しているので、テンプレートに適用するだけです。ButtonとDatalogコンポーネントをインポートし、過剰なタイトルを削除します:\n\n<!-- ![Dapp Interface changing step 14](../images/build-dapp-interface/dapp-14.gif \"Dapp Interface changing step 14\") -->\n<img alt=\"Dappインターフェース変更ステップ14\" src=\"../images/build-dapp-interface/dapp-14.gif\" />\n\n`select`コントロール要素を`checkbox`に置き換えてみましょう。\n\nこれの代わりに:\n```HTML\n<select v-model=\"parameter\" :disabled=\"isWrite\">\n  <option value=\"ON\">ON</option>\n  <option value=\"OFF\">OFF</option>\n</select>\n```\n\nこれを書く:\n```HTML\n<div class=\"toggler inline-block\">\n  <input v-model=\"parameter\" :disabled=\"isWrite\" type=\"checkbox\" id=\"robot-switch\" />\n  <label for=\"robot-switch\"><span></span></label>\n</div>\n```\n\n<details>\n\n<summary>Styles in app.css:</summary>\n\n```CSS\n.toggler input { display: none; }\n.toggler label {\n  position: relative;\n  display: block;\n  width: 60px;\n  height: 40px;\n  border-radius: 4px;\n  font-weight: 500;\n  text-transform: uppercase;\n  letter-spacing: 1px;\n  cursor: pointer;\n  background-color: var(--color-gray);\n  color: var(--color-light);\n  text-align: center;\n}\n\n.toggler label:before {\n  content: 'Off';\n  width: 100%;\n  text-align: center;\n  line-height: 40px;\n}\n\n.toggler label:after {\n  content: '';\n  display: block;\n  width: 6px;\n  height: 100%;\n  border-radius: 10px;\n  background-color: var(--color-gray-dark);\n\n  position: absolute;\n  top: 0;\n  left: 0;\n  z-index: 10;\n\n  transition: 0.3s ease-out all;\n}\n\n.toggler input:checked + label {\n  background-color: var(--color-green);\n}\n\n.toggler input:checked + label:before {\n  content: 'On';\n}\n\n.toggler input:checked + label:after {\n  transform: translateX(54px);\n  background-color: #007038;\n}\n```\n\n</details>\n\n<!-- ![Dapp Interface changing step 15](../images/build-dapp-interface/dapp-15.gif \"Dapp Interface changing step 15\") -->\n<img alt=\"Dappインターフェース変更ステップ15\" src=\"../images/build-dapp-interface/dapp-15.gif\" />\n\nインターフェイスについて明確にしておきたいことがあります。これらの要素を使って、いくつかのデバイスを開始します。それをイメージしてみましょう。ここではドローンを選んだので、`item.parameter`に応じてクラスを切り替えます。\n\n`data`に新しいプロパティを作成します:\n```JS\ndata() {\n  status: false\n}\n```\n\nボタンがクリックされ、ブロックにtxが送られた後、`parameter`の値を`status`に代入します:\n```JS\nmethods: {\n    async launch() {\n      try {\n        this.error = \"\";\n        this.isWrite = true;\n\n        const tx = await this.api.tx.launch\n          .launch(this.robot, this.parameter === \"ON\")\n          .signAsync(this.account);\n\n        await tx.send(result => {\n          if (result.status.isInBlock) {\n            this.isWrite = false;\n            this.status = this.parameter; // new line here\n          }\n        });\n      } catch (error) {\n        this.error = error.message;\n        this.isWrite = false;\n      }\n    }\n  }\n```\n\n**Launch.vue**にドローンのスタイルを書きます。このコンポーネントだけにスタイルを適用するために、`<style>`タグの`スコープ`を忘れないように。\n\n<details>\n\n<summary>drone用のCSS:</summary>\n\n```CSS\n<style scoped>\n.tools {\n  position: relative;\n  padding-left: 120px;\n  text-align: left;\n  display: inline-block;\n}\n\n.launch-drone {\n  position: absolute;\n  width: 100px;\n  left: 0;\n  filter: grayscale(1);\n  transition: 1s all ease-in;\n}\n\n.launch-drone.on {\n  filter: grayscale(0);\n  animation: DroneLaunch 10s linear infinite;\n}\n\n@keyframes DroneLaunch {\n  0%, 20%, 40%, 60%, 80%, 100% {\n    transform: translateY(0);\n  }\n  10%, 30%, 50%, 70%, 90% {\n    transform: translateY(-20%);\n  }\n}\n</style>\n```\n\n</details>\n\n<!-- ![Dapp Interface changing step 16](../images/build-dapp-interface/dapp-16.gif \"Dapp Interface changing step 16\") -->\n<img alt=\"Dappインターフェース変更ステップ16\" src=\"../images/build-dapp-interface/dapp-16.gif\" />\n\nそれでは、**DatalogSection.vue**コンポーネントを追加しましょう。\n```JS\ncomponents: {\n  DatalogSection: () => import(\"./DatalogSection\")\n}\n```\n\nログの配列を再構築:\n\n```JS\nthis.log.push({\n  sender,\n  robot,\n  parameter\n});\n```\n\n\n `[[\"entry 1 date\", \"entry 1 content\"], [\"entry 2 date\", \"entry 2 content\"]]`のような構造の場合:\n\n```JS\nthis.log.push([new Date().toLocaleString(), {\n  sender,\n  robot,\n  parameter\n}]);\n```\n\nテンプレートからコードを置き換えます:\n\n```HTML\n<div v-if=\"log.length > 0\" class=\"log\">\n  <div v-for=\"(item, k) in log\" :key=\"k\" class=\"row\">\n    sender: <b>{{ item.sender }}</b>\n    <br />\n    robot: <b>{{ item.robot }}</b>\n    <br />\n    parameter: <b>{{ item.parameter ? \"ON\" : \"OFF\" }}</b>\n  </div>\n</div>\n```\n\nこちらに置き換え:\n\n```HTML\n<DatalogSection :log=\"log\"/>\n```\n\n**確認:**\n<!-- ![Dapp Interface changing step 17](../images/build-dapp-interface/dapp-17.gif \"Dapp Interface changing step 17\") -->\n<img alt=\"Dappインターフェース変更ステップ17\" src=\"../images/build-dapp-interface/dapp-17.gif\" />\n\n時々、いくつかのエラーが出ることがあります。接続がうまくいかなかったり、何か他のことが起こる可能性があります。そこで、Dappの中にエラーメッセージ付きのフォールバックを用意しました。\n\n```HTML\n<div v-if=\"error\" class=\"error\">{{ error }}</div>\n```\n\nインターフェースでは、エラーはこのようになっています。:\n\n![Dapp Interface changing step 18](../images/build-dapp-interface/dapp-18.png \"Dapp Interface changing step 18\")\n\n**app.css**に`.error`のスタイルを追加します:\n\n```CSS\n.error {\n  font-weight: 400;\n  text-transform: uppercase;\n  letter-spacing: 1px;\n  color: var(--color-red);\n}\n```\n\nそして、`.tools`の部分と他のコンテンツの間のスペースを、**app.css**でも下から修正します。\n\n```CSS\n.tools {\n  margin-bottom: var(--space);\n}\n```\n\n以下のようになります:\n\n![Dapp Interface changing step 19](../images/build-dapp-interface/dapp-19.png \"Dapp Interface changing step 19\")\n\nこのページでは、ボタンを「primary」にしています。技術的には問題ありませんが、上記のユーザーエクスペリエンスからすると、これは問題ありません。画面上に複数のプライマリ・ボタンを使用しない方が良いでしょう。そこで、**Launch.vue**に`type=\"secondary \"`のプロパティを持つ`ボタン`を追加して、この問題を解決しましょう。\n\n![Dapp Interface changing step 20](../images/build-dapp-interface/dapp-20.png \"Dapp Interface changing step 20\")\n\n良い感じ、次はノードの問題を解決して、デモのステップに進みましょう。\n\n## デモ\n\nはじめに、タブを入れ替えて、最も関連性の高いものに注意を払うようにしたいのですが、これは練習のために行う最初のステップではありません。**App.vue**でタブを反転させます。\n\nデフォルトのデータの入れ替えも忘れずに:\n\n```JS\ndata() {\n    return {\n      ...\n      tab: \"demo\"\n    };\n},\n```\n\n![Dapp Interface changing step 21](../images/build-dapp-interface/dapp-21.png \"Dapp Interface changing step 21\")\n\nいつものように、すでにあるものを変更することから始めましょう。\n\n- 前のステップで行ったように、タイトル`<h2>Demo</h2>`を削除します。\n- データログ、ボタン、アカウントアドレスなど、すでに学んだUI要素を見つけます。しかし、そうはいきません。ここでは、データログだけを変更します。\n\n**Demo.vue**にコンポーネントを追加します:\n\n```JS\ncomponents: {\n  DatalogSection: () => import(\"./DatalogSection\")\n}\n```\n\n```HTML\n<DatalogSection :log=\"log\"/>\n```\n\nログには生のデータが入っているので、前のステップのようにコンポーネントで描画しやすいデータを渡すために、ログで配列を再構成する必要があります。`async created() `の中の`return [item[0], item[1]];`という行を探して、次のように置き換えます。\n\n```JS\nreturn [new Date(Number(item[0])).toLocaleString(), JSON.parse(u8aToString(item[1]))];\n```\n\n使用していないコードをログから削除します。:\n\n```HTML\n<div v-if=\"log\" class=\"log\">\n  <p v-if=\"log.length === 0\" class=\"error\">Not found</p>\n  <div v-for=\"(item, k) in log\" :key=\"k\" class=\"row\">\n    <b>{{ item[0] | dateFormat }}</b>\n    <pre>{{ item[1] | dataFormat }}</pre>\n  </div>\n</div>\n```\n\nこちらも:\n\n```JS\nfilters: {\n  dateFormat: function(v) {\n    return new Date(Number(v)).toLocaleString();\n  },\n  dataFormat: function(v) {\n    return JSON.parse(u8aToString(v));\n  }\n},\n```\n\n**確認:**\n![Dapp Interface changing step 22](../images/build-dapp-interface/dapp-22.png \"Dapp Interface changing step 22\")\n\n今回のロボット起動のデモ例をカスタマイズするには、自由にアイデアを出すことができます。個人的にはこの街から始めました。\n\n<!-- ![Dapp Interface changing step 23](../images/build-dapp-interface/dapp-23.gif \"Dapp Interface changing step 23\") -->\n<img alt=\"Dappインターフェース変更ステップ23\" src=\"../images/build-dapp-interface/dapp-23.gif\" />\n\n混乱しないように全体のコードは示しませんが、概略的には次のようなものになります。\n\n```HTML\n<div class=\"demo\" :class=\"[robot.state ? 'play' : 'stop']\">\n  <div class=\"demo-back\"></div>\n  <div class=\"demo-city\"></div>\n  <div class=\"demo-car\"></div>\n</div>\n```\n\n`.demo.play`という要素の中に、街を後ろに動かしたり、車を前に動かしたりするスタイルを書いています。\n\nこの作業をしているうちに、サイバーパンクの街を実現することを思いつきました。特別な作業なしで、車はタクシーになり、ドライバーは乗客になり、インターフェイスにはAIロボットのホログラムが乗客を迎えてくれるようになりました（これらはすべて、CSSとグラフィックの調整とトリックに過ぎません）\n\n**Cyberpunk cityデモのコード:**\n\n<details>\n\n<summary>Template</summary>\n\n```HTML\n<div class=\"demo\" :class=\"[robot.state ? 'play' : 'stop']\">\n  <div class=\"demo-back-1\"></div>\n  <div class=\"demo-back-2\"></div>\n  <div class=\"demo-city-1\"></div>\n  <div class=\"demo-car\"></div>\n\n  <div class=\"demo-data\">\n    <div class=\"demo-data-driver inline-block\">\n      <img alt=\"Driver's avatar\" src=\"../assets/images/cabman.png\" v-if=\"robot.state\"/>\n    </div>\n    <div class=\"demo-data-lines inline-block\">\n      <div class=\"demo-data-line\">\n          <div>Robot</div>\n          <div>[ {{ addressShort(robot.address) }} ]</div>\n      </div>\n\n      <div class=\"demo-data-line\" v-if=\"robot.state\">\n          <div>Passenger</div>\n          <div>[ {{ addressShort(robot.driver) }} ]</div>\n      </div>\n\n      <div class=\"demo-data-welcome\" v-if=\"robot.state\">\n          <span>Hello, passenger. </span>\n          <span>I've linked to the vehicle. </span>\n          <span>Your ride begins, congrats! </span>\n      </div>\n    </div>\n\n  </div>\n\n  <Button :label=\"robot.state ? 'stop' : 'run'\" :disabled=\"isWrite\" size=\"large\" @onClick=\"run\" />\n</div>\n```\n\n</details>\n\n短縮されるべきハッシュアドレスが複数あるので、メソッドを追加しました。\n```JS\nmethods: {\n  addressShort(address) {\n    return address.slice(0, 6) + \"...\" + address.slice(-4);\n  }\n}\n```\n\nButtonコンポーネントの登録も忘れずに\n\n```JS\ncomponents: {\n  Button: () => import(\"./Button\")\n}\n```\n\n<details>\n\n<summary>Styles</summary>\n\n```CSS\n<style scoped>\n.demo {\n    --h: 120px;\n    --color-yellow: #F2F209;\n\n    background-color: #AFCCD3;\n\n    background: linear-gradient(#010123, #4baac7);\n\n    position: relative;\n    height: 500px;\n    overflow: hidden;\n\n    border-width: 2px 2px 2px 15px;\n    border-style: solid;\n    border-color: var(--color-yellow);\n    \n}\n\n.demo:before {\n    content: '[ Delamain cabs rental DEMO ]';\n    background-color: var(--color-yellow);\n    color: #000;\n\n    position: absolute;\n    top: 0;\n    left: 0;\n    padding: .5rem 1rem;\n\n    text-transform: uppercase;\n    letter-spacing: 1px;\n    font-weight: 300;\n\n    border-width: 0 6px 2px 0;\n    border-style: solid;\n    border-color: #7B186E;\n}\n\ndiv[class^=demo-back-], div[class^=demo-city-] {\n    position: absolute;\n    left: 0;\n    width: 100%;\n    z-index: 2;\n}\n\ndiv[class^=demo-back-]{\n    border-top: 1px solid #364444;\n}\n\ndiv[class^=demo-city-] {\n    background-repeat: repeat-x;\n    background-size: cover;\n    background-position: 100% 0;\n\n    height: 300px;\n    bottom: var(--h);\n\n    animation: 50s MoveCity infinite linear 1.5s;\n}\n\ndiv.demo-back-1 {\n    background-color: #060236;\n    background: linear-gradient(#7B186E, #060236);\n    height: var(--h);\n    bottom: 0;\n}\n\ndiv.demo-back-2 {\n    background-color: #c515ae;\n    border-width: 2px 0;\n    border-style: solid;\n    border-color: #69045c;\n\n    height: 20px;\n    bottom: var(--h);\n    z-index: 10;\n}\n\ndiv.demo-city-1 {\n    background-image: url(../assets/images/city-1.png);\n}\n\n.demo-car {\n    background-image: url(../assets/images/car.png);\n    background-size: contain;\n    background-repeat: no-repeat;\n    background-position: 100% 0;\n\n    width: calc(508px * 0.5);\n    height: calc(257px * 0.5);\n    position: absolute;\n    bottom: calc(var(--h) + 4px);\n    z-index: 10;\n\n    transform: translateX(-100px);\n    animation: MoveCar 50s infinite 1.5s linear;\n}\n\n.demo.play div[class^=demo-city-], .demo.play .demo-car { animation-play-state: running; }\n.demo.stop div[class^=demo-city-], .demo.stop .demo-car { animation-play-state: paused; }\n\n.demo.play .demo-car {\n    background-image: url(../assets/images/car-ride.png);\n}\n\n\n.demo button {\n    background-color: var(--color-yellow);\n    border-color: var(--color-yellow);\n    color: #000;\n\n    position: absolute;\n    bottom: 30px;\n    right: 30px;\n    z-index: 1000;\n}\n\n.demo-data {\n    position: absolute;\n    bottom: 30px;\n    left: 30px;\n    z-index: 1000;\n\n    background-color: rgba(0, 0, 0, .5);\n    color: #fff;\n    padding: .5rem;\n    font-family: var(--font-family-code);\n\n    transition: 0.2s all ease;\n}\n\n.demo-data-lines {\n    max-width: 400px;\n}\n\n.demo-data-line {\n    display: grid;\n    grid-template-columns: 100px auto;\n    gap: .5rem;\n    text-align: left;\n}\n\n.demo-data-line div:first-child {\n    text-transform: uppercase;\n    letter-spacing: 1px;\n    font-weight: 700;\n}\n\n.demo-data-driver {\n    margin-right: 1rem;\n}\n\n.demo-data-driver img {\n    display: block;\n    max-width: 100px;\n\n    visibility: hidden;\n    opacity: 0;\n    animation: FadeInBlink .3s cubic-bezier(0.075, 0.82, 0.165, 1) 0.6s forwards;\n}\n\n.demo-data-welcome {\n    text-align: left;\n    padding-top: .5rem;\n}\n\n.demo-data-welcome span {\n    visibility: hidden;\n    opacity: 0;\n\n    animation-name: FadeIn;\n    animation-timing-function: cubic-bezier(0.075, 0.82, 0.165, 1);\n    animation-duration: 0.6s;\n    animation-fill-mode: forwards;\n}\n\n.demo-data-welcome span:nth-child(1) { animation-delay: 1.5s; }\n.demo-data-welcome span:nth-child(2) { animation-delay: 2.5s; }\n.demo-data-welcome span:nth-child(3) { animation-delay: 3.2s; }\n\n\n@keyframes MoveCity\n{\n  100% {\n    background-position: -1000px 0;\n  }\n}\n\n@keyframes MoveCar\n{\n    0% {\n        transform: translateX(-100px);\n    }\n    100% {\n        transform: translateX(960px);\n    }\n}\n</style>\n\n```\n\n</details>\n\n**結果:**\n\n<!-- ![Dapp Interface changing step 25](../images/build-dapp-interface/dapp-25.gif \"Dapp Interface changing step 25\") -->\n<img alt=\"Dappインターフェース変更ステップ25\" src=\"../images/build-dapp-interface/dapp-25.gif\" />\n\n## Conclusion\n\nおめでとうございます！これで、Dappのデザインを変更し、アプリケーションのインターフェイスの構築を開始する方法がわかりました。\n\n### Checkout links\n\n- [このチュートリアルの全コード](https://github.com/positivecrash/wscool21-ui-dapp)\n- [Discordで話し合う](https://discord.gg/5UWNGNaAUf)\n- [ロボノミクスウィンタースクール2021のスケジュールと概要を見る](https://robonomics.network/blog/winter-robonomics-school/)\n- [Github of contributor](https://github.com/positivecrash)\n\n### 実践\n\nもし時間が余っていたり、スキルを練習したい場合は、このデモで行える改善アイデアがあります:\n\n- UIを狭い画面に適応させ、モバイルフレンドリーなdappにする\n- dappの**_variables.scss**ファイルとテンプレートファイルを編集して、「ライト/ダーク」モードを追加する\n- アドレスに「クリップボードにコピー」ボタンを追加\n- 繊細なポップアップを作成して、ユーザーに変更を通知する（例：「Faucet」ボタンをクリックした後にユニットを受け取ったというメッセージをポップアップで表示したり、「起動」セクションで発生したエラーをポップアップで移動させることができます）。\n\n\n質問や結果の共有は[Discord](https://discord.gg/5UWNGNaAUf)で行ってください。メッセージに `@positivecrash`をつけてください。\n\n\n\n\n\n\n","tools":[],"fileInfo":{"path":"ja/wschool2021-build-dapp-interface.md","name":"wschool2021-build-dapp-interface"}}},"context":{}}