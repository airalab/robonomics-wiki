{"hash":"374e5e6bd3c921ba1dd42a764de57557a5b04902","data":{"doc":{"id":"5f0504b8a9fd72ad9e5dc7ccfaa8faec","title":"責任","description":"","contributors":["PaTara43"],"headings":[],"subtitles":[{"depth":2,"value":"理論の概要","anchor":"#理論の概要"},{"depth":3,"value":"交渉","anchor":"#交渉"},{"depth":3,"value":"署名","anchor":"#署名"},{"depth":2,"value":"責任を作成する","anchor":"#責任を作成する"},{"depth":3,"value":"準備","anchor":"#準備"},{"depth":3,"value":"1. 3つのアカウントを作成し、それらに資金を追加します","anchor":"#1-3つのアカウントを作成し、それらに資金を追加します"},{"depth":3,"value":"1. Developer -> Extrinsics に移動します","anchor":"#1-developer---extrinsics-に移動します"},{"depth":3,"value":"2. 可能な外部機能のドロップダウン リストから liability -> createate を選択します。","anchor":"#2-可能な外部機能のドロップダウン-リストから-liability---createate-を選択します。"},{"depth":3,"value":"3. トランザクションを送信します","anchor":"#3-トランザクションを送信します"},{"depth":3,"value":"4. イベントで責任を確認する","anchor":"#4-イベントで責任を確認する"},{"depth":3,"value":"5. ストレージの探索","anchor":"#5-ストレージの探索"},{"depth":2,"value":"レポート","anchor":"#レポート"},{"depth":3,"value":"1. extrinsicsに移動し、liability -> finalize(report)に移動します","anchor":"#1-extrinsicsに移動し、liability---finalizereportに移動します"},{"depth":3,"value":"2. レポートを探索する","anchor":"#2-レポートを探索する"},{"depth":3,"value":"3. 残高を確認する","anchor":"#3-残高を確認する"}],"content":"\n**ロボットを経済主体にするには、そのための契約ツールが必要です。 Liability - Robonomicsパレットは、パラチェーンアカウント間の契約を実装します！**\n\n<robo-wiki-note type=\"warning\" title=\"Dev Node\">\n\n  このチュートリアルはRobonomics Nodeのローカルインスタンスでデモンストレーションれていることに注意してください。[こちらの手順](/docs/run-dev-node)で自分のものをセットアップしてください。\n\n</robo-wiki-note>\n\n## 理論の概要\n\nEthereumでは、責任の相互作用の構造がかなり複雑でした。[こちら](/docs/robonomics-how-it-works)で詳細をご覧いただけます。現在はKusamaで少し簡単になりました！\n\n### 交渉\n\n契約に署名するには、まず双方が交渉する必要があります。 これは、[IPFS PubSub ](https://blog.ipfs.tech/25-pubsub/) や Robonomics PubSub など、いくつかの方法で実行できます。 Robonomics PubSub を使用した Python コードのサンプルは次のとおりです。\n[ここ](https://multi-agent-io.github.io/robonomics-interface/usage.html#pubsub) で紹介されています。\n\nオファーと需要は、契約の2つの主要な特性である「ジョブの説明」と「価格」を含むメッセージです。メッセージの形式は、各特定のアプリケーションごとにユーザーによって設計される必要があります。交渉プロセスでは、厳格な形式のルールに従うことはあまり重要ではありません。可能なフローは、以下の図に示されています。\n\n<robo-wiki-picture src=\"liability/negotiations.jpg\" />\n\n<robo-wiki-note type=\"warning\" title=\"PubSub\">\n\n  PubSubはオープンなプロトコルであるため、機密データは転送されません。そのため、他のプロトコルを使用する必要があります。\n\n</robo-wiki-note>\n\n\n### 署名\n\n交渉が無事に終わったら、双方は署名と呼ばれるいわゆる合意書に署名する必要があります。 これは、アカウントの秘密キーで署名された**特定の形式**の仕事の説明と価格を含むメッセージです。\n[Python-Tool](https://multi-agent-io.github.io/robonomics-interface/modules.html#robonomicsinterface.Liability.sign_liability) も同様です。\n - ジョブの説明は「テクニック」と呼ばれます。これは、エンコードされたIPFS CIDである可能性のある32バイトの長さの文字列です。\n - 価格は「経済学」と呼ばれます。これはXRTの小数点以下の桁数です。1 Weiner = 10**-9 XRTです。\n\n<robo-wiki-note type=\"note\" title=\"32 bytes\">\n\n  [IPFS](https://ipfs.tech/) CIDを適切な形式で取得するには、[Pythonライブラリ](https://multi-agent-io.github.io/robonomics-interface/modules.html#robonomicsinterface.utils.ipfs_qm_hash_to_32_bytes)を使用できます。\n  `sign_liability`関数を使用する場合、ハッシュを変換する必要はありません。自動的に行われます。\n\n</robo-wiki-note>\n\nコーヒーの例に従うと、\n\n1. タスクはJSONです\n```json\n{\"task\": \"make_espresso\", \"description\": \"Make one cup of espresso\"}\n```\n2. IPFS CIDは`QmP17mWKtQtq2Gq6qZAggPRrho3sVjQGBpXZ8KZiQ57FDi`です\n3. したがって、**テクニック**（変換されたCID）は`0x09daaa8055722a6894951b1273e807f8a46628efeec46805f0228ace230bd5a9`です \n4. **経済学**は`1.5 XRT`です。\n\n署名が完了したら、責任を作成する時が来ました！これは、約束者または約束者または第三者のアカウントで行うことができます。\n\n## 責任を作成する\n\n### 準備\n\n前述のように、少なくとも2つの側面が関与ています。この例では、3つの側面を使用して、それぞれにプロバイダを作成します。交渉はすでに何らかの形で行われたと仮定します。\n\n### 1. 3つのアカウントを作成し、それらに資金を追加します\n\n<robo-wiki-picture src=\"liability/balances.jpg\" />\n\nここでは、プロバイダに100 XRTを提供して責任の外部性を署名し、約束者には作業の支払いに2 XRTを提供しました。\n約束者には（少なくとも1 mXRTの存在保証金を除く）資金は与えられませんでした。\n\n### 1. Developer -> Extrinsics に移動します\n\n<robo-wiki-picture src=\"liability/extrinsics.jpg\" />\n\n### 2. 可能な外部機能のドロップダウン リストから liability -> createate を選択します。\n\nまた、外部性を提出するアカウントも選択します。すべてのパラメータを入力します。\n\n<robo-wiki-picture src=\"liability/create.jpg\" />\n\n<robo-wiki-note type=\"note\" title=\"Signatures\">\n\n  ここではプロバイダが使用されているため、参加者のシードを知る必要はありません。署名のみが必要です。\n\n</robo-wiki-note>\n\n### 3. トランザクションを送信します\n\n<robo-wiki-picture src=\"liability/submit.jpg\" />\n\n### 4. イベントで責任を確認する\n\nこれには、`Network -> Explorer`に移動し、右側にイベントのリストを見つけます。三角形のアイコンをクリックして展開します。\n\n<robo-wiki-picture src=\"liability/new-liability.jpg\" />\n\n<robo-wiki-note type=\"note\" title=\"Hash\">\n\n  ハッシュは、同じ [Python ツール](https://multi-agent-io.github.io/robonomics-interface/modules.html#robonomicsinterface.utils.ipfs_32_bytes_to_qm_hash) を使用して IPFS CID に変換できます。\n\n</robo-wiki-note>\n\n### 5. ストレージの探索\n\nストレージモジュール`liability`で責任のいくつかの特性を探索することもできます。\n\n<robo-wiki-picture src=\"liability/storage-liability.jpg\" />\n\n<robo-wiki-note type=\"note\" title=\"Next Index\">\n\n  `Next Index`ストレージ関数は、最新の責任インデックス+1を表示しますので、`1`であっても責任`0`が探索されます。\n\n</robo-wiki-note>\n\n## レポート\n\nコーヒーが作られ、コーヒーマシンがなんらかの方法で報告する必要があると想像してください。それが責任報告が登場する場所です。労働の証拠として、アカウントは既存の責任を最終化する際に別のIPFS CIDを報告内容として追加します。これには再び約束者の署名が必要です。\n\n<robo-wiki-note type=\"note\" title=\"Report signature\">\n\n  署名されたメッセージには、既存の負債インデックスと32バイト表現でエンコードされたレポートIPFS CIDが含まれています。再度、[Pythonツール](https://multi-agent-io.github.io/robonomics-interface/modules.html#robonomicsinterface.Liability.sign_report)を使用してレポートに名することができます。\n\n</robo-wiki-note>\n\nコーヒーマシンの例に従って：\n\n1. レポートはJSON形式です\n```json\n{\"report\": \"Coffee made! Time to execute - 80 seconds.\"}\n```\n2. IPFS CIDは`QmeXCrBuv6cw825JJfSWqNVv28AyjJZW9KReN9wcLQjfCm`です\n3. したがって、**ペイロード** (変換された CID) は `0xf06f2394f55537a5f37d63fd72bbfef50e9f60ea9e0e34224e455afae27a97a2` になります。\n4. **インデックス**は`0`で、既存の負債インデックスです。\n\n### 1. extrinsicsに移動し、liability -> finalize(report)に移動します\n\nパラメータを入力し、外部を送信します。 繰り返しますが、これはサードパーティのアカウントによって実行される可能性があります。\n\n<robo-wiki-picture src=\"liability/report.jpg\" />\n\n<robo-wiki-note type=\"warning\" title=\"Existential deposit\">\n\n  注意：約束者のアカウントは「死んでいない」ことに注意してください - 少なくとも1 mXRTの存在保証金を持っている必要があります。\n\n</robo-wiki-note>\n\nレポートに署名して送信します。完了したら、イベントでそれを確認できます。\n\n<robo-wiki-picture src=\"liability/new-report.jpg\" />\n\n### 2. レポートを探索する\n\nストレージでもレポートを確認できます。`Developer -> Storage`に移動し、ドロップダウンリストから`liability`を選択します。\n\n<robo-wiki-picture src=\"liability/storage-report.jpg\" />\n\n### 3. 残高を確認する\n\n画像では、約束者が「給料」を受け取ったことが示されています。経済的な関係が生まれました！\n\n<robo-wiki-picture src=\"liability/balances-2.jpg\" />\n\n\n<robo-wiki-note type=\"note\" title=\"Verifying\">\n\n  現時点では、ジョブが完了したかどうかを確認する方法はありませんので、約束者が報告するとトークンがそのアカウントに転送されます。 \n  検証機能は将来追加される予定です。\n\n</robo-wiki-note>","tools":["Robonomics 2.3.0 https://github.com/airalab/robonomics","robonomics_interface 1.3.5 https://github.com/Multi-Agent-io/robonomics-interface"],"fileInfo":{"path":"ja/liability.md","name":"liability"}}},"context":{}}