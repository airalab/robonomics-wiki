{"hash":"3f5dbcf25038fb82d4541254c2b3842511271503","data":{"doc":{"id":"2126bcb8c846b9c692ce7479f7bd445e","title":"Gaka-Chuのセットアップとソフトウェアのインストール","description":"","contributors":["PaTara43"],"headings":[],"subtitles":[{"depth":2,"value":"KRC4へのソフトウェアのインストール","anchor":"#krc4へのソフトウェアのインストール"},{"depth":2,"value":"NUCへのソフトウェアのインストール","anchor":"#nucへのソフトウェアのインストール"},{"depth":2,"value":"定数の入力","anchor":"#定数の入力"},{"depth":2,"value":"Gaka-Chuのキャリブレーション","anchor":"#gaka-chuのキャリブレーション"},{"depth":2,"value":"Gaka-Chuのキャリブレーションのテスト","anchor":"#gaka-chuのキャリブレーションのテスト"},{"depth":2,"value":"アート作成","anchor":"#アート作成"},{"depth":3,"value":"EKIインターフェース","anchor":"#ekiインターフェース"},{"depth":3,"value":"RVizとMOVEit","anchor":"#rvizとmoveit"},{"depth":3,"value":"環境","anchor":"#環境"},{"depth":3,"value":"画像処理","anchor":"#画像処理"},{"depth":3,"value":"軌跡描画","anchor":"#軌跡描画"},{"depth":2,"value":"ロボットに描画するための画像を送信してください","anchor":"#ロボットに描画するための画像を送信してください"}],"content":"\nhttps://www.youtube.com/watch?v=GxlYxaykqTU\n\n**この記事では、ロボットペインターのセットアップのためのインストールと起動手順について説明します。要件:**\n- KUKA KR6 R900 sixxとKRC4およびSmartPad;\n- [ROS melodic](http://wiki.ros.org/melodic/インストールation/Ubuntu)がインストールされたIntel NUC;\n- テーブル、絵の具、筆、水。\n\n## KRC4へのソフトウェアのインストール\nKRC4とNUCの両方にEKIインターフェースが必要です。KRC4での設定方法の詳細は[こちら](https://github.com/AlexeiOvcharov/kuka_experimental/tree/a915bf4e932990379c84164713e7ae11a24a2a13/kuka_eki_hw_interface/krl)に示されています。ロボットのコントローラーで起動してください。\n\n## NUCへのソフトウェアのインストール\ncatkinワークスペースを作成してください。\n```\nmkdir -p ~/catkin_ws/src\ncd ~/catkin_ws/\ncatkin build\n```\nROSパッケージをダウンロードしてください。すべてのスクリプトは[ここ](https://github.com/airalab/robot_painter/tree/test_branch)に保存されています。リポジトリをクローンしてください。\n```\ncd src\ngit clone --branch test_branch https://github.com/airalab/robot_painter\ncd robot_painter\nrm -rf scenes\nmv * ../\ncd ..\nrmdir robot_painter\n```\nすべてが正しく動作するために、いくつかのヘッダーファイルとライブラリが必要になる場合があります。それらをダウンロードしてください。\n```\ncd ~\ngit clone https://github.com/PaTara43/kuka_moveit_webots\ncd kuka_moveit_webots\nsudo mv -r headers/* usr/include/c++/7/\nsudo mv libs/* usr/local/lib/\ncd ~\nsvn checkout https://github.com/PX4/Matrix/trunk/matrix\nmv matrix -r /usr/include/c++/7/\nsudo apt-get install ros-melodic-brics-actuator\ncd ~/catkin_ws\ncatkin build\n```\n`.bashrc`ファイルにソースコマンドを追加してください。\n```\necho “source ~/catkin_ws/devel/setup.bash” >> ~/.bashrc\nsource ~/.bashrc\n```\nこれで、スクリプトを起動できるはずです。何か問題が発生した場合は、[トラブルシューティング](https://github.com/airalab/robot_painter/issues)を試してください。\n\n## 定数の入力\nま、ロボットはキャンバスの位置と向き、および絵の具の位置を知る必要があります。これらはすべて`fake_painter_enviroment_tf/src/tf_broadcaster.cpp`で指定されています。詳細を見てみましょう。\n```\n// Plane constants\nconst double A = -0.0641;\nconst double B = 0.0214;\nconst double C = 0.9977;\nconst double D = -0.2198;\n\n// Canvas transform\nconst double px = 0.52;\nconst double py = -0.24;\nconst double qx = -0.011;\nconst double qy = -0.032;\nconst double qz = 0.0;\nconst double qw = 0.999;\n```\nこれらは3D空間でキャンバスの位置を指定する平面方程式の定数です。次に絵の具があります。\n```\ncolorTransform.transform.translation.x = 0.5;\ncolorTransform.transform.translation.y = 0.2;\ncolorTransform.transform.translation.z = 0.258;\n```\nこれらは絵の具の座標です。これらもキャリブレーション時に指定することができます。キャンバスのサイズは次のように指定されます\n```\ncanvas.width = 0.5;\ncanvas.height = 0.4;\n```\nその他の重要な定数は`local_task_planner/src/Drawing.cpp`に保存されています。\n```\nconst double COLOR_BOTLE_HEIGHT = 0.06;\nconst double COLOR_HEIGHT = 0.045;\nconst double HEIGHT_OFFSET = COLOR_BOTLE_HEIGHT - COLOR_HEIGHT + 0.02;\nconst double BRUSH_HEIGHT = 0.01;\nconst double BRUSH_WIDTH = 0.01;\n```\nその名前からもわかるように、状況に応じてそれらを入力してください。\n\n## Gaka-Chuのキャリブレーション\nキャリブレーションプロセス自体は非常にシンプルです。\n\n1) KRC4でEKIインターフェースを起動します。\n\n'AUT'モードでログインし、ドライバをオンにし、スクリプト`eki_hw_interface`を起動します。\n\n2) NUCでEKIインターフェースを起動します\n```\nroslaunch kuka_eki_hw_interface test_hardware_interface.launch\n```\n無限のログが出力されるはずです。\n\n3) RVizを起動します\n```\nroslaunch kuka_moveit_config demo.launch\n```\n次のように表示されるはずです。\n\n![KUKA in RViz](../images/kuka-real/kuka_rviz.png \"KUKA in RViz\")\n\nエンドエフェクタを動かして「Plan and Execute」をクリックしてみてください。ロボットが動くはずです。SmartPadで**Display -> Actual position**に移動し、エンドエフェクタの座標を確認します。キャンバスをロボットのベースに水平に配置します。ブラシをブラシホルダーに差し込み、キャンバスにかろうじて触れるまで注意深く移動します。この位置でエンドエフェクタの座標を保存します。12〜15回繰り返します。また、キャンバスの中心と絵の具の座標も保存します。\n座標が揃ったら、[こちら](https://github.com/nakata5321/Matlab_scripts_gaka-chu)のMatlabスクリプトを使用して、不足している定数とクォータニオンを解決します。それらを貼り付けます。\n```\ncd ~/catkin_workspace\nrm -rf build logs devel\ncatkin build\n```\n\n## Gaka-Chuのキャリブレーションのテスト\nキャリブレーションが完了したら、Gaka-Chuをテストする必要があります。キャンバスの境界線を描くために次のコマンドを新しいターミナルで実行してください。\n```\nroslaunch kuka_eki_hw_interface test_hardware_interface.launch\nroslaunch kuka_moveit_config demo.launch\nrosrun fake_painter_enviroment_tf tf_broadcaster\nrosrun local_task_planner draw_workspace\n```\nこれで、RVizにキャンバスの輪郭が表示されるはずです。\n\n![KUKA in RViz canvas](../images/kuka-real/kuka_rviz_canvas.png \"KUKA in RViz canvas\")\n\nターミナルで「S」を押してテストを実行します。ロボットのエンドエフェクタはキャンバスの境界線のすぐ上に移動し、ブラシは移動中ずっとキャンバスに優しく触れるはずです。そうでない場合は、再キャリブレーションを試してください。キャンバスモデルが誤って回転している場合は、Matlabでクォータニオンを変更して回転させることができます。\n\n## アート作成\nすべてが正常に動作するには、6つの基本モジュールが必要です。\n- EKIインターフェース;\n- MOVEit + RViz;\n- 環境フレームのブロードキャスト;\n- 画像変換サービス;\n- 軌跡描画モジュール;\n- 起動トリガー。\n\nそれぞれを順番に起動しましょう。\n\n### EKIインターフェース\nKRC4で`eki_hw_interface`を起動し、NUCでは新しいターミナルで次のコマンドを実行してください。\n```\nroslaunch kuka_eki_hw_interface test_hardware_interface.launch\n```\n\n### RVizとMOVEit\nプランナーとシミュレーションが必要です。次のコマンドで起動してください。\n```\nroslaunch kuka_moveit_config demo.launch\n```\n\n### 環境\nロボットに絵の具缶とキャンバスの位置を伝えます。`draw workspace`ノードを起動する必要はありませんが、`tf_broadcaster`はキャンバスのサイズを共有します。ただし、RVizには表示されません。\n```\nrosrun fake_painter_enviroment_tf tf_broadcaster\n```\n\n### 画像処理\nすべての入力画像を処理する必要があります。サービスを起動してください。\n```\nrosrun picture_preprocessing TextConverter.py\n```\n通話を受けると、HPフィルターで画像を処理し、軌跡を持つrosbagファイルを作成します。\n\n### 軌跡描画\nここで最も重要なスクリプトは、軌跡描画自体です。画像を待ち、TextConverterサービスを呼び出して絵を描きます。\n```\nrosrun local_task_planner trajectory_drawing\n```\n\n## ロボットに描画するための画像を送信してください\nロボットは特定のROSトピックをリッスンし、所望の画像のパスを渡す必要があります。画像は正方形で（幅と高さが等しい）線で構成されている必要があります。パスを送信してください：\n```\nrostopic pub /run std_msgs/String \"data: '<path_to_picture>'\"\n```\nその後、輪郭とトラックが表示される2つのウィンドウが表示されます。それらを閉じて、Gaka-Chuの描画を見てください。安全に注意し、常に緊急停止ボタンを押す準備をしてください。\nGaka-Chuがアートを終えたら、別のパスを画像に送信し、画家が全体のプロセスを繰り返します。\n","tools":[],"fileInfo":{"path":"ja/gaka-chu.md","name":"gaka-chu"}}},"context":{}}