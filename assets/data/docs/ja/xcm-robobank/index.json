{"hash":"b019132cdf18eb9f78219b0565b919b16f679c3f","data":{"doc":{"id":"41eff665bf4ae4c80baf994069206948","title":"クロスチェーンメッセージングのためのSubstrate Cumulus Parachain Testsuite","description":"","contributors":["ddulesov","boogerwooger","tubleronchik"],"headings":[],"subtitles":[{"depth":2,"value":"上流","anchor":"#上流"},{"depth":2,"value":"ビルド＆実行","anchor":"#ビルド＆実行"},{"depth":2,"value":"初期セットアップが機能していることを確認する","anchor":"#初期セットアップが機能していることを確認する"},{"depth":3,"value":"ローカルホスト、4つのリレーチェーンバリデータ、1つのパラチェーン-100コレータ、1つのパラチェーン-200コレータ：","anchor":"#ローカルホスト、4つのリレーチェーンバリデータ、1つのパラチェーン-100コレータ、1つのパラチェーン-200コレータ："},{"depth":3,"value":"UMPメッセージパッシングテスト","anchor":"#umpメッセージパッシングテスト"},{"depth":3,"value":"HRMPメッセージパッシングテスト","anchor":"#hrmpメッセージパッシングテスト"},{"depth":3,"value":"その他のオプション","anchor":"#その他のオプション"},{"depth":2,"value":"ローカルテストネット","anchor":"#ローカルテストネット"},{"depth":3,"value":"カスタマイズされたチェーン仕様の作成","anchor":"#カスタマイズされたチェーン仕様の作成"},{"depth":2,"value":"パラチェーンをハックする","anchor":"#パラチェーンをハックする"},{"depth":2,"value":"Learn More","anchor":"#learn-more"}],"content":"\n\nこのプロジェクトの主な目標は、クロスチェーンメッセージが使用される場合のパラチェーンランタイムの開発を簡素化することです。 \nこれにより、高い再現性と簡単な使法を備えた統合テストを使用してランタイムコードの開発が可能になります。\nこれにより、ビルドの自動化、事前に設定されたネットワーク構成（リレーチェーン+2つのパラチェーン）、パラチェーン間のメッセージパッシングチャネルの設定、メッセージングテストの実行、ランタイムへの呼び出しを使用したメッセージの送信などが、すべてPythonで構築および構成されます。\n\nXCM Testsuiteは、Robobankの製品サイクルのテストに使用されます。Robobankは、外部パラチェーンに登録し、前払い注文を受け取り、それらを実行し、外部トークンを使用して支払いを受け取るためのSubstrateパレットのセットです。これにより、ロボットは必要なインフラストラクチャを備えたRobonomicsネットワーク内で動作することができますが、同時に、他のどのパラチェーンでもサービスを提供することができます。\n\n[YouTube](https://www.youtube.com/watch?v=S_bZgsxngiM)で例のビデオをご覧いただけます。\n\nデモシナリオの主なステップは次のとおりです。\n- リレーチェーンと2つのパラチェーンを6つのプロセスのパックで起動する\n- パチェーン間のXCMメッセージチャネルの設定\n- 両方のパラチェーンにロボットを登録する\n- クライアントパラチェーンでこのロボットの注文を作成する（注文の完了に対する支払いを予約する）\n- RobonomicsパラチェーンにXCMメッセージを送信する\n- Robonomicsパラチェーンに\"ミラーリング\"された注文レコードを作成する\n- ロボットがRobonomicsパラチェーンで注文を受け入れる\n- 注文の受け入れに関するXCMメッセージをクライアントパラチェーンに送信する\n- クライアントパラチェーンで注文を受け入れる（注文の締め切りまでの未完了注文に対するペナルティ料金を予約する）\n- ロボットがRobonomicsパラチェーンで注文を完了する\n- 注文の完了に関するXCMメッセージをクライアントパラチェーンに送信する\n- すべての支払いを解決する（クライアントの支払いはロボットに転送され、未使用のペナルティ料金も転送される）\n- 注文1を閉じる\n\n\n## 上流\nこのプロジェクトはのフォークです\n[Substrate Developer Hub Node Template](https://github.com/substrate-developer-hub/substrate-node-template).\nテストされているランタイムパレットのコードが含まれています。\n元のノードコードのパラチェーンは、\"./pallets\"、\"./runtime\"、\"./node\"のカタログにあります。\n\n\"substrate-node-template\"との違い\n- このコレータランタイムにはHRMPハンドラモジュールがあり、兄弟パラチェーンからのメッセージを処理できます\n- 内部XCMテスト用のモックテストランタイムが準備されています\n\n## ビルド＆実行\n推奨（非常に）セットアップ： \n```\nUbuntu 20, 16 Gb RAM, 8 CPU, 120 Gb SSD\n```\n[注意]最初のビルドには多くの時間がかかる場合があります。サブオプティマルなマシンでは数時間かかることがあります。\n\n[注意]スクリプトは、リレーチェーンとパラチェーンのFIXEDバージョン（コミットハッシュ）で動作します。\n\n[注意]デフォルトでは、スクリプトは前回の状態をすべて削除して、毎回同じ環境を再作成します。この動作は、\"config.sh\"で\"PERSISTENT\"パラメータを使用して変更できます。\n\n\nビルドおよびセットアップスクリプトを実行します。  \n```bash\ngit clone https://github.com/airalab/xcm-robobank-prototype.git\ncd xcm-robobank-prototype\n./scripts/init.sh\n```\n\n\"init.sh\"スクリプトの基本的なアクション：\n - 設定を読み取る（リビジョン番号、初期ノードキーと識別子、チェーンデータの永続性パラメータなどが記述された\"config.sh\"ファイル）\n - OSパケッ、Rust、Pythonのセットアップ\n - リレーチェーンと両方のパラチェーンのために別々のバイナリをビルドする\n    - バイナリは./binサブディレクトリに生成されます。 \n - （オプション）すべてのチェーンの前のチェーンデータを削除します\n    - \"config.sh\"で\"PERSISTENT=1\"が設定されている場合は無効になります\n - 別々のプロセス（別々のPIDとI/Oパイプで実行）として実行されます：\n    - リレーチェーンのバリデータ（安定したRococoリビジョンを実行する4つのバリデータ）\n    - パラチェーン-100のコレータ（開発中の最初のパラチェーンのための単一のコレータ）\n    - パラチェーン-200のコレータ（開発中の2番目のパラチェーンのための単一のコレータ）\n - すべてのチェーンのすべてのエンドポイント、ポートをコンソールに表示し、フロントエンドアプリ（エクスプローラ、DApp）を使用して任意のチェーンを研究できるようにします\n - すべてのチェーンのすべての出力データをコンソールに継続的に表示し続けます\n\n[警告]起動後、ネットワークが起動し、ブロックの最終化が開始され、パラチェーンが登録されまで待機してください。これらのプロセスは約5分（50ブロック×6秒）かかるはずです。\n\n## 初期セットアップが機能していることを確認する \n\n標準のPolkdotフロントエンドと生成された\"--ws-port\"エンドポイントを使用して各ノードに接続するために、[Polkadotアプリケーション](https://polkadot.js.org/apps/?rpc=ws://localhost:9500/)を開きます。\n例： \n\n### ローカルホスト、4つのリレーチェーンバリデータ、1つのパラチェーン-100コレータ、1つのパラチェーン-200コレータ：\nLocalhost, 4 relay chain validators, one parachain-100 collator, one parachain-200 collator:\n- [Relay validator 1](https://polkadot.js.org/apps/?rpc=ws://localhost:9500/)\n- [Relay validator 2](https://polkadot.js.org/apps/?rpc=ws://localhost:9501/)\n- [Relay validator 3](https://polkadot.js.org/apps/?rpc=ws://localhost:9502/)\n- [Relay validator 4](https://polkadot.js.org/apps/?rpc=ws://localhost:9503/)\n- [Parachain-100 collator](https://polkadot.js.org/apps/?rpc=ws://localhost:10054/)\n- [Parachain-200 collator](https://polkadot.js.org/apps/?rpc=ws://localhost:10055/)\n\n\nすべてがうまくいけば、合意が始まり、テストケースを実行することができます（新しいターミナルで）。\n\n### UMPメッセージパッシングテスト\n```bash\n./scripts/init.sh ump\n```\n`parachain-100`で`Balance.transfer`メッセージを作成し、リレーションチェーンに渡します。\nリレーションチェーンがメッセージを受信すると、`para 100`アカウントからCharlieアカウントに15トークンを転送します。\n\n\n### HRMPメッセージパッシングテスト\n```bash\n./scripts/init.sh ump\n```\n\n`parachain-100`で`Balance.transfer`メッセージを作成し、`sibling 200`に渡します。\nその前に、`subl 100`アカウントに1000トークンを与え、パラチェーン間の通信チャネルを確立します。\n```bash\n./scripts/init.sh hrmp\n```\n次のメッセージは`hrmpm`サブコマンドを実行することで送信できます。チャネルは作成されないため、より高速に実行されます。\n```bash\n./scripts/init.sh hrmpm\n```\n\n### その他のオプション\n```bash\n./scripts/init.sh help\n```\n\n## ローカルテストネット\n\n### カスタマイズされたチェーン仕様の作成\n```\n./bin/polkadot build-spec --chain rococo-local --disable-default-bootnode > rococo_local.json\n```\n\nrococo_local.jsonを編集し、残高と権限のパラメータを自分のものに置き換えます。\n```json\n  \"keys\": [\n    [\n      \"\",\n      \"\",\n      {\n        \"grandpa\": \"\",\n        \"babe\": \"\",\n        \"im_online\": \"\",\n        \"para_validator\": \"\",\n        \"para_assignment\": \"\",\n        \"authority_discovery\": \"\"\n      }\n    ]\n```\n\n//Alice//stashのPolkadotアドレス（sr25519暗号化）\n```bash\n$ polkadot key inspect-key --scheme sr25519 --network substrate //Alice//stash\n```\n\n```text\nSecret Key URI `//Alice//stash` is account:\nSecret seed:      \n\nPublic key (hex): \n\nAccount ID:       \n\nSS58 Address:     \n```\n\n//AliceのPolkadotグランドパセッションキー（ed25519暗号化）\n```bash\n$ polkadot key inspect-key --scheme ed25519 --network substrate //Alice\n```\n```text\nSecret Key URI `//Alice` is account:\nSecret seed:      \n\nPublic key (hex): \n\nAccount ID:       \n\nSS58 Address:     \n```\n\n//AliceのPolkadotアドレス（sr25519暗号化）\n```\n$ polkadot key inspect-key --scheme sr25519 --network substrate //Alice\n```\n```text\nSecret Key URI `//Alice` is account:\nSecret seed:      \n\nPublic key (hex): \n\nAccount ID:       \n\nSS58 Address:     \n```\n\nrococo_local.jsonを生の形式に変換します。\n```\n./bin/polkadot build-spec --chain rococo_local.json --raw --disable-default-bootnode > rococo_local.json\n```\n新しいチェーン仕様を使用するには、./config/ディレクトリのrococo.jsonファイルをこの新しいものに置き換えてチェーンを再実行します。\n```bash\n./scripts/init.sh run\n```\nコードを自由に編集できます。上記のコマンドはプジェクトを再構築し、コラーターノードを更新してから開始します。\nCumulusはまだ開発中のプレリリースソフトウェアです。\n私たちは特定のコミットのpolkadot [46c826f595021475fa5dbcd0987ed53f104e6e15  18 mar 2021](https://github.com/paritytech/polkadot/tree/46c826f595021475fa5dbcd0987ed53f104e6e15)を使用しています。\n\nより新しいバージョンのソフトウェアを使用することもできます。これを行うには、./scipt/config.shのPOLKADOT_COMMITを`\nrococo-v1`ブランチの最新のコミットに変更し、./bin/polkadotを削除して実行します。 \n```bash\n./scripts/init.sh run\n```\n\nコラータープロジェクトの依存関係を更新します. \n```bash\ncargo update\n./scripts/init.sh build\n```\n一部の依存関係はおそらく新しいRustツールチェーンの機能を必要とします。このプロジェクトはRust `nightly-2021-01-26`に基づいています。\nビルド前に./scripts/config.shでRustツールチェーンのバージョンを更新してください。\n\n## パラチェーンをハックする \n[外部パレットを追加](https://substrate.dev/docs/en/tutorials/add-a-pallet/) - おそらく「詳細を学ぶ」にあるべきですか？\n## Learn More\n\nこのプロジェクトの構造、カプセル化された機能、およびそれらの機能が実装される方法については、上流の[Substrate Developer Hub Node Template](https://github.com/substrate-developer-hub/substrate-node-template)を参照してください。公式のPolkadotブログで[パラチェーンブロックの経路](https://polkadot.network/the-path-of-a-parachain-block/)について詳しく学ぶことができます。[Parity Cumulus Workshop](https://substrate.dev/cumulus-workshop/#/)\n","tools":[],"fileInfo":{"path":"ja/xcm-robobank.md","name":"xcm-robobank"}}},"context":{}}