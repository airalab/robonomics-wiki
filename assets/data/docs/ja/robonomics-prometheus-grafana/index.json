{"hash":"3f5dbcf25038fb82d4541254c2b3842511271503","data":{"doc":{"id":"c0a27d2c25eadaae092e6ca0bb821e80","title":"Robonomics + Prometheus + Grafana","description":"","contributors":["Vourhey"],"headings":[],"subtitles":[{"depth":2,"value":"はじめに","anchor":"#はじめに"},{"depth":2,"value":"前提条件","anchor":"#前提条件"},{"depth":2,"value":"ステップ1 — サービスユーザーの作成","anchor":"#ステップ1--サービスユーザーの作成"},{"depth":2,"value":"ステップ2 — Prometheusのダウンロード","anchor":"#ステップ2--prometheusのダウンロード"},{"depth":2,"value":"ステップ3 — Prometheusの設定","anchor":"#ステップ3--prometheusの設定"},{"depth":2,"value":"ステップ4 — Prometheusの実行","anchor":"#ステップ4--prometheusの実行"},{"depth":2,"value":"ステップ5 - Node Exporterのダウンロード","anchor":"#ステップ5---node-exporterのダウンロード"},{"depth":2,"value":"ステップ6 - Node Exporterの実行","anchor":"#ステップ6---node-exporterの実行"},{"depth":2,"value":"ステップ7 - PrometheusのNode Exporterのスクレイピングを構成する","anchor":"#ステップ7---prometheusのnode-exporterのスクレイピングを構成する"},{"depth":2,"value":"ステップ8 - Robonomicビルドのnode_exporterの追加","anchor":"#ステップ8---robonomicビルドのnode_exporterの追加"},{"depth":2,"value":"ステップ9 - Grafanaの設定","anchor":"#ステップ9---grafanaの設定"},{"depth":2,"value":"参考文献","anchor":"#参考文献"}],"content":"\n**以下の指示は[Hubo Bubo](https://github.com/hubobubo)によって提供されています**\n\n**元の記事は[こちら](https://github.com/hubobubo/robonomics/wiki/Robonomics-(XRT)-metrics-using-Prometheus-and-Grafana)**\n\n## はじめに\nRobonomicsノードをより効果的に監視および維持するために、Prometheus ServerとGrafanaに基づいた監視を設定することが良いでしょう。このドキュメントでは、ノードを完全に監視するためにそれぞれの設定方法を示します。\n\n##  前提条件\n* [Ubuntu 18.04でのサーバーのセットアップ](https://www.digitalocean.com/community/tutorials/initial-server-setup-with-ubuntu-18-04) \n* [Robonomicsパラチェーンコレータのインストール](https://blog.aira.life/installing-and-running-the-robonomics-validator-in-the-polkadot-network-487ad4c1a567)\n* robonomics.serviceがマシンで動作しており、ポート9615に到達可能であることを確認してください。 \n\n## ステップ1 — サービスユーザーの作成\n\nセキュリティ上の理由から、まずprometheusとnode_exporterの2つの新しいユーザーアカウントを作成します。これらの2つのユーザーを作成し、_--no-create-home_と _--shell /bin/false_ オプションを使用して、これらのユーザーがサーバーにログインできないようにします。\n```\nsudo useradd --no-create-home --shell /bin/false prometheus\nsudo useradd --no-create-home --shell /bin/false node_exporter\n```\n\nPrometheusのファイルとデータを保存するための必要なディレクトリをダウンロードする前に作成します。標準のLinuxの規則に従って、Prometheusの設定ファイルのために_/etc_にディレクトリを作成し、デーのために_/var/lib_にディレクトリを作成します。\n```\nsudo mkdir /etc/prometheus\nsudo mkdir /var/lib/prometheus\n```\n次に、新しいディレクトリのユーザーとグループの所有権をprometheusユーザーに設定します。\n```\nsudo chown prometheus:prometheus /etc/prometheus\nsudo chown prometheus:prometheus /var/lib/prometheus\n```\n## ステップ2 — Prometheusのダウンロード\n\nまず、現在の安定版のPrometheusをホームディレクトリにダウンロードして展開します。最新のバイナリは[Prometheusのダウンロードページ](https://prometheus.io/download/)で入手できます。\n\n```\nwget https://github.com/prometheus/prometheus/releases/download/v2.21.0/prometheus-2.21.0.linux-amd64.tar.gz\n\n```\n次に、ダウンロードしたアーカイブを展開します。\n\n```\ntar xvf prometheus-2.21.0.linux-amd64.tar.gz\n\n```\nこれにより、prometheus-2.21.0.linux-amd64というディレクトリが作成され、2つのバイナリファイル（prometheusとpromtool）、ウェブインターフェースファイルを含む_consoles_と_console_libraries_ディレクトリ、ライセンス、通知、およびいくつかのサンプルファイルが含まれます。\n\n2つのバイナリを_/usr/local/bin_ディレクトリにコピーします。\n\n```\nsudo cp prometheus-2.21.0.linux-amd64/prometheus /usr/local/bin/\nsudo cp prometheus-2.21.0.linux-amd64/promtool /usr/local/bin/\n\n```\nバイナリにユーザーとグループの所有権をステップ1で作成したprometheusユーザーに設定します。\n\n```\nsudo chown prometheus:prometheus /usr/local/bin/prometheus\nsudo chown prometheus:prometheus /usr/local/bin/promtool\n\n```\nconsolesと_console_libraries_ディレクトリを_/etc/prometheus_にコピーします。\n\n```\nsudo cp -r prometheus-2.21.0.linux-amd64/consoles /etc/prometheus\nsudo cp -r prometheus-2.21.0.linux-amd64/console_libraries /etc/prometheus\n\n```\nディレクトリにユーザーとグループの所有権をprometheusユーザーに設定します。-Rフラグを使用すると、ディレクトリ内のファイルにも所有権が設定されます。\n\n```\nsudo chown -R prometheus:prometheus /etc/prometheus/consoles\nsudo chown -R prometheus:prometheus /etc/prometheus/console_libraries\n\n```\nPrometheusがインストールされたので、最初の実行の準備として、その設定ファイルとサービスファイルを作成します。\n\n## ステップ3 — Prometheusの設定\n\n_/etc/prometheus_ディレクトリで、nanoまたはお気に入りのテキストエディタを使用して、_prometheus.yml_という名前の設定ファイルを作成します。\n\n```\nsudo nano /etc/prometheus/prometheus.yml\n\n```\nグローバル設定では、メトリクスのスクレイピングのデフォルト間隔を定義します。Prometheusは、個々のエクスポーターの設定がグローバル設定を上書きしない限り、これらの設定をすべてのエクスポーターに適用します。\n\n```\nglobal:\n  scrape_interval: 15s\n\n```\nこのscrape_interval値は、Prometheusがエクスポーターからメトリクスを15秒ごとに収集することを示しており、ほとんどのエクスポーターには十分な時間です。\n次に、以下のscrape_configsディレクティブを使用して、Prometheus自体をスクレイピングするエクスポーターのリストに追加します。\n\n```\n...\nscrape_configs:\n  - job_name: 'prometheus'\n    scrape_interval: 5s\n    static_configs:\n      - targets: ['localhost:9090']\n```\nPrometheusは、クエリやグラフ上でエクスポーターをラベル付けするために_job_name_を使用するため、ここで説明的なものを選択してください\n\nまた、Prometheusはパフォーマンスの監視とデバッグに使用できる重要なデータをエクスポートするため、より頻繁な更新のためにグローバルなscrape_intervalディレクティブを15秒から5秒に上書きしています。\n\n最後に、Prometheusは_static_configs_と_targets_ディレクティブを使用して、エクスポーターが実行されている場所を特定します。この特定のエクスポーターはPrometheus自体と同じサーバー上で実行されているため、デフォルトのポート9090とともにIPアドレスの代わりにlocalhostを使用できます。\n\n設定ファイルは以下のようになります。\n\n```\nglobal:\n  scrape_interval: 15s\n\nscrape_configs:\n  - job_name: 'prometheus'\n    scrape_interval: 5s\n    static_configs:\n      - targets: ['localhost:9090']\n```\nファイルを保存してテキストエディタを終了します。\n\n設定ファイルのユーザーとグループの所有権をステップ1で作成したprometheusユーザーに設定します。\n\n```\nsudo chown prometheus:prometheus /etc/prometheus/prometheus.yml\n\n```\n設定が完了したので、Prometheusを初めて実行してテストする準備が整いました。\n\n## ステップ4 — Prometheusの実行\n\n_prometheus_ユーザーとしてPrometheusを起動し、設定ファイルとデータディレクトリのパスを指定します。\n\n```\nsudo -u prometheus /usr/local/bin/prometheus \\\n    --config.file /etc/prometheus/prometheus.yml \\\n    --storage.tsdb.path /var/lib/prometheus/ \\\n    --web.console.templates=/etc/prometheus/consoles \\\n    --web.console.libraries=/etc/prometheus/console_libraries\n```\n\n出力には、Prometheusの読み込みの進行状況、設定ファイル、関連するサービスに関する情報が含れます。また、Prometheusがポート_9090_でリッスンしていることも確認されます。\n\n```\n_log output_\nSep 14 17:55:53 robonomics systemd[1]: Started Prometheus.\nSep 14 17:55:53 robonomics prometheus[29488]: level=info ts=2020-09-14T15:55:53.347Z caller=main.go:310 msg=\"No time or size retention was set so using the default time retention\" duration=15d\nSep 14 17:55:53 robonomics prometheus[29488]: level=info ts=2020-09-14T15:55:53.350Z caller=main.go:346 msg=\"Starting Prometheus\" version=\"(version=2.21.0, branch=HEAD, revision=e83ef207b6c2398919b69cd87d2693cfc2fb4127)\"\nSep 14 17:55:53 robonomics prometheus[29488]: level=info ts=2020-09-14T15:55:53.351Z caller=main.go:347 build_context=\"(go=go1.15.2, user=root@a4d9bea8479e, date=20200911-11:35:02)\"\nSep 14 17:55:53 robonomics prometheus[29488]: level=info ts=2020-09-14T15:55:53.351Z caller=main.go:348 host_details=\"(Linux 4.15.0-112-generic #113-Ubuntu SMP Thu Jul 9 23:41:39 UTC 2020 x86_64 robonomics (none))\"\nSep 14 17:55:53 robonomics prometheus[29488]: level=info ts=2020-09-14T15:55:53.351Z caller=main.go:349 fd_limits=\"(soft=1024, hard=4096)\"\nSep 14 17:55:53 robonomics prometheus[29488]: level=info ts=2020-09-14T15:55:53.351Z caller=main.go:350 vm_limits=\"(soft=unlimited, hard=unlimited)\"\nSep 14 17:55:53 robonomics prometheus[29488]: level=info ts=2020-09-14T15:55:53.357Z caller=main.go:701 msg=\"Starting TSDB ...\"\nSep 14 17:55:53 robonomics prometheus[29488]: level=info ts=2020-09-14T15:55:53.368Z caller=web.go:523 component=web msg=\"Start listening for connections\" address=0.0.0.0:9090\nSep 14 17:55:53 robonomics prometheus[29488]: level=info ts=2020-09-14T15:55:53.372Z caller=head.go:644 component=tsdb msg=\"Replaying on-disk memory mappable chunks if any\"\nSep 14 17:55:53 robonomics prometheus[29488]: level=info ts=2020-09-14T15:55:53.373Z caller=head.go:658 component=tsdb msg=\"On-disk memory mappable chunks replay completed\" duration=12.659µs\nSep 14 17:55:53 robonomics prometheus[29488]: level=info ts=2020-09-14T15:55:53.373Z caller=head.go:664 component=tsdb msg=\"Replaying WAL, this may take a while\"\nSep 14 17:55:53 robonomics prometheus[29488]: level=info ts=2020-09-14T15:55:53.380Z caller=head.go:716 component=tsdb msg=\"WAL segment loaded\" segment=0 maxSegment=1\nSep 14 17:55:53 robonomics prometheus[29488]: level=info ts=2020-09-14T15:55:53.381Z caller=head.go:716 component=tsdb msg=\"WAL segment loaded\" segment=1 maxSegment=1\nSep 14 17:55:53 robonomics prometheus[29488]: level=info ts=2020-09-14T15:55:53.381Z caller=head.go:719 component=tsdb msg=\"WAL replay completed\" checkpoint_replay_duration=48.125µs wal_replay_duration=8.253748ms total_replay_duration=8.343335ms\nSep 14 17:55:53 robonomics prometheus[29488]: level=info ts=2020-09-14T15:55:53.383Z caller=main.go:721 fs_type=EXT4_SUPER_MAGIC\nSep 14 17:55:53 robonomics prometheus[29488]: level=info ts=2020-09-14T15:55:53.384Z caller=main.go:724 msg=\"TSDB started\"\nSep 14 17:55:53 robonomics prometheus[29488]: level=info ts=2020-09-14T15:55:53.384Z caller=main.go:850 msg=\"Loading configuration file\" filename=/etc/prometheus/prometheus.yml\nSep 14 17:55:53 robonomics prometheus[29488]: level=info ts=2020-09-14T15:55:53.384Z caller=main.go:881 msg=\"Completed loading of configuration file\" filename=/etc/prometheus/prometheus.yml totalDuration=908.135µs remote_storage=6.693µs web_handler=819ns query_engine=1.383µs scrape=400.232µs scrape_sd=41.679µs notify=1.1µs notify_sd=1.847µs rules=1.522µs\nSep 14 17:55:53 robonomics prometheus[29488]: level=info ts=2020-09-14T15:55:53.384Z caller=main.go:673 msg=\"Server is ready to receive web requests.\"\n```\nエラーメッセージが表示された場合は、構成ファイルでYAML構文を使用していることを再確認し、問題を解決するための画面上の指示に従ってください。\n\n次に、_CTRL+C_を押してPrometheusを停止し、新しい_systemd_サービスファイルを開きます。\n\n```\nsudo nano /etc/systemd/system/prometheus.service\n\n```\nサービスファイルは、_systemd_に対して、prometheusユーザーとしてPrometheusを実行し、構成ファイルを_ /etc/prometheus/prometheus.yml_ディレクトリに配置し、データを_ /var/lib/prometheus_ディレクトリに保存するように指示します。次のコンテンツをファイルにコピーします。\n\n```\n[Unit]\nDescription=Prometheus\nWants=network-online.target\nAfter=network-online.target\n\n[Service]\nUser=prometheus\nGroup=prometheus\nType=simple\nExecStart=/usr/local/bin/prometheus \\\n    --config.file /etc/prometheus/prometheus.yml \\\n    --storage.tsdb.path /var/lib/prometheus/ \\\n    --web.console.templates=/etc/prometheus/consoles \\\n    --web.console.libraries=/etc/prometheus/console_libraries\n\n[Install]\nWantedBy=multi-user.target\n```\n\n最後に、ファイルを保存してテキストエディタを閉じます。新しく作成したサービスを使用するには、systemdをリロードします。\n\n```\nsudo systemctl daemon-reload\n\n```\n次のコマンドを使用してPrometheusを起動できます。\n\n```\nsudo systemctl start prometheus\n\n```\nPrometheusが実行されていることを確認するには、サービスのステータスを確認します。\n\n```\nsudo systemctl status prometheus\n\n```\n出力には、Prometheusのステータス、メインプロセスID（PID）、メモリ使用量などが表示されます。\n\nサービスのステータスがアクティブでない場合は、画面上の指示に従って前の手順を再確認し、問題を解決してからチュートリアルを続行してください。\n\n```\n* prometheus.service - Prometheus\n   Loaded: loaded (/etc/systemd/system/prometheus.service; enabled; vendor preset: enabled)\n   Active: active (running) since Mon 2020-09-14 17:59:48 CEST; 24h ago\n Main PID: 29650 (prometheus)\n    Tasks: 9 (limit: 4915)\n   CGroup: /system.slice/prometheus.service\n           `-29650 /usr/local/bin/prometheus --config.file /etc/prometheus/prometheus.yml --storage.tsdb.path /var/lib/prometheus/ --web.console.templates=/etc/prometheus/consoles --web.console.libraries=/etc/prometheus/console_libraries\n```\n\n次に進む準備ができたら、ステータスコマンドを終了するために_Q_を押します。最後に、サービスを起動時に開始するように有効にします。\n\n```\nsudo systemctl enable prometheus\n\n```\n\nPrometheusが起動して実行されているので、サーバーのリソースに関るメトリクスを生成するための追加のエクスポーターをインストールできます。\n\n## ステップ5 - Node Exporterのダウンロード\n\nPrometheus自体に関するメトリクスを超えてPrometheusを拡張するために、Node Exporterと呼ばれる追加のエクスポーターをインストールします。Node Exporterは、CPU、ディスク、メモリの使用状況を含むシステムの詳細な情報を提供します。最新のバイナリは[Prometheusのダウンロードページ]（https://prometheus.io/download/）で入手できます。\n\n```\nwget https://github.com/prometheus/node_exporter/releases/download/v1.0.1/node_exporter-1.0.1.linux-amd64.tar.gz\n\n```\n次に、ダウンロードしたアーカイブを展開します。\n\n```\ntar xvf node_exporter-1.0.1.linux-amd64.tar.gz\n\n```\nこれにより、_node_exporter-1.0.1.linux-amd64_というディレクトリが作成され、バイナリファイルの_node_exporter_、ライセンス、および通知が含まれます。\n\nバイナリを_ /usr/local/bin_ディレクトリにコピーし、所有者をステップ1で作成したnode_exporterユーザーに設定します。\n\n```\nsudo cp node_exporter-1.0.1.linux-amd64/node_exporter /usr/local/bin\nsudo chown node_exporter:node_exporter /usr/local/bin/node_exporter\n\n```\nNode Exporterをインストールしたので、起動時にサービスファイルを作成する前に実行してテストしてみましょう。\n\n## ステップ6 - Node Exporterの実行\n\nNode Exporterを実行するための手順は、Prometheus自体を実行する手順と似ています。まず、Node ExporterのためのSystemdサービスファイルを作成しま。\n\n```\nsudo nano /etc/systemd/system/node_exporter.service\n\n```\n次のコンテンツをサービスファイルにコピーします。\n\n```\n[Unit]\nDescription=Node Exporter\nWants=network-online.target\nAfter=network-online.target\n\n[Service]\nUser=node_exporter\nGroup=node_exporter\nType=simple\nExecStart=/usr/local/bin/node_exporter --collector.systemd\n\n[Install]\nWantedBy=multi-user.target\n```\n\nファイルを保存してテキストエディタを閉じます。最後に、新しく作成したサービスを使用するためにsystemdをリロードします。\n\n```\nsudo systemctl daemon-reload\n\n```\n次のコマンドを使用してNode Exporterを実行できます。\n\n```\nsudo systemctl start node_exporter\n\n```\n検証する that Node Exporter’s running correctly with the status command.\n\n```\nsudo systemctl status node_exporter\n\n```\n前と同様に、この出力にはNode Exporterのステータス、メインプロセスID（PID）、メモリ使用量などが表示されます。サービスのステータスがアクティブでない場合は、画面上のメッセージに従って前の手順を再確認し、問題を解決してから続行してください。\n\n```\n_Output_\n* node_exporter.service - Node Exporter\n   Loaded: loaded (/etc/systemd/system/node_exporter.service; enabled; vendor preset: enabled)\n   Active: active (running) since Mon 2020-09-14 17:58:25 CEST; 1 day 1h ago\n Main PID: 29612 (node_exporter)\n    Tasks: 7 (limit: 4915)\n   CGroup: /system.slice/node_exporter.service\n           `-29612 /usr/local/bin/node_exporter --collector.systemd\n```\n最後に、Node Exporterを起動時に開始するように有効にします。\n\n```\nsudo systemctl enable node_exporter\n\n```\nNode Exporterが正しく構成され、期待どおりに実行されていることを確認したら、新しいメトリクスをスクレイピングするようにPrometheusに指示します。\n\n## ステップ7 - PrometheusのNode Exporterのスクレイピングを構成する\n\nPrometheusは、構成ファイルのscrape_configsセクションで定義されているエクスポーターのみをスクレイピングするため、Prometheus自体と同様にNode Exporterのエントリを追加する必要があります。構成ファイルを開きます。\n\n```\nsudo nano /etc/prometheus/prometheus.yml\n\n```\nscrape_configsブロックの最後に、node_exporterという新しいエントリを追加します。\n\n```\n...\n  - job_name: 'node_exporter'\n    scrape_interval: 5s\n    static_configs:\n      - targets: ['localhost:9100']\n```\nこのエクスポーターもPrometheus自体と同じサーバーで実行されているため、IPアドレスの代わりにlocalhostを使用し、Node Exporterのデフォルトポートである9100を使用できます。構成ファイル全体は次のようになります。\n\n```\nglobal:\n  scrape_interval: 15s\n\nscrape_configs:\n  - job_name: 'prometheus'\n    scrape_interval: 5s\n    static_configs:\n      - targets: ['localhost:9090']\n  - job_name: 'node_exporter'\n    scrape_interval: 5s\n    static_configs:\n      - targets: ['localhost:9100']\n```\nファイルを保存し、テキストエディタを終了します。変更を有効にするために最後にPrometheusを再起動します。\n\n```\nsudo systemctl restart prometheus\n\n```\n再度、ステータスコマンドを使用してすべてが正常に実行されていることを確認します。\n\n```\nsudo systemctl status prometheus\n\n```\nサービスのステータスがアクティブに設定されていない場合は、画面上の指示に従って前の手順を再確認してから続行してください。\n\n```\nOutput\n* prometheus.service - Prometheus\n   Loaded: loaded (/etc/systemd/system/prometheus.service; enabled; vendor preset: enabled)\n   Active: active (running) since Tue 2020-09-15 19:06:56 CEST; 2s ago\n Main PID: 19725 (prometheus)\n    Tasks: 8 (limit: 4915)\n   CGroup: /system.slice/prometheus.service\n           `-19725 /usr/local/bin/prometheus --config.file /etc/prometheus/prometheus.yml --storage.tsdb.path /var/lib/prometheus/ --web.console.templates=/etc/prometheus/consoles --web.console.libraries=/etc/prometheus/console_libraries\n```\n\nPrometheusとNode Exporterがインストールされ、構成され、実行されていることが確認できました。\n\n## ステップ8 - Robonomicビルドのnode_exporterの追加\n\nPrometheusとnode_exporterを正常にインストールした後、すべてのsubstrateプロジェクトでビルドインのprometheusエクスポーターを使する必要があります。これを実現するには、_ /etc/prometheus/prometheus.yml_に追加のエントリを追加する必要があります。. \n構成ファイルを開きます。\n\n```\nsudo nano /etc/prometheus/prometheus.yml\n\n```\nscrape_configsブロックの最後に、robonomic_exporterという新しいエントリを追加します。\n\n``` \n  - job_name: 'robonomics_exporter'\n    scrape_interval: 5s\n    static_configs:\n      - targets: ['localhost:9615']\n```\nファイルを保存してテキストエディタを終了します。設定ファイル全体は次のようになるはずです。\n\n```\nglobal:\n  scrape_interval: 15s\n\nscrape_configs:\n  - job_name: 'prometheus'\n    scrape_interval: 5s\n    static_configs:\n      - targets: ['localhost:9090']\n  - job_name: 'node_exporter'\n    scrape_interval: 5s\n    static_configs:\n      - targets: ['localhost:9100']\n  - job_name: 'robonomics_exporter'\n    scrape_interval: 5s\n    static_configs:\n      - targets: ['localhost:9615']\n```\n\n最後に、変更を有効にするためにPrometheusを再起動します。\n\n```\nsudo systemctl restart prometheus\n\n```\n再度、ステータスコマンドを使用してすべてが正常に実行されていることを確認します。\n\n```\nsudo systemctl status prometheus\n\n```\n今、_Prometheus_と_Node Exporter_、そして_Robonomic Exporter_がインストールされ、設定れ、実行されています。次にGrafanaに進んでください。\n\n## ステップ9 - Grafanaの設定\n\n最後のステップは、GrafanaでPrometheusをデータソースとして接続することです。このチュートリアルでは、最大5つのダッシュボードと専用の[Robonomicsダッシュボード](https://grafana.com/grafana/dashboards/13015)を使用できる無料のクラウドベースのGrafanaを使用します。[grafana.com](https://grafana.com/)にアクセスして新しいアカウントを作成し、新しく作成したGrafanaインスタンスにログインしてください。\n\n最初に、Grafanaに新しい_**データソース**_を追加する必要があります。この場合、データソースはPrometheusサーバーになります。\nデータソースに移動します：\n\n>![DataSource](../images/prometheus-grafana/grafana-6-2020-09-15-19-18-50-Window.png)\n\n次に、**_データソースを追加_**をクリックします\n\n>![DataSource](../images/prometheus-grafana/grafana-7-2020-09-15-19-18-50-Window.png)\n\n次に、_**Prometheus**_を選択します\n\n>![DataSource](../images/prometheus-grafana/grafana-8-2020-09-15-19-18-50-Window.png)\n\n新しい画面で、**_PrometheusサーバーのIPアドレスと9090ポート_**を入力します\n\n> ![DataSource](../images/prometheus-grafana/grafana-9-2020-09-15-19-18-50-Window.png)\n\nその後、すべての手順を実行した場合は、_**保存してテスト**_をクリックします。緑色になり、ダッシュボードのインポートに進む準備が整います。メインサイトで**+**をクリックし、以下の画像にすように**インポート**をクリックします：\n\n> ![Import dashboard](../images/prometheus-grafana/grafana-1-2020-09-15-19-18-50-Window.png)\n\n次に、インポートページが表示されます：\n\n> ![Import page](../images/prometheus-grafana/grafana-2-2020-09-15-19-18-50-Window.png)\n\n_Grafana.comダッシュボードのURLまたはID_に_**13015**_と入力します（これはRobonomicダッシュボードのIDです）\n\n> ![Import Robonomic dashboard](../images/prometheus-grafana/grafana-3-2020-09-15-19-18-50-Window.png)\n\n外部ダッシュボードを読み込んだ後、この画面が表示されます：\n\n> ![XRT 13015 dashboard import](../images/prometheus-grafana/grafana-4-2020-09-15-19-18-50-Window.png)\n\n最後のステップは、以前に作成した**_データソース_**を選択し、_**インポート**_をクリックすることです\n\n> ![Prometheus as a DataSource](../images/prometheus-grafana/grafana-5-2020-09-15-19-18-50-Window.png)\n\n以上です！この時点でインポートされたダッシュボードが表示されるはずです。 \n\n\n## 参考文献\n\n* [Ubuntu 16.04にPrometheusをインストールする方法](https://www.digitalocean.com/community/tutorials/how-to-install-prometheus-on-ubuntu-16-04)\n* [Prometheus + Grafanaによる監視ダッシュボードの構築](https://medium.com/htc-research-engineering-blog/build-a-monitoring-dashboard-by-prometheus-grafana-741a7d949ec2)\n* [PrometheusのGrafanaサポート](https://prometheus.io/docs/visualization/grafana/)\n* [ノードエクスポーターを使用したLinuxホストメトリクスの監視](https://prometheus.io/docs/guides/node-exporter/)\n* [Prometheusのクエリ](https://prometheus.io/docs/prometheus/latest/querying/basics/)\n* [ノードメトリクスの可視化](https://substrate.dev/docs/en/tutorials/visualize-node-metrics/)\n* [Substrate Prometheus Exporter](https://github.com/paritytech/substrate/tree/master/utils/prometheus)\n* [polkadot-dashboard](https://github.com/w3f/polkadot-dashboard)\n* [Polkadotノードメトリクス](https://grafana.com/grafana/dashboards/12425)\n* [Prometheusのノードエクスポーター用ダッシュボード](https://grafana.com/grafana/dashboards/11074)\n* [Grafana ROBONOMICS（XRT）メトリクス](https://grafana.com/grafana/dashboards/13015)\n\n","tools":[],"fileInfo":{"path":"ja/robonomics-prometheus-grafana.md","name":"robonomics-prometheus-grafana"}}},"context":{}}