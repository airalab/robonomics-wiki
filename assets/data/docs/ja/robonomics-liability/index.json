{"hash":"234399236977c6827929792085b567e5ce225bf9","data":{"doc":{"id":"610d93aaeaac4f15f0357394449e889e","title":"Robonomics Liability","description":"","contributors":["ensrationis","akru"],"translated":false,"headings":[],"subtitles":[{"depth":2,"value":"ROS Parameters","anchor":"#ros-parameters"},{"depth":3,"value":"~web3_http_provider","anchor":"#web3_http_provider"},{"depth":3,"value":"~web3_ws_provider","anchor":"#web3_ws_provider"},{"depth":3,"value":"~ipfs_http_provider","anchor":"#ipfs_http_provider"},{"depth":3,"value":"~ipfs_swarm_connect_addresses","anchor":"#ipfs_swarm_connect_addresses"},{"depth":3,"value":"~ipfs_public_providers","anchor":"#ipfs_public_providers"},{"depth":3,"value":"~factory_contract","anchor":"#factory_contract"},{"depth":3,"value":"~lighthouse_contract","anchor":"#lighthouse_contract"},{"depth":3,"value":"~enable_executor","anchor":"#enable_executor"},{"depth":3,"value":"~master_check_interval","anchor":"#master_check_interval"},{"depth":3,"value":"~recording_topics","anchor":"#recording_topics"},{"depth":3,"value":"~ens_contract","anchor":"#ens_contract"},{"depth":3,"value":"~keyfile","anchor":"#keyfile"},{"depth":3,"value":"~keyfile_password_file","anchor":"#keyfile_password_file"},{"depth":2,"value":"Subscribed topics","anchor":"#subscribed-topics"},{"depth":3,"value":"/liability/infochan/eth/signing/demand (robonomics_msgs/Demand)","anchor":"#liabilityinfochanethsigningdemand-robonomics_msgsdemand"},{"depth":3,"value":"/liability/infochan/eth/signing/offer (robonomics_msgs/Offer)","anchor":"#liabilityinfochanethsigningoffer-robonomics_msgsoffer"},{"depth":3,"value":"/liability/infochan/eth/signing/result (robonomics_msgs/Result)","anchor":"#liabilityinfochanethsigningresult-robonomics_msgsresult"},{"depth":2,"value":"Published topics","anchor":"#published-topics"},{"depth":3,"value":"/liability/infochan/incoming/demand (robonomics_msgs/Demand)","anchor":"#liabilityinfochanincomingdemand-robonomics_msgsdemand"},{"depth":3,"value":"/liability/infochan/incoming/offer (robonomics_msgs/Offer)","anchor":"#liabilityinfochanincomingoffer-robonomics_msgsoffer"},{"depth":3,"value":"/liability/infochan/incoming/result (robonomics_msgs/Result)","anchor":"#liabilityinfochanincomingresult-robonomics_msgsresult"},{"depth":3,"value":"/liability/incoming (robonomics_liability/Liability)","anchor":"#liabilityincoming-robonomics_liabilityliability"},{"depth":3,"value":"/liability/ready (robonomics_liability/Liability)","anchor":"#liabilityready-robonomics_liabilityliability"},{"depth":3,"value":"/liability/complete (robonomics_liability/Liability)","anchor":"#liabilitycomplete-robonomics_liabilityliability"},{"depth":3,"value":"/liability/finalized (std_msgs/String)","anchor":"#liabilityfinalized-std_msgsstring"},{"depth":2,"value":"Services","anchor":"#services"},{"depth":3,"value":"/liability/start (robonomics_liability/StartLiability)","anchor":"#liabilitystart-robonomics_liabilitystartliability"},{"depth":3,"value":"/liability/finish (robonomics_liability/FinishLiability)","anchor":"#liabilityfinish-robonomics_liabilityfinishliability"},{"depth":3,"value":"/liability/restart (robonomics_liability/StartLiability)","anchor":"#liabilityrestart-robonomics_liabilitystartliability"},{"depth":3,"value":"/liability/resume (robonomics_liability/StartLiability)","anchor":"#liabilityresume-robonomics_liabilitystartliability"},{"depth":3,"value":"/liability/read (robonomics_liability/ReadLiability)","anchor":"#liabilityread-robonomics_liabilityreadliability"}],"content":"\nThe package is responsible for receiving `New Liability` events (`listener` node) and playing topics from `objective` field (`executor` node).\nThe launch file also include `ipfs_channel` node and `signer` node.\n\n## ROS Parameters\n\n### ~web3_http_provider\n\nWeb3 HTTP provider address. The type is `string`, defaults to `http://127.0.0.1:8545`\n\n### ~web3_ws_provider\n\nWeb3 WebSocket provider address. The type is `string`, defaults to `ws://127.0.0.1:8546`\n\n### ~ipfs_http_provider\n\nIPFS HTTP provider address. The type is `string`, defaults to `http://127.0.0.1:5001`\n\n### ~ipfs_swarm_connect_addresses\n\nIPFS nodes to connect to. The type is `string`, defaults to `\"\"`\n\n### ~ipfs_public_providers\n\nA public IPFS node to pin result files. The type is `string`, defaults to `\"\"`\n\n### ~factory_contract\n\nThe name of the liability factory. The type is `string`, defaults to `factory.5.robonomics.eth`\n\n### ~lighthouse_contract\n\nThe name of a lighthouse you are working on. The type is `string`, defaults to `airalab.lighthouse.5.robonomics.eth`\n\n### ~enable_executor\n\nEnable or disable executor node. If it's `false`, no topics from objective would be published. The type is `boolean`, defaults to `true`\n\n### ~master_check_interval\n\nPeriod (in seconds) to check master for new topic publications. It's necessary for the Recorder, which records all the topics a CPS publishes. The type is `double`, defaults to `0.1`\n\n### ~recording_topics\n\nList of topics name separated by comma. It allows you to specify which topics would be recorded. The type is `string`, defaults to `\"\"`\n\n### ~ens_contract\n\nThe checksumed address of ENS registry. The type is `string`, defaults to `\"\"`\n\n### ~keyfile\n\nPath to keyfile. The type is `string`, defaults to `\"\"`. **Required parameter**\n\n### ~keyfile_password_file\n\nPath to a file with password for the keyfile. The type is `string`, defaults to `\"\"`. **Required parameter**\n\n## Subscribed topics\n\n### /liability/infochan/eth/signing/demand (robonomics_msgs/Demand)\n\n[robonomics_msgs/Demand](/docs/market-messages#demand) message to sign and send further to IPFS channel\n\n### /liability/infochan/eth/signing/offer (robonomics_msgs/Offer)\n\n[robonomics_msgs/Offer](/docs/market-messages#offer) message to sign and send further to IPFS channel\n\n### /liability/infochan/eth/signing/result (robonomics_msgs/Result)\n\n[robonomics_msgs/Result](/docs/market-messages#result) message to sign and send further to IPFS channel\n\n\n## Published topics\n\n### /liability/infochan/incoming/demand (robonomics_msgs/Demand)\n\nContains a [robonomics_msgs/Demand](/docs/market-messages#demand) message which was read from IPFS channel\n\n### /liability/infochan/incoming/offer (robonomics_msgs/Offer)\n\nContains a [robonomics_msgs/Offer](/docs/market-messages#offer) message which was read from IPFS channel\n\n### /liability/infochan/incoming/result (robonomics_msgs/Result)\n\nContains a [robonomics_msgs/Result](/docs/market-messages#result) message which was read from IPFS channel\n\n### /liability/incoming (robonomics_liability/Liability)\n\nContains all the information about the last created [robonomics_liability/Liability](/docs/robonomics-liability-messages#robonomics_liabilityliabilitymsg)\n\n### /liability/ready (robonomics_liability/Liability)\n\nSignals when a [robonomics_liability/Liability](/docs/robonomics-liability-messages#robonomics_liabilityliabilitymsg)is ready for execution\n\n### /liability/complete (robonomics_liability/Liability)\n\nSignals when a [robonomics_liability/Liability](/docs/robonomics-liability-messages#robonomics_liabilityliabilitymsg) has done its job\n\n### /liability/finalized (std_msgs/String)\n\nSignals when a liability has been finalized\n\n## Services\n\n### /liability/start (robonomics_liability/StartLiability)\n\nThe service tells executor to play topics from the objective. It's required to pass a liability address ([robonomics_liability/StartLiability](/docs/robonomics-liability-messages#robonomics_liabilitystartliabilitysrv)), which you can get from `/liability/ready` topic\n\n### /liability/finish (robonomics_liability/FinishLiability)\n\nCPS should call the service after performing the task. The input is [robonomics_liability/FinishLiability](/docs/robonomics-liability-messages#robonomics_liabilityfinishiabilitysrv)\n\n### /liability/restart (robonomics_liability/StartLiability)\n\nThe service allows to restart a liability after the system shutdown. The input is [robonomics_liability/StartLiability](/docs/robonomics-liability-messages#robonomics_liabilitystartliabilitysrv)\n\n### /liability/resume (robonomics_liability/StartLiability)\n\nThe service allows to resume a liability from the last timestamp available in the persistence store. The input is [robonomics_liability/StartLiability](/docs/robonomics-liability-messages#robonomics_liabilitystartliabilitysrv)\n\n### /liability/read (robonomics_liability/ReadLiability)\n\nThe service returns all the data about a liability by its address. The input is [robonomics_liability/ReadLiability](/docs/robonomics-liability-messages#robonomics_liabilityreadliabilitysrv)\n","tools":[],"fileInfo":{"path":"ja/robonomics-liability.md","name":"robonomics-liability"}}},"context":{}}