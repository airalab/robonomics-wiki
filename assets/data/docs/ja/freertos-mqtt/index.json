{"hash":"4837eab19522bd51a4e900b04399f243c7412046","data":{"doc":{"id":"a87f4a8d1e39f9d0b66d7eb057ab56b0","title":"Amazon FreeRTOSデバイスをMQTTでRobonomicsに接続する","description":"","contributors":["khssnv"],"headings":[],"subtitles":[{"depth":2,"value":"ハードウェアのセットアップ","anchor":"#ハードウェアのセットアップ"},{"depth":2,"value":"データフロー","anchor":"#データフロー"},{"depth":2,"value":"ファームウェア","anchor":"#ファームウェア"},{"depth":3,"value":"Wi-Fiの設定","anchor":"#wi-fiの設定"},{"depth":3,"value":"MQTTエンドポイントの設定","anchor":"#mqttエンドポイントの設定"},{"depth":2,"value":"MQTTからRobonomicsへ","anchor":"#mqttからrobonomicsへ"},{"depth":2,"value":"使用された元のリソース","anchor":"#使用された元のリソース"}],"content":"\n[Amazon Web Services FreeRTOS](https://aws.amazon.com/freertos/)を実行するマイクロコントローラーが、MQTTを介してRobonomicsネットワークに接続されるデモンストレーションです。プロジェクトのソースコードにつては、[このリポジトリ](http://github.com/khssnv/freertos_mqtt_robonomics_example)をご確認ください。\n\n私たちは、FreeRTOSディストリビューションとMQTT実装を提供する[Espressif IoT Development Framework](https://github.com/espressif/esp-idf)を使用して、[ESP32 DevKitC](https://devices.amazonaws.com/detail/a3G0L00000AANtjUAH/ESP32-WROOM-32-DevKitC/)を使用しています。Espressifは使用されるマイクロコントローラーのベンダーです。\n\nデモンストレーションの目的で[PMS-3003](http://www.plantower.com/en/content/?107.html)センサーもあります。このセンサーは、大気中の微粒子の存在を測定し、空気の品質を推定するために使用することができます。\n\n空気の品質はこの記事のテーマではありませんが、WHOのウェブサイトで詳細を確認できます：[Ambient (outdoor) air pollution](https://www.who.int/news-room/fact-sheets/detail/ambient-(outdoor)-air-quality-and-health)。システムの目標は、センサーの測定値をAiralabのRobonomicsネットワークに公開することです。\n\n## ハードウェアのセットアップ\n\nPMS3003のTXD PIN5をESP32 DevKitC IO17に接続して、UARTで測定値を転送します。\nまた、両方のデバイスには電源と共通のグラウンドが必要です。\n\n![Wiring Diagram](../images/freertos-mqtt/wiring.png)\n\n## データフロー\n\nセンサーの測定値をRobonomicsネットワークに配信するために、ファームウェアレベルでの目標は、センサーからデータを取得することです。埋め込み通信プロトコル（私たちの場合はUART）を介してAIRAインスタンスに渡します。\n\n![Sending](../images/freertos-mqtt/send.svg)\n\nこの例では、パブリックIPアドレスとドメイン名が割り当てられたAIRAクラウド展開を使用しています。\nAIRAインスタンスでは、`mosquitto` MQTTブローカーをセットアップし、`/freertos_mqtt_robonomics_example/98:F4:AB:72:23:C4`トピックにサブスクライブしてMQTTからメッセージを取得します。\n\nその後、メッセージをパイプを介して`robonomics io`ライターに渡します。\n\n![Receiving](../images/freertos-mqtt/recv.svg)\n\nこれでデータがRobonomicsネットワークで利用可能になり、再び`robonomics io`で読み取ることができます。\n\n## ファームウェア\n\n[ESP-MQTTサンプルアプリケーション（TCPトランスポート）](https://github.com/espressif/esp-idf/tree/master/examples/protocols/mqtt/tcp)をベースにしています。\n\nUART接続、SNTP時刻同期、定期的なMQTTパブリッシャールーチンのために、`main/app_main.c`のみを変更します。\n\nプロジェクトを繰り返し実行しようとしている場合、およびこれが最初のESP IDFベースのプロジェクトである場合は、まず[EspressifのESP-IDFプログラミングガイド](https://docs.espressif.com/projects/esp-idf/en/latest/esp32/get-started/index.html#installation-step-by-step)の導入に従って、設定、ビルド、`idf.py`ツールを使用したアップロードなどのファームウェア操作に慣れるようにしてください。\n\n### Wi-Fiの設定\n\nクラウドに展開されたAIRAインスタンスと通信するために、マイクロコントローラーにはインターネット接続が必要です。\nそれにはESP32のWi-Fiを使用します。\nEspressifはオンボードWi-Fiを設定するためのユーティリティを提供しています。\nこの例では、Ubuntu 20.04 GNU/Linuxを使用した開発環境を使用しています。\nWi-Fiを設定するには、プロジェクトフォルダに移動し、SDK設定ツールを実行します。\n\n```console\ncd freertos_mqtt_robonomics_example/firmware\nidf.py menuconfig\n```\n\n次に、`Example 接続ion 設定`セクションでWi-FiアクセスポイントのSSIDとパスワードを設定します。\n\n![Menuconfig Wi-Fi](../images/freertos-mqtt/menuconfig-wi-fi.png)\n\n### MQTTエンドポイントの設定\n\nMQTTの設定には2つの項目があります。\n1つ目はMQTTブローカーアドレスです。\nSDKの設定ツールで設定可能です。\n\n```console\ncd freertos_mqtt_robonomics_example/firmware\nidf.py menuconfig\n```\n\n`Example 設定`セクションで`Broker URL`を設定します。\n\n![Menuconfig MQTT](../images/freertos-mqtt/menuconfig-mqtt.png)\n\n2つ目はMQTTトピックです。\nプロジェクト名の接頭辞に続くESP32のMACアドレスでファームウェアに設定します。\nこれにより、特定のマイクロチップに対して`/freertos_mqtt_robonomics_example/98:F4:AB:72:23:C4`が与えられます。\n\n## MQTTからRobonomicsへ\n\nまず、MQTTでデータを受信しているか確認しましょう。\nMosquitto MQTTブローカートピックにデバイスがパブリッシュするためにサブスクライブできます。\n\n```console\n$ nix-shell -p mosquitto --run \"mosquitto_sub -h localhost -t '/freertos_mqtt_robonomics_example/98:F4:AB:72:23:C4'\"\nts=1615651809, PM1=2, PM2.5=6, PM10=3\n```\n\nここでは、`mosquitto`パッケージを環境に取り込んで`mosquitto_sub`ユーティリティを使用します。\n次に、ファームウェアで設定されたトピックにサブスクライブします。\nデータを受信できたので、AIRAは正しくMQTTでデータを受信しています。\nさて、これらのメッセージをRobonomicsネットワークにパイプしましょう。\n\n```console\nnix-shell -p mosquitto --run \"mosquitto_sub -h localhost -t '/freertos_mqtt_robonomics_example/98:F4:AB:72:23:C4'\" | robonomics io write pubsub --bootnodes=/ip4/127.0.0.1/tcp/34333 /freertos_mqtt_robonomics_example\n```\n\nここでは、`robonomics`ユーティリティを使用してpubsubチャンネル`/freertos_mqtt_robonomics_example`にメッセージをパブリッシュします。\n少なくとも1つの接続が確立されるように、`bootnodes`を指定します。\n\nこれで、同じpubsubチャンネルからこれらのメッセージを読み取ることができます。\n\n```console\n$ robonomics io read pubsub --listen /ip4/127.0.0.1/tcp/34333 /freertos_mqtt_robonomics_example\n2021-03-27 15:15:51  Generated random peer id: 12D3KooWB2nym5E6c3aPpnPKK5wB9Z6n9eZzcXSpyUBozxhi6dam\n2021-03-27 15:15:51  Subscribed to topic: _robonomics_pubsub_peer_discovery\n2021-03-27 15:15:51  Subscribed to topic: /freertos_mqtt_robonomics_example\n2021-03-27 15:15:56  New peer connected: PeerId(\"12D3KooWRPLCioD2b9XLZTZJQELSAuQAyTrHUKzRktrQHtTSs6kS\")\n2021-03-27 15:15:56  GRAFT: Mesh link added for peer: PeerId(\"12D3KooWRPLCioD2b9XLZTZJQELSAuQAyTrHUKzRktrQHtTSs6kS\") in topic: TopicHash { hash: \"_robonomics_pubsub_peer_discovery\" }\nts=1616843855, PM1=3, PM2.5=4, PM10=3\n```\n\n## 使用された元のリソース\n\n* GoJimmyのブログからのESP32 DevKitCピン配置 https://gojimmypi.blogspot.com/2017/03/jtag-debugging-for-esp32.html\n* OpenAirProjectからのPSM3003データ構造とデコーダー https://github.com/openairproject/sensor-esp32\n\n**皆さん、ありがとうございました！**\n","tools":[],"fileInfo":{"path":"ja/freertos-mqtt.md","name":"freertos-mqtt"}}},"context":{}}