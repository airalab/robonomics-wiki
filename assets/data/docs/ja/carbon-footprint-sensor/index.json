{"hash":"e98ab459510abb0b40ca4afdebba8e31d006b6ef","data":{"doc":{"id":"b930ddf9a834a0199d6dc86f12cd3021","title":"センサーを接続する","description":"","contributors":["LoSk-p","makyul"],"headings":[],"subtitles":[{"depth":2,"value":"要件","anchor":"#要件"},{"depth":2,"value":"ジグビースティック","anchor":"#ジグビースティック"},{"depth":2,"value":"インストール","anchor":"#インストール"},{"depth":2,"value":"設定","anchor":"#設定"},{"depth":2,"value":"プラグを接続する","anchor":"#プラグを接続する"},{"depth":2,"value":"ペアリング後","anchor":"#ペアリング後"},{"depth":2,"value":"ランニング","anchor":"#ランニング"}],"content":"\n作業の例は次のビデオにあります：\n\nhttps://youtu.be/jsaFCVAx2sA\n\n## 要件\n\n* [Aqara Smart Plug](https://aqara.ru/product/aqara-smart-plug/?yclid=462434430312045270)\n* Raspberry Pi\n* Zigbee adapter [JetHome USB JetStick Z2](https://jhome.ru/catalog/parts/PCBA/293/) (または [サポートされている](https://www.zigbee2mqtt.io/オフセットサービスformation/supported_adapters.html))\n\nサービスは Raspberry Pi で実行されており、zigbee プロトコル経由でスマート プラグに接続します。\n\n## ジグビースティック\n\nJetHome USB JetStick Z2 をお持ちの場合は、必要なファームウェアがすでに含まれているため、フラッシュする必要はありません。 ただし、別のアダプタがある場合は、まず zigbee2MQTT ソフトウェアでフラッシュする必要があります。 お使いのデバイスの手順は [こちら](https://www.zigbee2mqtt.io/information/supported_adapters.html) でご覧いただけます。\n\nアダプターを接続し、アダプターのアドレスを確認します (`「/dev/ttyUSB1」` の場合もあります)。\n```bash\n$ ls -l /dev/ttyUSB0\ncrw-rw---- 1 root dialout 166, 0 May 16 19:15 /dev/ttyUSB0 \n```\n\n最初に USB ポートにアクセスする必要がある場合があります。 ユーザーを `「dialout」` グループに追加します (ubuntu では機能しますが、グループ名は他の OS では異なる場合があります)。\n\nubuntuの場合：\n```bash\nsudo usermod -a -G dialout $USER\n```\narchの場合：\n```bash\nsudo usermod -a -G uucp $USER\n```\nその後、ログアウトしてログインするか、コンピューターを再起動します。\n\n## インストール\n\nリポジトリをクローンします：\n\n```\ngit clone https://github.com/makyul/robonomics-carbon-footprint.git\ncd robonomics-carbon-footprint\n```\n\n## 設定\n\nに移動し、 `data/configuration.yaml` を設定します。また、対応する情報でフィールドを入力することもできます。 `permit_join: true`:\n\n```\n# Home Assistant integration (MQTT discovery)\nhomeassistant: false\n\n# allow new devices to join\npermit_join: true\n\n# MQTT settings\nmqtt:\n  # MQTT base topic for zigbee2mqtt MQTT messages\n  base_topic: zigbee2mqtt\n  # MQTT server URL\n  server: 'mqtt://172.17.0.1'\n  # MQTT server authentication, uncomment if required:\n  # user: my_user\n  # password: my_password\n\n# Serial settings\nserial:\n  # Location of CC2531 USB sniffer\n  port: /dev/ttyUSB0\n```\nフィールドでは、接続を確立するために `server` and `port` ブリッジのIPを使用します： `server` ここではあなたのアドレスは `docker0`. \n\n```bash\n$ ip a                                                 127\n1: lo: <LOOPBACK,UP,LOWER_UP> mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000\n    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00\n\n...\n\n5: docker0: <NO-CARRIER,BROADCAST,MULTICAST,UP> mtu 1500 qdisc noqueue state DOWN group default \n    link/ether 02:42:0d:ff:5f:a3 brd ff:ff:ff:ff:ff:ff\n    inet 172.17.0.1/16 brd 172.17.255.255 scope global docker0\n       valid_lft forever preferred_lft forever\n    inet6 fe80::42:dff:feff:5fa3/64 scope link \n       valid_lft forever preferred_lft forever\n```\nこちらがあなたの住所です `172.17.0.1`.\n\n次に、次の情報を含むconfig/config.yamlファイルを作成し、場所を設定します（3文字のISOコードについてはhttps://countrycode.org/を参照できます）： \n\n```\nlocation: RUS\nservice_address: 4GdHeLbmio2noKCQM5mfxswXfPoW2PcbpYKKkM4NQiqSqJMd\ntwin_id: 5\nsending_timeout: 3600\nbroker_address: \"172.17.0.1\"\nbroker_port: 1883\n```\n\n## プラグを接続する\n\n最初の実行：\n\n```\ndocker-compose up     \n```\n\nプラグのペアリング モードに切り替えるには、ライトが青色に速く点滅し始めるまで、電源ボタンを数秒間長押しします。\n\nログには、プラグが mqtt への公開を開始したことが表示されます。\n\n\n## ペアリング後\n\n他のデバイスをスティックとペアリングさせたくない場合は、「data/configuration.yaml」に移動して「permit_join: false」を設定する必要があります。 サービスを再起動します ( `「Ctrl+C」` を使用し、 \n\n```bash\ndocker-compose up     \n```\nもう一度変更を送信してください)。\n\n## ランニング\n最初にプラグイン用のアカウントが作成されます。\n> すでにアカウントをお持ちの場合は、そのシードを `device_seed` セクションの `config.config.yaml` ファイルに追加する必要があります。\n>\n> ```\n> location: RUS\n> service_address: 4GdHeLbmio2noKCQM5mfxswXfPoW2PcbpYKKkM4NQiqSqJMd\n> twin_id: 5\n> sending_timeout: 3600\n> broker_address: \"172.17.0.1\"\n> broker_port: 1883\n> device_seed: <device_seed>\n>```\n\nアカウントを作成すると、ログにアドレスが表示されます (シードは `config/config.yaml` に追加されます)。\n```\nplug               | Generated account with address: 4GuP82BMAgrbtU8GhnKhgzP827sJEaBXeMX38pZZKPSpcWeT\n```\n取引手数料のためにいくつかのトークンをこのアカウントに送金する必要があります [Robonomics Portal](https://polkadot.js.org/apps/?rpc=wss%3A%2F%2Fkusama.rpc.robonomics.network%2F#/accounts). \n\nサービスは十分なトークンがあることを確認し、ログに次のように表示されます:\n```\nplug               | Balance is OK\n```\nサービスは、プラグからの mqtt メッセージと安全な電力使用量を確認します。 1 時間ごとに (` 「sending_timeout」`  セクションの `「config/config.yaml」` でタイムアウトを変更できます。タイムアウトは秒単位です)、次の情報を含むデータログが作成されます。\n```\n{'geo': 'RUS', 'power_usage': 1.021237391233444, 'timestamp': 1644494860.5860083}\n```\n","tools":[],"fileInfo":{"path":"ja/carbon-footprint-sensor.md","name":"carbon-footprint-sensor"}}},"context":{}}