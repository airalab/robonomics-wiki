{"hash":"5843b210e385691c268024f9c81b3d7f9b02f536","data":{"doc":{"id":"5aeba103b56518ed2e6f8fbb9c80f44d","title":"Lesson 5, コネクティビティ","description":"","contributors":["KiichiSugihara"],"translated":true,"headings":[],"subtitles":[{"depth":2,"value":"複数のパイとしてのIoT","anchor":"#複数のパイとしてのiot"},{"depth":2,"value":"Device Software","anchor":"#device-software"},{"depth":2,"value":"Connectivityって何?","anchor":"#connectivityって何"},{"depth":2,"value":"AWS と Robonomics Connectivityの比較","anchor":"#aws-と-robonomics-connectivityの比較"},{"depth":2,"value":"Aira上にConnectivityをインストール","anchor":"#aira上にconnectivityをインストール"},{"depth":3,"value":"必要なもの","anchor":"#必要なもの"},{"depth":2,"value":"センサーをコネクティビティに接続","anchor":"#センサーをコネクティビティに接続"},{"depth":3,"value":"必要なもの","anchor":"#必要なもの-1"},{"depth":2,"value":"実践編","anchor":"#実践編"},{"depth":3,"value":"軌道 1. ESP + SDS011 センサーを点滅させる","anchor":"#軌道-1-esp--sds011-センサーを点滅させる"},{"depth":3,"value":"軌道 2. Connectivityの起動","anchor":"#軌道-2-connectivityの起動"}],"content":"\n## 複数のパイとしてのIoT\n\n* Device Software\n    * FreeRTOS\n    * ESP/Arduino\n    * シングルボードコンピュータ (RPi、LattePandaなど)\n* Connectivity\n    * IoT Hub\n    * IoT Manager\n* Analytics Services\n    * AWS\n    * Google Cloud IoT Core\n    * ThingsBoard\n\nふつう、ほとんどの方はセンサーやサーバーには興味がなく、データ分析に興味があります。それを手に入れるためには、どのデバイスを使うか、どのように連携するか、どこに接続するかを決める必要があります\n\n\n## Device Software\n\n家庭用のウェザーステーションを例に考えてみましょう。大気汚染（SDS011）、温度、湿度（BME）のデータを収集する必要があります。ESP8266マイクロコントローラは、このタスクを処理することができます。\n\n必要なもの:\n\n* センサーからのデータを正しく読み取ることができる\n* 固有の識別子を持つこと\n* データを既知のサーバに転送する\n* データのデジタル署名を行う（オプション）\n\n現在のファームウェアは[こちら](https://github.com/LoSk-p/sensors-software/tree/366b19bf447a5fc19220ef89eab0f2440f8db1c2)\nからご覧いただけます。\n\n## Connectivityって何?\n\nIoTの世界で、Connectivityとは、さまざまなIoTデバイスをインターネットに接続し、データを送信したり、デバイスを制御したりすることを指します。\n\nよく知られているアーキテクチャのソリューションは、大きく3つのグループに分けられます。\n\n* 完全に分散化されたもの。たとえば、デバイスをメッシュネットワークで接続する。ハードウェア要件が高いため、広域ネットワークには適さない\n* 集中型。たとえば、AWSなど。単一のエントリーポイントと接続の容易さを提供するが、サーバーに問題が発生した場合の障害リスクが高い\n* ハイブリッド。たとえば、 [Robonomics Connectivity](https://github.com/airalab/sensors-connectivity)。ローカルネットワーク上のデバイスにアドレスを提供し、分散したIPFSメッセージチャネルにデータを公開する\n\n## AWS と Robonomics Connectivityの比較\n\n| 管理サービス \t| AWS                               \t|               Robonomics              \t|\n|---------------------\t|-----------------------------------\t|---------------------------------------\t|\n| トランザクションのタイプ    \t| テクニカル                         \t| テクニカル、経済的                \t|\n| セキュリティ            \t| IT会社によるクラウド管理          \t| Polkadot ,Ethereum                 \t|\n| プロトコル            \t| HTTPS, MQTT                       \t| IPFS, Robonomics                      \t|\n| エコシステム           \t| private                           \t| shared                                \t|\n| DeFiへのアクセス      \t| No                                \t| Yes                                   \t|\n| コスト               \t| Pushing data - $1-2 a sensor      \t| Pushing data - $0                     \t|\n|                     \t| Shadow         - from $10 a month \t| Digital Twin    - $0,01 a transaction \t|\n\n## Aira上にConnectivityをインストール\n\nhttps://www.youtube.com/watch?v=JbBNMHAzJKM\n\n### 必要なもの\n\n* [VirtualBox 6.1](https://www.virtualbox.org/wiki/Downloads)以上\n* [Aira OS ova image](https://static.aira.life/ova/airaos-21.03_robonomics-winter-school.ova)\n\n[この記事を参考に](/docs/aira-installation-on-vb/)AiraのイメージをVirtualBoxに取り込みます。\n\nSSHでの[接続設定](/docs/aira-connecting-via-ssh/)\n\nすべての準備が整い、SSHでのログインに成功したら、メインパッケージをクローンしてビルドしましょう。\n```\ngit clone https://github.com/airalab/sensors-connectivity\ncd sensors-connectivity\ngit checkout v0.9\nnix build -f release.nix\n```\n\n\nそれでは、後で使えるようにデフォルトの設定ファイルのコピーを作成しましょう。すべてのオプションについて知りたい方は[こちらの記事](/docs/configuration-options-description/) をご覧ください。次に、パッケージを `roslaunch` で起動します。\n```\ncp config/default.json config/my.json\nsource result/setup.zsh\nroslaunch sensors_connectivity agent.launch config:=$PWD/config/my.json\n```\n\n## センサーをコネクティビティに接続\n\nhttps://www.youtube.com/watch?v=yxqxBk-6bpI\n\n### 必要なもの\n\n* [Nova SDS011](https://aqicn.org/sensor/sds011) センサー\n* [Yarn Packet Manager](https://yarnpkg.com/getting-started/install)\n\nそれでは、実際にセンサーを接続し、USBポートを仮想マシンに転送し、マップを設定して、自分の測定結果を見てみましょう。\n\nまず、Aira OSが起動している場合は停止し、対応するUSBデバイスを追加します。\n\n![VB USB Forwarding](../images/vb_forward_usb.jpg)\n\n仮想マシンを起動し、SSHで接続し、仮想マシンのUSBデバイスに合わせて`comstation/port`オプションを設定します。また、`comstation`を有効にして、緯度と経度を設定します。最終的に `config/my.json` は以下のようになります。\n\n```\n{\n   \"general\":{\n      \"publish_interval\":30\n   },\n   \"comstation\":{\n      \"enable\":true,\n      \"port\":\"/dev/ttyUSB0\",\n      \"work_period\":0,\n      \"geo\":\"59.944917,30.294558\",\n      \"public_key\":\"\"\n   },\n   \"httpstation\":{\n      \"enable\":false,\n      \"port\":8001\n   },\n   \"mqttstation\": {\n      \"enable\": false,\n      \"host\": \"connectivity.robonomics.network\",\n      \"port\": 1883\n   },\n   \"luftdaten\":{\n      \"enable\":false\n   },\n   \"robonomics\":{\n      \"enable\":true,\n      \"ipfs_provider\":\"/ip4/127.0.0.1/tcp/5001/http\",\n      \"ipfs_topic\":\"airalab.lighthouse.5.robonomics.eth\"\n   },\n   \"datalog\":{\n      \"enable\":false,\n      \"path\":\"\",\n      \"suri\":\"\",\n      \"remote\":\"wss://substrate.ipci.io\",\n      \"dump_interval\":3600,\n      \"temporal_username\":\"\",\n      \"temporal_password\":\"\"\n   },\n   \"dev\":{\n      \"sentry\":\"\"\n   }\n}\n```\n\n> 本物のセンサーがない場合は、`sensers-connectivity/utils/virtual-sensor.py` スクリプトを使ってエミュレートすることができます。\n>\n> 設定ファイルを以下のように変更することで、`HTTPStation`を有効にし、`COMStation`を無効にします。\n\n> ```\n> {\n>    \"general\":{\n>       \"publish_interval\":30\n>    },\n>    \"comstation\":{\n>       \"enable\":false,\n>       \"port\":\"/dev/ttyUSB0\",\n>       \"work_period\":0,\n>       \"geo\":\"59.944917,30.294558\",\n>       \"public_key\":\"\"\n>    },\n>    \"httpstation\":{\n>       \"enable\":true,\n>       \"port\":8001\n>    },\n>    ...\n> }\n> ```\n>\n> そして、VM内の専用端末で`utils/virtual-sensor.py`を起動します。\n\nファイルを保存し、`sensers-connectivity`フォルダからconnectivityを起動します。\n```\nsource result/setup.zsh\nroslaunch sensors_connectivity agent.launch config:=$PWD/config/my.json\n```\n\nコンソール出力に最初の測定値が表示されます。\n\nVMの中であなたのIPFS IDを探します。イメージを起動した直後、または `ipfs id` コマンドで表示されます。これは後で必要になります。\n\nそれでは、マップの独自のインスタンスをセットアップしましょう。ラップトップ（VMではない）で[このリポジトリ](https://github.com/airalab/sensors.robonomics.network)をクローンし、アプリをビルドします。\n```\ngit clone https://github.com/airalab/sensors.robonomics.network\ncd sensors.robonomics.network\nyarn install\n```\n\n`src/agents.json` ファイルを編集し、IPFS ID を入力します。たとえば、以下のようになります。\n```\n[\n  \"12D3KooWSCFAD3Lpew1HijniE6oFTuo4jsMwHzF87wNnXkpCRYWn\"\n]\n```\n\nマップを起動します。\n\n```\nyarn serve\n```\n\n[http://localhost:8080/](http://localhost:8080/)または yarn が教えてくれたアドレスに行き、センサーを探します。\n\n## 実践編\n\n### 軌道 1. ESP + SDS011 センサーを点滅させる\n\n必要なもの:\n\n* ESP8266\n* 少なくともこの中から1つのセンサー SDS011, BME280, HTU21D\n\n[このインストラクション](https://wiki.robonomics.network/docs/connect-sensor-to-robonomics/) を使って、センサーをRobonomics Connectivityに接続します。\n\nセンサーが[地図](https://sensors.robonomics.network/#/)上に表示されることを確認します。 \n\n### 軌道 2. Connectivityの起動\n\n必要なもの:\n\n* ROS\n* Python\n* Nix (optional)\n\n[sensors-connectivity](https://github.com/airalab/sensors-connectivity#get-a-package-and-build)の構築と起動\n\n> ビルド方法、インストール方法は [こちら](https://wiki.robonomics.network/docs/iot-sensors-connectivity/) 設定方法は [こちら](https://wiki.robonomics.network/docs/configuration-options-description/)\n\nパッケージの全体像です。\n\n```\n    station1 \\                        / feeder1\n    station2 -  sensors-connectivity  - feeder2\n    station3 /                        \\ feeder3\n```\n\nたとえば、乱数発生器などの新しいステーションや、画面に文字列を表示するなどの新しいフィーダーを実装することが提案されています。\n\n `IStation` のInterfaceは[こちら](https://github.com/airalab/sensors-connectivity/blob/master/src/stations/istation.py#L73).\n\n `IFeeder` のInterfaceは[こちら](https://github.com/airalab/sensors-connectivity/blob/master/src/feeders/ifeeder.py#L5)\n\n","tools":[],"fileInfo":{"path":"ja/wschool2021-connectivity-service.md","name":"wschool2021-connectivity-service"}}},"context":{}}