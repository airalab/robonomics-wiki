{"hash":"2e773c77f7f250099d6e111d25e65cac5cde5247","data":{"doc":{"id":"bbf9e1cf1565e2440f446715fadbd97e","title":"Lesson 4, 実践でのRobonomics parachain","contributors":["KiichiSugihara"],"translated":true,"headings":[],"subtitles":[{"depth":2,"value":"Requirements","anchor":"#requirements"},{"depth":2,"value":"Relay chainの起動","anchor":"#relay-chainの起動"}],"content":"import Asciinema from '~/components/Asciinema.vue'\n\nRobonomics parachainは、Polkadotエコシステム上の汎用parachainではありません。Robonomicsの目的は、機械の経済を構築することであり、その目的をスコープとしたRobonomics parachainは、PolkadotエコシステムをIoT、スマートシティ、インダストリー4.0のコンセプトと統合するのに役立ちます。\n\n## Requirements\n\n* Dockerは[こちらでインストール](https://docs.docker.com/engine/install/)してください。\n* Polkadot-launchは[こちらでインストール](https://github.com/paritytech/polkadot-launch#install)してください。\n\n## Relay chainの起動\n\nRelay chainはPolkadotの核となるもので、すべての子parachainに [共有のセキュリティ](https://wiki.polkadot.network/docs/en/learn-security)を提供し、メッセージパッシングの仕組みを実装しています。\nここでは、Rococo (polkadot testnet) リレーチェーンのローカルインスタンスを、2つのロボノミクスベースのパラチェーンを子として起動してみましょう。用意された [Docker image tag: \"winter-school-2\"](https://hub.docker.com/layers/robonomics/robonomics/winter-school-2/images/sha256-92f4795262f3ded3e6a153999d2777c4009106a7d37fd29969ebf1c3a262dc85?context=explore) を使いますが、例題のソースコードはすべて[RobonomicsのGitHub](https://github.com/airalab/robonomics/tree/master/scripts/polkadot-launch)にあります。\n\n<Asciinema vid=\"419Jrg22ziFfMFPZlh2WtiLvg\"/>\n\n時間がかかるかもしれませんが、我慢してください。結果として、ポートに3つのチェーンインスタンスができるはずです。\n\n* `9944` - local rococo relay chain.\n* `9988` - robonomics parachain with `id=100`\n* `9989` - robonomics parachain with `id=200`\n\nリモートサーバを使用する場合は、ローカルマシンでいくつかの ssh トンネルを作成する必要があります。\n```\nssh -f -N -L 9944:127.0.0.1:9944 root@REMOTE_SERVER_IP\nssh -f -N -L 9988:127.0.0.1:9988 root@REMOTE_SERVER_IP\nssh -f -N -L 9989:127.0.0.1:9989 root@REMOTE_SERVER_IP\n```\nその後、あなたは、 https://parachain.robonomics.network/ で `ws://127.0.0.1:9944`と `ws://127.0.0.1:9988`と `ws://127.0.0.1:9989` を使うことができます。\n\n![relay](../images/ws_lesson4/upcoming.jpg)\n\n少し前のparachainは登録しておくべきです。\n\n![relay2](../images/ws_lesson4/parachains.jpg)\n\nそして、ブロックの生産を開始する。\n\n![relay3](../images/ws_lesson4/parachains2.jpg)\n\n次のステップとして、parachain間でメッセージをやり取りするためのHRMPチャネルを作成しましょう。relaychainのページにある`sudo`モジュールコールを使ってみます。\n\n![hrmp](../images/ws_lesson4/hrmp.jpg)\n\nチャネルができると、XCMコールが使えるようになります。`datalogXcm`パレット（`datalog`パレットのXCM版）を使ってみましょう。\n\n![datalogXcmSend](../images/ws_lesson4/datalogXcmSend.jpg)\n\n第2パラダイムのメッセージの結果として、`datalog` パレットが呼び出され、データがチェーンに書き込まれます。\n\n![datalogXcmRecv](../images/ws_lesson4/datalogXcmRecv.jpg)\n\n\n結果として、この例は、XCMが標準的なRobonomicsパレットのクロスチェーン使用に対して、どのように使用できるかを示しています。"}},"context":{}}