{"hash":"8cb8d2c60fd79c25a6470210eb1dbef19d454937","data":{"doc":{"id":"54f1b0e2741eed380c3c65400dc18416","title":"Substrate Cumulus Parachain Testsuite for cross-chain messaging","description":"","contributors":["ddulesov","boogerwooger","tubleronchik"],"headings":[],"subtitles":[{"depth":2,"value":"Upstream","anchor":"#upstream"},{"depth":2,"value":"Build & Run","anchor":"#build--run"},{"depth":2,"value":"Checking that initial setup works","anchor":"#checking-that-initial-setup-works"},{"depth":3,"value":"Example:","anchor":"#example"},{"depth":3,"value":"UMP message passing test","anchor":"#ump-message-passing-test"},{"depth":3,"value":"HRMP message passing test","anchor":"#hrmp-message-passing-test"},{"depth":3,"value":"More options","anchor":"#more-options"},{"depth":2,"value":"Local Testnet","anchor":"#local-testnet"},{"depth":3,"value":"Create customized chain spec","anchor":"#create-customized-chain-spec"},{"depth":2,"value":"Hack parachain","anchor":"#hack-parachain"},{"depth":2,"value":"Learn More","anchor":"#learn-more"}],"content":"\n\nThe main goal of this project is the simplification of parachain runtime development, when cross-chain messages are used. \nIt allows the development of runtime code with integration tests with high degree of repeatability and simple usage.\nIt automates building, construction of pre-set network configuration (i.e. 1 relay chain + 2 parachains), setup message-passing channels between parachains and run messaging tests, sending messages, using call to runtime, all constructed and composed in Python.\n\nXCM Testsuite is used for testing the production cycle of Robobank - the set of Substrate pallets, which allow robots to register on external parachains, receive pre-paid orders, execute them and receive payments using external tokens. This allows robots to operate inside the Robonomics network with all required infrastructure, but at the same time, offer their services on any other parachain.\n\nAn example video is available on [YouTube](https://www.youtube.com/watch?v=S_bZgsxngiM)\n\nThe main steps in the demo scenario are:\n- launch relay chain and two parachains in a pack of 6 processes\n- setup XCM message channels between parachains\n- register a robot in both parachains\n- create an order for this robot in the client parachain (reserving payment for the completion of order)\n- send XCM message to the Robonomics parachain\n- creating the \"mirrored\" order record on the Robonomics parachain\n- robot accepts the order on the Robonomics parachain\n- send XCM message about the order acceptance back to the client parachain\n- accept the order on the client parachain (reserving a penalty fee for lack-of-order-completion until the order deadline)\n- robot completes the order on the Robonomics parachain\n- send XCM message about the order completion to the client parachain\n- settle all payments (client payment is transfered to the robot, as well as the unutilized penalty fee)\n- close the order1\n\n\n## Upstream\nThis project is a fork of the\n[Substrate Developer Hub Node Template](https://github.com/substrate-developer-hub/substrate-node-template).\nIt contains code of the runtime pallets being tested.\nAs in original node code of the parachains is in \"./pallets\", \"./runtime\", \"./node\" catalogs.\n\nDifferences with original \"substrate-node-template\":\n- this collator runtime has HRMP handler module and can handle messages from siblings parachains\n- mock test runtime ready-made for internal XCM tests\n\n## Build & Run\nRecommended(highly) setup: \n```\nUbuntu 20, 16 Gb RAM, 8 CPU, 120 Gb SSD\n```\n[NOTE] The first build can take a lot of time, up to several hours on suboptimal machines.\n\n[NOTE] The script works with the FIXED versions (commit hashes) of Polkadot(Rococo) in relay chain and parachains.\n\n[NOTE] By default the script re-creates the same environment every launch, by removing all previous states. This behaviour can be changed in \"config.sh\" using \"PERSISTENT\" param.\n\n\nRun build and setup script.  \n```bash\ngit clone https://github.com/airalab/xcm-robobank-prototype.git\ncd xcm-robobank-prototype\n./scripts/init.sh\n```\n\nBasic actions of \"init.sh\" script:\n - read config (file \"config.sh\" with revision number, initial node keys and identifiers, chaindata persistence param, etc.)\n - setup OS packets, Rust and Python\n - bulds separate binaries for the relay chain and also for both parachains\n    - binaries will be generated in ./bin subdirectory. \n - (optional) removes all previous chain data for all chains\n    - disabled if \"PERSISTENT=1\" is set in \"config.sh\"\n - runs as separate processes (with separate PIDs and I/O pipes):\n    - validators of relay chain (i.e. 4 validators of running a stable Rococo revision)\n    - collators for parachain-100 (i.e. single collator for first parachain, that you're developing)\n    - collators for parachain-200 (i.e. single collator for second parachain, that you're developing)\n - prints all endpoints, ports to console, allowing you to study any chain using frontend apps (explorer, DApp)\n - keep printing all the output data of all chains to console\n\n[WARNING] After launching, wait until the network is up, make sure that block finalization has started, and that the parachains are registered. These processes should require approximately 5 min (50 blocks x 6 sec).\n\n## Checking that initial setup works \n\nUse the standard Polkdot frontend and generated \"--ws-port\" endpoints to connect with each node.\nOpen [Polkadot application](https://polkadot.js.org/apps/?rpc=ws://localhost:9500/) to monitor the chains. \n\n### Example:\nLocalhost, 4 relay chain validators, one parachain-100 collator, one parachain-200 collator:\n- [Relay validator 1](https://polkadot.js.org/apps/?rpc=ws://localhost:9500/)\n- [Relay validator 2](https://polkadot.js.org/apps/?rpc=ws://localhost:9501/)\n- [Relay validator 3](https://polkadot.js.org/apps/?rpc=ws://localhost:9502/)\n- [Relay validator 4](https://polkadot.js.org/apps/?rpc=ws://localhost:9503/)\n- [Parachain-100 collator](https://polkadot.js.org/apps/?rpc=ws://localhost:10054/)\n- [Parachain-200 collator](https://polkadot.js.org/apps/?rpc=ws://localhost:10055/)\n\n\nIf everything works, and consensus started off, we can proceed to run our test cases (in a new terminal).\n\n### UMP message passing test\n```bash\n./scripts/init.sh ump\n```\nIt creates a `Balance.transfer` message in `parachain-100` and passes it to the relay chain.\nWhen the relay chain receives the message it will transfer 15 tokens from `para 100` account to the Charlie acount.\n\n\n### HRMP message passing test\n```bash\n./scripts/init.sh ump\n```\n\nIt creates a `Balance.transfer` message in `parachain-100` and passes it to the `sibling 200` one.\nBefore that, it endows the`subl 100` account with 1000 tokens and  establish a communication channel between the parachains.\n```bash\n./scripts/init.sh hrmp\n```\nNext messages can be sent by running the `hrmpm` subcommand. It doesn't create a channel and so it runs faster.\n```bash\n./scripts/init.sh hrmpm\n```\n\n### More options\n```bash\n./scripts/init.sh help\n```\n\n## Local Testnet\n\n### Create customized chain spec\n```\n./bin/polkadot build-spec --chain rococo-local --disable-default-bootnode > rococo_local.json\n```\n\nEdit rococo_local.json, replace the balances and authorities parameters with yours.\n```json\n  \"keys\": [\n    [\n      \"\",\n      \"\",\n      {\n        \"grandpa\": \"\",\n        \"babe\": \"\",\n        \"im_online\": \"\",\n        \"para_validator\": \"\",\n        \"para_assignment\": \"\",\n        \"authority_discovery\": \"\"\n      }\n    ]\n```\n\nPolkadot address for //Alice//stash (sr25519 cryptography).\n```bash\n$ polkadot key inspect-key --scheme sr25519 --network substrate //Alice//stash\n```\n\n```text\nSecret Key URI `//Alice//stash` is account:\nSecret seed:      \n\nPublic key (hex): \n\nAccount ID:       \n\nSS58 Address:     \n```\n\nPolkadot grandpa session key for //Alice (ed25519 cryptography).\n```bash\n$ polkadot key inspect-key --scheme ed25519 --network substrate //Alice\n```\n```text\nSecret Key URI `//Alice` is account:\nSecret seed:      \n\nPublic key (hex): \n\nAccount ID:       \n\nSS58 Address:     \n```\n\nPolkadot address for //Alice (sr25519 cryptography).\n```\n$ polkadot key inspect-key --scheme sr25519 --network substrate //Alice\n```\n```text\nSecret Key URI `//Alice` is account:\nSecret seed:      \n\nPublic key (hex): \n\nAccount ID:       \n\nSS58 Address:     \n```\n\nConvert rococo_local.json to the raw format.\n```\n./bin/polkadot build-spec --chain rococo_local.json --raw --disable-default-bootnode > rococo_local.json\n```\nTo use new chain spec replace rococo.json file in ./config/ directory this new one and rerun chain.\n```bash\n./scripts/init.sh run\n```\nYou can freely edit the code. The above command will rebuild the project and update the collator node before starting.\nCumulus is pre-release software that is still under heavy development.\nWe are using a specific commit of polkadot [46c826f595021475fa5dbcd0987ed53f104e6e15  18 mar 2021] (https://github.com/paritytech/polkadot/tree/46c826f595021475fa5dbcd0987ed53f104e6e15)\n\nYou can use more recent versions of the software. To do this, change  POLKADOT_COMMIT  in ./scipt/config.sh\nto the latest commit of `rococo-v1` branch, delete ./bin/polkadot, and run \n```bash\n./scripts/init.sh run\n```\n\nUpdate collator project dependencies \n```bash\ncargo update\n./scripts/init.sh build\n```\nSome dependencies probably require new rust toolchain features. This project is based on rust `nightly-2021-01-26`\nUpdate rust toolchain version in ./scripts/config.sh before build.\n\n## Hack parachain\n[Add external pallet](https://substrate.dev/docs/en/tutorials/add-a-pallet/) - should it probably be in \"learn more\"?\n## Learn More\n\nRefer to the upstream\n[Substrate Developer Hub Node Template](https://github.com/substrate-developer-hub/substrate-node-template)\nto learn more about the structure of this project, the capabilities it encapsulates and the way in\nwhich those capabilities are implemented. You can learn more about\n[The Path of Parachain Block](https://polkadot.network/the-path-of-a-parachain-block/) on the\nofficial Polkadot Blog.\n[Parity Cumulus Workshop](https://substrate.dev/cumulus-workshop/#/)\n","tools":[],"fileInfo":{"path":"xcm-robobank.md","name":"xcm-robobank"}}},"context":{}}