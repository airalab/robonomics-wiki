{"hash":"fd5d0a5f3aa1c3e6f4368684b3f72c24a1a4a9b2","data":{"doc":{"id":"0e9ab8f08483d35a8449dd9ff73c3f46","title":"6.1과, 최종 사용자를위한 IOT DAPP 구축, 1 부","description":"","cover_image":{"type":"image","mimeType":"image/png","src":"/assets/static/wschool2021-build-dapp-for-end-users.0b85c65.7ca3c4ec0ef06349fe2b19f98f646a8b.png","size":{"width":1920,"height":1080},"sizes":"(max-width: 1920px) 100vw, 1920px","srcset":["/assets/static/wschool2021-build-dapp-for-end-users.1b91758.7ca3c4ec0ef06349fe2b19f98f646a8b.png 480w","/assets/static/wschool2021-build-dapp-for-end-users.3df3210.7ca3c4ec0ef06349fe2b19f98f646a8b.png 1024w","/assets/static/wschool2021-build-dapp-for-end-users.0b85c65.7ca3c4ec0ef06349fe2b19f98f646a8b.png 1920w"],"dataUri":"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 1920 1080' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-6cf82fac981ef2a311b7067aeb16dfda'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='40'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-6cf82fac981ef2a311b7067aeb16dfda)' width='1920' height='1080' xlink:href='data:image/png%3bbase64%2ciVBORw0KGgoAAAANSUhEUgAAAEAAAAAkCAYAAAA5DDySAAAACXBIWXMAAAsSAAALEgHS3X78AAAEIElEQVRo3u2Y%2bU9UVxTH%2bROM2vqDliLWnaaLiT/1x/7WNEZjYjRak8ZojKkl0VLXVuqCcSOKgii4BxUQdVqFKoiCI8wwAwMMouyzzzAbzhAVmTff3nOdIU%2b2QUQzlXuSm3lv7nLe/Zxz77nnxnw6fQ6oTI6bjYmffYH4hAXw%2bf0gkSQJYyXBYBDRKDGfsIlTmT7/2wEASExmC5pb29BhNKHxaROMJjPaOgywOzrR3NIKs8UKq92OllCbDqMRLre7rw/Ve71dUQshZlLsTD75RctWIXbOV4ib980bAHJy85H4%2b3acPncRq9duwPHMLPyxZz/%2b2n8IKYePYufuFGzbtQdb/tyNCzlXcSzjFAoUt7Bu4yYkpxzEgdQ0PFJV8bECgUD0AZj8%2bSzEzv0aCQu/w9RZCYhjMOQAnvl8sNkd3OJkTbvDAUenE96uLpitVni83lC9A51OF6vrhN/fDZfLDSd/d8Ln80evB/D1zyBMZJ4wYdoMxH85DvcAgjAlfu6APYA%2bmookhX%2blvv/k71KoBIcpUe0B4TIYgI9dBAABQAAQAASAkQKQh7NI4S7Sf6MNlZH0vK3hIgKgWE9HWHoOsGcpVPhBKVQfCQ71H%2boM0b%2bdvIR1h3XK6%2bT65GPJv68/mLcGEBjmJDjYwB96yfT29g5ZN9JT7LAASBoan%2bDeg3JYbXYoK9Wo0z/GxSu53ApqTTVPgNTaahxJS4eurh4ve3pQqdZAU61DTt41KCtUuF%2buRNHdEhSXPkDq8QxodbXIv6Hg4166mgfF7SIYTCZUqKt4u0JWSsseor6hkT83sayztl6Ph2yswjvFuPlPISw2G8tG23CnpBRV1TU4mp6Jnlev0G4wQlWl7YPwTh5AQtndL5u3QFtTyzLBbFzJv471ib/B6XIh/7oCvyZtQ0bWWZZNrsTlvAKe%2bSXvO4DM7HNYvPwnnhFSBknZ496Dqfj%2bxyU4yerWJ27GiVPZSNqZjEPHTqD4fhnWbEhE1vlLvA9NLLfgJs8mSR9ll0k7dmEryzrpWf%2b4ESWsD%2bk%2bkpaBH5Yuh6ZGh5a2dqSfPvPaQ2RLZdQATCwDLFdWMAuZ%2bX2AgeX4ykoVs5aG1Vm4UrIcgSEPIIUWqw21%2bgZuZbI%2beQv1LX9UgbSTWXjS1Mw8qYG3J6/Q1enh8Xih0mjxL5s43SO4PR5uecWtIu6FlcyqZAQ3a0eTJGllv%2b0GA%2b9LHnObeYfH28XvK8J71DsDoAsQUk4XI6NZY%2b9LIukf6X4UEcDfbH2u%2bHkdX3vhjSc8uCSLCsF%2bGaEUjJBBDtInEJDeiBjyKBCQ6%2bm3y4cjlDwqjEkUIPF3d6OMLYHnz18MUDrSmD%2bW54DBQu5Q3/XeDkLj6iQ4lCXHNQCRDAkAAoAAIAAIAAKAACAACAACgADwf5f/ADrGbCF%2b0epdAAAAAElFTkSuQmCC' /%3e%3c/svg%3e"},"contributors":["vol4tim","arinaml"],"translated":true,"headings":[],"subtitles":[{"depth":2,"value":"준비하기","anchor":"#준비하기"},{"depth":3,"value":"Robonomics 노드 출시","anchor":"#robonomics-노드-출시"},{"depth":3,"value":"브라우저 확장","anchor":"#브라우저-확장"},{"depth":2,"value":"DAPP 개발","anchor":"#dapp-개발"},{"depth":3,"value":"1 단계","anchor":"#1-단계"},{"depth":3,"value":"2 단계. POLKADOT.JS 시작하기","anchor":"#2-단계-polkadotjs-시작하기"},{"depth":4,"value":"종속성 설치","anchor":"#종속성-설치"},{"depth":4,"value":"Robonomics에 연결","anchor":"#robonomics에-연결"},{"depth":3,"value":"3 단계. VUE 연결 구성 요소","anchor":"#3-단계-vue-연결-구성-요소"},{"depth":4,"value":"연결","anchor":"#연결"},{"depth":4,"value":"잔액이있는 계정","anchor":"#잔액이있는-계정"},{"depth":3,"value":"4 단계. 데이터로그","anchor":"#4-단계-데이터로그"},{"depth":3,"value":"5 단계. 시작","anchor":"#5-단계-시작"},{"depth":3,"value":"6 단계. 데모","anchor":"#6-단계-데모"}],"content":"\n## 준비하기\n\n### Robonomics 노드 출시\n\ndApp 개발 및 테스트를 위해 로컬 Robonomics 노드를 사용합니다. 이렇게하려면 컴파일 된 바이너리 파일 https://github.com/airalab/robonomics/releases를 다운로드해야합니다. Ubuntu를 사용할 예정이므로 적절한 버전을 다운로드합니다.\n\n아카이브 압축 풀기\n```sh\nwget https://github.com/airalab/robonomics/releases/download/v0.24.0/robonomics-ubuntu-0.24.0-x86_64.tar.xz\ntar -xvf robonomics-ubuntu-0.24.0-x86_64.tar.xz\nchmod +x robonomics\n```\n\n이제 개발 모드에서 노드를 시작할 수 있습니다. 이렇게하려면 --dev 플래그를 사용하십시오.\n```sh\n./robonomics --dev --tmp\n```\n\n> 문제 해결\n```sh\n./robonomics purge-chain --dev\n```\n\n### 브라우저 확장\n\n브라우저에 키를 저장하기위한 `polkadot {.js}` 확장자가 있습니다. dApp에서는이를 사용하여 거래에 서명합니다.\n\n확장 `구글 크롬`과 `Firefox` 현재로 볼 수 있습니다 : https://polkadot.js.org/extension/\n\n확장 프로그램을 설치 한 후 새 계정을 만듭니다.\n![screen1](../images/build-iot-dapps/screen1.png)\n\n> 첫 번째 단계가 완료되었습니다.\n\n## DAPP 개발\n\n### 1 단계\n\n> 우리는 vue.js framework를 사용하여 dApp을 작성할 것입니다.하지만 당신이 좋아하거나 할 수있는 것은 무엇이든 사용할 수 있습니다.\n\nvue.js로 시작 애플리케이션을 생성하여 dApp 개발을 시작하겠습니다. 여기서 두 가지 방법으로 수행 할 수 있습니다.\n\n방법 1 :\n\n`Vue cli` 콘솔 유틸리티 사용.\n이렇게하려면 https://cli.vuejs.org/guide/installation.html을 설치해야합니다.\nAlso we will need `yarn`. Install it from [here](https://yarnpkg.com)\n\n설치 후 터미널에서 명령을 실행할 수 있습니다.\n\n```sh\nvue create mydapp\n```\n\nSetupwizard의 몇 가지 질문에 답하십시오. 버전 Vue 2를 사용하므로 기본 버전 `디폴트 ([Vue 2] babel, eslint)`을 유지합니다. \n\n방법 2 :\n\n예제와 함께 준비된 git 저장소를 복제하고 1 단계로 전환합니다.\n\n```sh\ngit clone https://github.com/airalab/example-robonomics-dapp.git mydapp\ncd mydapp\ngit checkout step-1\n```\n\n결과적으로 이미 시작되어 브라우저에서 열 수있는 시작 응용 프로그램이 설치된 디렉토리를 얻게됩니다.\n\n```sh\nyarn\nyarn serve\n```\n\n### 2 단계. POLKADOT.JS 시작하기\n\n#### 종속성 설치\n\ndApp을 Robonomics 체인에 연결하려면 `@polkadot/api` 라이브러리가 있습니다. 그리고 키가있는 확장과 dApp의 상호 작용을 위해 `@polkadot/extension-dapp` 라이브러리가 있습니다. 애플리케이션에 설치해야합니다\n이 라이브러리 사용에 대한 자세한 내용은 https://polkadot.js.org/docs/ 문서에서 찾을 수 있습니다. \n\n방법 1 :\n\n```sh\nyarn add @polkadot/api @polkadot/extension-dapp\n```\n\n`mjs` 확장을 지원하려면 `vue.config.js` 파일도 추가해야합니다.\n\n`vue.config.js`\n```js\nmodule.exports = {\n  publicPath: \"\",\n  configureWebpack: {\n    resolve: {\n      extensions: [\"*\", \".mjs\", \".js\", \".vue\", \".json\", \".gql\", \".graphql\"]\n    },\n    module: {\n      rules: [\n        {\n          test: /\\.mjs$/,\n          include: /node_modules/,\n          type: \"javascript/auto\"\n        }\n      ]\n    }\n  }\n};\n```\n\n#### Robonomics에 연결\n\n먼저 Robonomics 노드에 연결하기위한 매개 변수가있는 구성 파일을 생성 해 보겠습니다. 데모 저장소에는이 파일 `config.template.json`의 예가 있습니다.\n\n`src/config.json`\n```json\n{\n  \"endpoint\": \"ws://localhost:9944\",\n  \"types\": {\n    \"Record\": \"Vec<u8>\",\n    \"Parameter\": \"Bool\",\n    \"Address\": \"AccountId\",\n    \"LookupSource\": \"AccountId\"\n  }\n}\n```\n\n이 파일에서는 연결할 노드와 사용자 지정 유형을 나타냅니다.\n\n이제 실행중인 노드에 연결하는 스크립트를 작성해야합니다.\n\n`src/utils/api.js`\n```js\nimport { ApiPromise, WsProvider } from \"@polkadot/api\";\nimport config from \"../config.json\";\n\nlet api;\nexport async function initApi() {\n  const provider = new WsProvider(config.endpoint);\n  api = await ApiPromise.create({\n    provider,\n    types: config.types\n  });\n  return api;\n}\n\nexport function getApi() {\n  return api;\n}\n```\n\n확장 프로그램의 키로 거래에 서명 할 수 있도록 확장 프로그램에 연결하는 두 가지 기능과 계정을 초기화하는 기능을 추가해 보겠습니다.\n\n`src/utils/api.js`\n```js\n...OTHER_CODE...\n\nimport {\n  web3Accounts,\n  web3Enable,\n  web3FromAddress\n} from \"@polkadot/extension-dapp\";\n\nasync function getExtension() {\n  const extensions = await web3Enable(\"demo\");\n  if (extensions.length === 0) throw new Error(\"no extension\");\n  return extensions[0];\n}\n\nexport async function initAccount(index = 0) {\n  const timeout = new Promise(resolve => {\n    setTimeout(resolve, 300);\n  });\n  await timeout;\n  await getExtension();\n  const accounts = await web3Accounts();\n  if (accounts.length > 0) {\n    const injector = await web3FromAddress(accounts[index].address);\n    api.setSigner(injector.signer);\n    return accounts[index].address;\n  }\n  throw new Error(\"no accounts\");\n}\n\n...OTHER_CODE...\n```\n\n우리 계좌는 잔액이 0이되지만 약간의 자금이 필요합니다. 그래서 우리는 또 다른 수도꼭지 기능을 만들어야합니다. `--dev` 플래그로 Robonomics를 시작함에 따라 잔액이 많은 `Alice` 계정이 있으므로 거기에서 자금을 요청합니다.\n\n`src/utils/api.js`\n```js\n...OTHER_CODE...\n\nimport { Keyring } from \"@polkadot/keyring\";\n\nexport function getBalance(account, cb) {\n  api.query.system.account(account, ({ data: { free: currentFree } }) => {\n    cb(currentFree);\n  });\n}\n\nexport const keyring = new Keyring({ type: \"sr25519\" });\n\nexport async function faucet(address) {\n  keyring.setSS58Format(api.registry.chainSS58);\n  const account = keyring.addFromUri(\"//Alice\");\n  const tx = api.tx.balances.transfer(address, 1000000000000000);\n  await tx.signAndSend(account);\n}\n\n...OTHER_CODE...\n```\n\n스크립트 https://github.com/airalab/example-robonomics-dapp/blob/master/src/utils/api.js의 전체 버전\n\n앱 실행\n\n```sh\nyarn serve\n```\n\n방법 2 :\n\n리포지토리를 복제하여 응용 프로그램을 시작하는 경우이 단계를 완료하려면 2 단계로 전환하고 나머지 종속성을 설치하는 것으로 충분합니다.\n\n```sh\ngit checkout step-2\ncp src/config.template.json src/config.json\nyarn\nyarn serve\n```\n\n### 3 단계. VUE 연결 구성 요소\n\n#### 연결\n\n우리는 이미 연결을위한 스크립트를 작성했습니다. 이제 인터페이스에서 사용할 수 있습니다. 루트 컴포넌트 `App.vue`에서 작성된 `initApi` 함수를 호출하는 것으로 충분합니다. 그리고 사용자가 연결을 기다리는 동안 지금은 줄임표 형태로 작은 로더를 보여줍니다.\n\n방법 1 :\n\n구성 요소 템플릿 및 기본 스타일.\n\n`src/App.vue`\n```js\n<template>\n  <div id=\"app\">\n    <h1>Robonomics dApp</h1>\n    <div v-if=\"load\">...</div>\n    <template v-else>\n      <div v-if=\"error\" class=\"error\">{{ error }}</div>\n      <template v-else-if=\"api\">\n        connected\n      </template>\n    </template>\n  </div>\n</template>\n\n...OTHER_CODE...\n\n<style>\n#app {\n  font-family: Avenir, Helvetica, Arial, sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  text-align: center;\n  color: #2c3e50;\n  margin-top: 60px;\n}\nbutton {\n  font-size: 14px;\n  padding: 5px 12px;\n}\nbutton:hover {\n  cursor: pointer;\n}\ninput {\n  font-size: 14px;\n  padding: 5px;\n}\nselect {\n  font-size: 14px;\n  padding: 5px;\n}\nbutton:focus,\ninput:focus {\n  outline: none;\n}\n.error {\n  color: rgb(151, 31, 31);\n  font-weight: bold;\n  text-align: center;\n  margin: 10px 0;\n}\n</style>\n```\n\n`initApi` 함수가 호출되는 컴포넌트 코드가 있습니다.\n\n`src/App.vue`\n```js\n<script>\nimport { initApi } from \"./utils/api\";\n\nexport default {\n  name: \"App\",\n  data() {\n    return {\n      load: false,\n      api: null,\n      error: null\n    };\n  },\n  created() {\n    this.init();\n  },\n  methods: {\n    async init() {\n      try {\n        this.load = true;\n        this.api = await initApi();\n        this.load = false;\n      } catch (error) {\n        this.error = error.message;\n        this.load = false;\n      }\n    }\n  }\n};\n</script>\n```\n\n#### 잔액이있는 계정\n\n이제 계정을 사용하여 잔액을 충전하고 인터페이스에 표시 할 수 있습니다\n\n템플릿에 적절한 마크 업을 추가하겠습니다\n\n`src/App.vue`\n```js\n<template>\n\n  ...OTHER_CODE...\n\n    <template v-else>\n      <div v-if=\"error\" class=\"error\">{{ error }}</div>\n      <template v-else-if=\"api && account\">\n        <p>\n          Account: <b>{{ account }}</b> {{ balance }} |\n          <button @click=\"faucet\">\n            faucet\n          </button>\n        </p>\n      </template>\n    </template>\n\n  ...OTHER_CODE...\n\n</template>\n```\n\n계정 주소 및 잔액에 대한 새 필드를 추가하겠습니다\n\n`src/App.vue`\n```js\n\n...OTHER_CODE...\n\ndata() {\n  return {\n\n    ...OTHER_CODE...\n\n    account: null,\n    balance: 0,\n\n    ...OTHER_CODE...\n\n  };\n}\n\n...OTHER_CODE...\n```\n\n계정 초기화를 `init` 함수에 추가하고 잔액을 가져와야합니다\n\n`src/App.vue`\n```js\n<script>\nimport { initApi, initAccount, getBalance, faucet } from \"./utils/api\";\nimport { formatBalance } from \"@polkadot/util\";\n\n...OTHER_CODE...\n\nasync init() {\n\n  ...OTHER_CODE...\n\n  this.api = await initApi();\n  this.account = await initAccount();\n  getBalance(this.account, balance => {\n    this.balance = formatBalance(balance);\n  });\n\n  ...OTHER_CODE...\n\n}\n\n...OTHER_CODE...\n</script>\n```\n\n버튼을 클릭하면 잔액 보충 기능이 추가됩니다\n\n`src/App.vue`\n```js\n\n...OTHER_CODE...\n\n  methods: {\n    faucet() {\n      faucet(this.account);\n    },\n\n...OTHER_CODE...\n```\n\nhttps://github.com/airalab/example-robonomics-dapp/blob/step-3/src/App.vue\n\n앱 실행\n\n```sh\nyarn serve\n```\n\n방법 2:\n\n리포지토리를 복제하여 애플리케이션을 시작한 경우이 단계를 완료하려면 3 단계로 전환하기 만하면됩니다.\n\n```sh\ngit checkout step-3\nyarn serve\n```\n\n결과적으로 브라우저에이 사진이 표시됩니다\n\n![screen2](../images/build-iot-dapps/screen2.png)\n\n### 4 단계. 데이터로그\n\n체인의 모든 데이터를 저장하고 읽으려면 `datalog` 모듈을 사용합니다\n\n이 모듈을 사용하는 방법의 예를 들어 `Datalog.vue` 구성 요소를 만들어 보겠습니다.\n\n방법 1 :\n\n마크 업에는 블록으로`읽`은 데이터를 읽는 것이 표시됩니다. 그리고 확장 형태로 데이터를 입력 할 수있는 텍스트 입력 양식과 `쓰기` 버튼이 있습니다.\n\n`src/components/Datalog.vue`\n```js\n<template>\n  <div>\n    <h2>Datalog</h2>\n    <button @click=\"read\">read</button> |\n    <input v-model=\"data\" :disabled=\"isWrite\" />\n    <button @click=\"write\" :disabled=\"isWrite\">write</button>\n    <div v-if=\"error\" class=\"error\">{{ error }}</div>\n    <div v-if=\"log\" class=\"log\">\n      <p v-if=\"log.length === 0\" class=\"error\">Not found</p>\n      <div v-for=\"(item, k) in log\" :key=\"k\" class=\"row\">\n        date: <b>{{ item[0] | dateFormat }}</b>\n        <br />\n        data: <b>{{ item[1] | dataFormat }}</b>\n      </div>\n    </div>\n  </div>\n</template>\n\n...OTHER_CODE...\n\n<style scoped>\n.log {\n  border: 1px solid #eee;\n  text-align: left;\n  width: 800px;\n  margin: 20px auto;\n}\n.log .row {\n  margin: 10px;\n}\n</style>\n```\n\n구성 요소 코드. 여기서 트랜잭션을 보내는 주요 포인트는 API를 통해 데이터를 전송하고 계정으로 서명하는 함수를 호출하는 것입니다. `this.api.tx.datalog.record(stringToHex(this.data)).signAsync(this.account);`\n\n`src/components/Datalog.vue`\n```js\n<script>\nimport { stringToHex, u8aToString } from \"@polkadot/util\";\n\nexport default {\n  props: [\"api\", \"account\"],\n  data() {\n    return {\n      data: \"data string\",\n      log: null,\n      isWrite: false,\n      error: \"\"\n    };\n  },\n  filters: {\n    dateFormat: function(v) {\n      return new Date(Number(v)).toLocaleString();\n    },\n    dataFormat: function(v) {\n      return u8aToString(v);\n    }\n  },\n  methods: {\n    async read() {\n      this.log = (await this.api.query.datalog.datalog(this.account)).toArray();\n    },\n    async write() {\n      try {\n        this.error = \"\";\n        this.isWrite = true;\n        const tx = await this.api.tx.datalog\n          .record(stringToHex(this.data))\n          .signAsync(this.account);\n        await tx.send(result => {\n          if (result.status.isInBlock) {\n            this.read();\n            this.isWrite = false;\n          }\n        });\n      } catch (error) {\n        this.error = error.message;\n        this.isWrite = false;\n      }\n    }\n  }\n};\n</script>\n```\n\nhttps://github.com/airalab/example-robonomics-dapp/blob/master/src/components/Datalog.vue\n\n컴포넌트 간 전환을 위해 컴포넌트 출력을 `App.vue`에 추가했습니다.\n\n`src/App.vue`\n```js\n...OTHER_CODE...\n\n<template v-else-if=\"api && account\">\n  <p>\n    Account: <b>{{ account }}</b> {{ balance }} |\n    <button @click=\"faucet\">faucet</button>\n  </p>\n\n  <div>\n    <div class=\"tabs\">\n      <button\n        @click=\"tab = 'datalog'\"\n        :class=\"{ active: tab === 'datalog' }\"\n      >\n        datalog\n      </button>\n    </div>\n    <Datalog v-if=\"tab === 'datalog'\" :api=\"api\" :account=\"account\" />\n  </div>\n</template>\n\n...OTHER_CODE...\n\n<script>\nimport Datalog from \"./components/Datalog\";\n\n...OTHER_CODE...\n\nexport default {\n  name: \"App\",\n  components: {\n    Datalog\n  },\n  data() {\n    return {\n      tab: \"datalog\"\n\n...OTHER_CODE...\n</script>\n\n<style>\n...OTHER_CODE...\n\n.tabs button {\n  font-size: 14px;\n  padding: 10px 20px;\n  font-weight: bold;\n  background: #ececec;\n  border: 1px solid #aaa;\n}\n.tabs button:hover {\n  background: #bfbfbf;\n}\n.tabs button:last-child {\n  border-left: none;\n}\n.tabs button.active {\n  background: #ced5e2;\n}\n</style>\n```\n\n앱 실행\n\n```sh\nyarn serve\n```\n\n방법 2:\n\n리포지토리를 복제하여 애플리케이션을 시작한 경우이 단계를 완료하려면 4 단계로 전환하기 만하면됩니다\n\n```sh\ngit checkout step-4\nyarn serve\n```\n\n결과적으로 브라우저에이 사진이 표시됩니다\n\n![screen3](../images/build-iot-dapps/screen3.png)\n\n### 5 단계. 시작\n\n이 기능은 로봇을 시작하고 중지하는 데 사용됩니다. 이 모듈을 사용하는 방법을 보여주기 위해 `Launch.vue` 구성 요소를 작성해 보겠습니다.\n\n방법 1 :\n\n컴포넌트 템플릿에는 로봇의 주소, ON / OFF 클리 커, 보내기 버튼을 지정할 수있는 양식이 있습니다.\n\n`src/components/Launch.vue`\n```js\n<template>\n  <div>\n    <h2>Launch</h2>\n    <input v-model=\"robot\" :disabled=\"isWrite\" placeholder=\"Robot address\" />\n    <select v-model=\"parameter\" :disabled=\"isWrite\">\n      <option value=\"ON\">ON</option>\n      <option value=\"OFF\">OFF</option>\n    </select>\n    <button @click=\"launch\" :disabled=\"isWrite\">launch</button>\n    <div v-if=\"error\" class=\"error\">{{ error }}</div>\n    <div v-if=\"log.length > 0\" class=\"log\">\n      <div v-for=\"(item, k) in log\" :key=\"k\" class=\"row\">\n        sender: <b>{{ item.sender }}</b>\n        <br />\n        robot: <b>{{ item.robot }}</b>\n        <br />\n        parameter: <b>{{ item.parameter ? \"ON\" : \"OFF\" }}</b>\n      </div>\n    </div>\n  </div>\n</template>\n\n...OTHER_CODE...\n\n<style scoped>\n.log {\n  border: 1px solid #eee;\n  text-align: left;\n  width: 800px;\n  margin: 20px auto;\n}\n.log .row {\n  margin: 10px;\n}\n</style>\n```\n\n코드는 `Datalog.vue` 구성 요소와 유사합니다. 차이점은 독서에 있습니다. 로봇은 이벤트를 통해 명령을받습니다.\n\n`src/components/Launch.vue`\n```js\n<script>\nexport default {\n  props: [\"api\", \"account\"],\n  data() {\n    return {\n      robot: this.account,\n      parameter: \"ON\",\n      log: [],\n      isWrite: false,\n      error: \"\",\n      unsubscribe: null\n    };\n  },\n  async created() {\n    this.unsubscribe = await this.api.query.system.events(events => {\n      events.forEach(record => {\n        const { event } = record;\n        if (event.section === \"launch\" && event.method === \"NewLaunch\") {\n          const sender = event.data[0].toString();\n          const robot = event.data[1].toString();\n          const parameter = event.data[2].toHuman();\n          this.log.push({\n            sender,\n            robot,\n            parameter\n          });\n        }\n      });\n    });\n  },\n  destroyed() {\n    if (this.unsubscribe) {\n      this.unsubscribe();\n    }\n  },\n  methods: {\n    async launch() {\n      try {\n        this.error = \"\";\n        this.isWrite = true;\n        const tx = await this.api.tx.launch\n          .launch(this.robot, this.parameter === \"ON\")\n          .signAsync(this.account);\n        await tx.send(result => {\n          if (result.status.isInBlock) {\n            this.isWrite = false;\n          }\n        });\n      } catch (error) {\n        this.error = error.message;\n        this.isWrite = false;\n      }\n    }\n  }\n};\n</script>\n```\n\nhttps://github.com/airalab/example-robonomics-dapp/blob/master/src/components/Launch.vue\n\n표시를 위해 `App.vue`에 새 구성 요소 추가\n\n`src/App.vue`\n```js\n<template>\n...OTHER_CODE...\n\n  <div>\n    <div class=\"tabs\">\n      <button\n        @click=\"tab = 'datalog'\"\n        :class=\"{ active: tab === 'datalog' }\"\n      >\n        datalog\n      </button>\n      <button\n        @click=\"tab = 'launch'\"\n        :class=\"{ active: tab === 'launch' }\"\n      >\n        launch\n      </button>\n    </div>\n    <Datalog v-if=\"tab === 'datalog'\" :api=\"api\" :account=\"account\" />\n    <Launch v-if=\"tab === 'launch'\" :api=\"api\" :account=\"account\" />\n  </div>\n\n...OTHER_CODE...\n</template>\n\n...OTHER_CODE...\n\n<script>\nimport Datalog from \"./components/Datalog\";\nimport Launch from \"./components/Launch\";\n\n...OTHER_CODE...\n\ncomponents: {\n  Datalog,\n  Launch\n},\n\n...OTHER_CODE...\n```\n\n앱 실행\n\n```sh\nyarn serve\n```\n\n방법 2:\n\n리포지토리를 복제하여 애플리케이션을 시작한 경우이 단계를 완료하려면 5 단계로 전환하기 만하면됩니다\n\n```sh\ngit checkout step-5\nyarn serve\n```\n\n결과적으로 브라우저에이 사진이 표시됩니다\n\n![screen4](../images/build-iot-dapps/screen4.png)\n\n### 6 단계. 데모\n\n이 데모에서는 dApp을 통해 시작 및 중지 할 수있는 자동차가 있습니다. 자동차는 여행 중에 통나무를 수집하고 정지 한 후 체인에 저장합니다. 여기서는 별도로 시도한 두 모듈을 함께 사용합니다.\n\n로봇 (자동차)의 동작을 모방하기 위해 Robot 클래스를 작성합니다.이 로봇의 계정으로 `Alice` 키를 사용합니다. `Robot` 클래스는 `NewLaunch` 이벤트를 감시하여 스스로 켜고 끕니다. 전원을 켠 후 데이터를 로그에 수집하기 시작하며 데이터 측면에서는 타임 스탬프 일뿐입니다. 그리고 종료 후에는이 로그를 `데이터 로그` 모듈에 저장합니다.\n\n방법 1 :\n\n`src/utils/robot.js` 파일을 생성합니다. https://github.com/airalab/example-robonomics-dapp/blob/master/src/utils/robot.js 파일의 전체 코드.\n\n시각화를 위해 시작 버튼, 자동차 애니메이션 및 로그 출력이있는 `Demo.vue` 구성 요소를 만듭니다.\n\n`src/components/Demo.vue`\n```js\n<template>\n  <div>\n    <h2>Demo</h2>\n    <template v-if=\"robot\">\n      <h3>Robot: {{ robot.address }}</h3>\n      <p v-if=\"robot.state\">Driver: {{ robot.driver }}</p>\n      <button @click=\"run\" :disabled=\"isWrite\">\n        <template v-if=\"!robot.state\">run</template>\n        <template v-else>stop</template>\n      </button>\n      <div class=\"road\">\n        <div\n          class=\"robot\"\n          :class=\"[robot.state ? 'robot-play' : 'robot-stop']\"\n        ></div>\n      </div>\n      <div v-if=\"error\" class=\"error\">{{ error }}</div>\n      <div v-if=\"log\" class=\"log\">\n        <p v-if=\"log.length === 0\" class=\"error\">Not found</p>\n        <div v-for=\"(item, k) in log\" :key=\"k\" class=\"row\">\n          <b>{{ item[0] | dateFormat }}</b>\n          <pre>{{ item[1] | dataFormat }}</pre>\n        </div>\n      </div>\n    </template>\n  </div>\n</template>\n\n...OTHER_CODE...\n\n<style scoped>\n.log {\n  border: 1px solid #eee;\n  text-align: left;\n  width: 800px;\n  margin: 20px auto;\n  height: 500px;\n  overflow-y: auto;\n}\n.log .row {\n  margin: 10px;\n  border-bottom: 1px solid #eee;\n}\n.road {\n  width: 1000px;\n  margin: 20px auto;\n  background-color: #eee;\n  padding: 20px 0;\n  border: 5px solid #a5a5a5;\n  border-left: 0;\n  border-right: 0;\n  position: relative;\n}\n.road::before {\n  content: \" \";\n  width: 1000px;\n  border-top: 5px dashed #a5a5a5;\n  position: absolute;\n  top: 50%;\n  left: 0;\n}\n@keyframes move {\n  from {\n    transform: translateX(0);\n  }\n  to {\n    transform: translateX(100%);\n  }\n}\n.robot {\n  height: 100px;\n  width: 100px;\n  color: #fff;\n  font-weight: bold;\n  font-style: 14px;\n  animation: move 30s linear infinite;\n  border-radius: 0 10px 10px 0;\n  background: url(\"../images/build-iot-dapps/car.png\") no-repeat 0 0;\n  background-size: cover;\n}\n.robot-play {\n  animation-play-state: running;\n}\n.robot-stop {\n  animation-play-state: paused;\n}\n</style>\n```\n\n구성 요소 코드. 여기에서 `Robot` 클래스의 인스턴스와 시작 / 중지 기능을 만들어야합니다.\n\n`src/components/Demo.vue`\n```js\n...OTHER_CODE...\n\n<script>\nimport { u8aToString } from \"@polkadot/util\";\nimport Robot from \"../utils/robot\";\n\nexport default {\n  props: [\"api\", \"account\"],\n  data() {\n    return {\n      isWrite: false,\n      error: \"\",\n      robot: null,\n      log: []\n    };\n  },\n  filters: {\n    dateFormat: function(v) {\n      return new Date(Number(v)).toLocaleString();\n    },\n    dataFormat: function(v) {\n      return JSON.parse(u8aToString(v));\n    }\n  },\n  async created() {\n    this.robot = new Robot(\"//Alice\", this.api);\n    await this.robot.subscribeLog(r => {\n      this.log = r.reverse().map(item => {\n        return [item[0], item[1]];\n      });\n    });\n  },\n  destroyed() {\n    this.robot.destroy();\n  },\n  methods: {\n    async run() {\n      try {\n        this.error = \"\";\n        this.isWrite = true;\n        const tx = await this.api.tx.launch\n          .launch(this.robot.account.address, !this.robot.state)\n          .signAsync(this.account);\n        await tx.send(result => {\n          if (result.status.isInBlock) {\n            this.isWrite = false;\n          }\n        });\n      } catch (error) {\n        this.error = error.message;\n        this.isWrite = false;\n      }\n    }\n  }\n};\n</script>\n\n...OTHER_CODE...\n```\n\nhttps://github.com/airalab/example-robonomics-dapp/blob/master/src/components/Demo.vue\n\n`src/images/build-iot-dapps/car.png`, `src/assets/car.png` 에 다른 차 사진을 추가해 보겠습니다. 예 https://github.com/airalab/example-robonomics-dapp/blob/master/src/assets/car.png\n\n표시를 위해 `App.vue`에 새 구성 요소 추가\n\n`src/App.vue`\n```js\n<template>\n\n...OTHER_CODE...\n\n  <div>\n    <div class=\"tabs\">\n      <button\n        @click=\"tab = 'datalog'\"\n        :class=\"{ active: tab === 'datalog' }\"\n      >\n        datalog\n      </button>\n      <button\n        @click=\"tab = 'launch'\"\n        :class=\"{ active: tab === 'launch' }\"\n      >\n        launch\n      </button>\n      <button @click=\"tab = 'demo'\" :class=\"{ active: tab === 'demo' }\">\n        demo\n      </button>\n    </div>\n    <Datalog v-if=\"tab === 'datalog'\" :api=\"api\" :account=\"account\" />\n    <Launch v-if=\"tab === 'launch'\" :api=\"api\" :account=\"account\" />\n    <Demo v-if=\"tab === 'demo'\" :api=\"api\" :account=\"account\" />\n  </div>\n\n...OTHER_CODE...\n\n</template>\n\n...OTHER_CODE...\n\n<script>\nimport Datalog from \"./components/Datalog\";\nimport Launch from \"./components/Launch\";\nimport Demo from \"./components/Demo\";\n\n...OTHER_CODE...\n\ncomponents: {\n  Datalog,\n  Launch,\n  Demo\n},\n\n...OTHER_CODE...\n```\n\n앱 실행\n\n```sh\nyarn serve\n```\n\n방법 2:\n\n리포지토리를 복제하여 애플리케이션을 시작한 경우이 단계를 완료하려면 6 단계로 전환하면됩니다.\n\n```sh\ngit checkout step-6\nyarn serve\n```\n\n결과적으로 브라우저에이 사진이 표시됩니다\n\n![screen5](../images/build-iot-dapps/screen5.png)\n\n이것으로 강의를 마칩니다.\n\n감사합니다!"}},"context":{}}