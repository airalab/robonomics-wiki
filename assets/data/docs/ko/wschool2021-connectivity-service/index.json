{"hash":"637194b5315c1e764231dd4d3b40843592f34aa5","data":{"doc":{"id":"7f1bd342f1445f762b8a5601808bccb2","title":"5과, 연결성","description":"","contributors":["vourhey","arinaml"],"translated":true,"headings":[],"subtitles":[{"depth":2,"value":"다중 파이로 IOT","anchor":"#다중-파이로-iot"},{"depth":2,"value":"장치 소프트웨어","anchor":"#장치-소프트웨어"},{"depth":2,"value":"연결성이 무엇인가?","anchor":"#연결성이-무엇인가"},{"depth":2,"value":"AWS와 Robonomics 연결성의 비교","anchor":"#aws와-robonomics-연결성의-비교"},{"depth":2,"value":"연결성 ON AIRA 설치하기","anchor":"#연결성-on-aira-설치하기"},{"depth":3,"value":"요구 사항","anchor":"#요구-사항"},{"depth":2,"value":"센서를 연결성에 연결","anchor":"#센서를-연결성에-연결"},{"depth":3,"value":"요구 사항","anchor":"#요구-사항-1"},{"depth":2,"value":"연습","anchor":"#연습"},{"depth":3,"value":"Trajectory 1. 플래시 센서 ESP + SDS011","anchor":"#trajectory-1-플래시-센서-esp--sds011"},{"depth":3,"value":"Trajectory 2. 연결성 시작","anchor":"#trajectory-2-연결성-시작"}],"content":"\n## 다중 파이로 IOT\n\n* 장치 소프트웨어\n    * FreeRTOS\n    * ESP/Arduino\n    * 싱글 보드 컴퓨터 (RPi, LattePanda 등)\n* 연결성\n    * IoT Hub\n    * IoT 매니저\n* 분석 서비스\n    * AWS\n    * Google Cloud IoT Core\n    * ThingsBoard\n\n일반적으로 대부분은 센서와 서버에 관심이 없지만 데이터 분석에 관심이 있습니다.\n이를 얻으려면 사용할 장치, 작업 방법 및 연결할 위치를 결정해야합니다.\n\n## 장치 소프트웨어\n\n가정용 기상 관측소의 예를 고려하십시오. 대기 오염 (SDS011), 온도 및 습도 (BME)에 대한 데이터 수집이 필요합니다. ESP8266 마이크로 컨트롤러는이 작업을 처리 할 수 있습니다.\n\n요구 사항 :\n\n* 올바르게 센서로부터 데이터를 받기\n* 고유 식별자가 있슴\n* 알려진 서버로 데이터 전송\n* 데이터의 디지털 서명 제공 (선택 사항)\n\n[여기에서](https://github.com/LoSk-p/sensors-software/tree/366b19bf447a5fc19220ef89eab0f2440f8db1c2) 현재 펌웨어를 찾을 수 있습니다.\n\n## 연결성이 무엇인가?\n\nIoT 세계에서 연결이란 다양한 IoT 장치를 인터넷에 연결하여 데이터를 전송하거나 장치를 제어하는 것을 말합니다.\n\n잘 알려진 아키텍처 솔루션은 크게 세 그룹으로 나눌 수 있습니다.\n\n* 분산전산망. 예를 들어, 장치는 메시 네트워크로 연결됩니다. 높은 하드웨어 요구 사항으로 인해 광역 네트워크에 적합하지 않습니다\n* 집중형망.예 : AWS. 단일 진입 점 및 연결 용이성을 제공하지만 서버 문제 발생시 장애 위험이 높습니다.\n* 하이브리드. 예를 들어, [Robonomics 연결성](https://github.com/airalab/sensors-connectivity) \"로컬\"네트워크에있는 장치에 대한 주소를 제공하고 분산 된 IPFS 메시지 채널에 데이터를 게시합니다. \n\n## AWS와 Robonomics 연결성의 비교\n\n| 관리 서비스              | AWS                                  |               Robonomics              \t|\n|---------------------\t|-----------------------------------\t|---------------------------------------\t|\n| 거래 유형               | 기술                                  | 기술 및 경제                             \t |\n| 보안                   | IT 회사 클라우드 제어                    | Polkadot 및 Ethereum                     |\n| 프로토콜            \t | HTTPS, MQTT                       \t | IPFS, Robonomics                        |\n| 생태계             \t  | 개인                           \t    | 공유                                \t   |\n| DeFi에  액세스          | 없음                                \t| 있음                                   \t|\n| 소송 비용               | 데이터 푸시-센서 당 $ 1-2                 | 데이터 푸시-$ 0                            |\n|                     \t| Shadow-월 $ 10                        | 디지털 트윈-거래 당 $ 0,01                  |\n\n## 연결성 ON AIRA 설치하기\n\nhttps://www.youtube.com/watch?v=JbBNMHAzJKM\n\n### 요구 사항\n\n* [VirtualBox 6.1 이상](https://www.virtualbox.org/wiki/Downloads) and above\n* [Aira OS ova 이미지](https://static.aira.life/ova/airaos-21.03_robonomics-winter-school.ova)\n\n[여기에](/docs/aira-installation-on-vb/)설명 된대로 VirtualBox에서 Aira 이미지 가져 오기\n\n[SSH](/docs/aira-connecting-via-ssh/)를 통한 연결 설정 \n\n모든 것이 설정되고 SSH를 통해 성공적으로 로그인되면 메인 패키지를 복제하고 빌드 해 보겠습니다.\n\n```\ngit clone https://github.com/airalab/sensors-connectivity\ncd sensors-connectivity\ngit checkout v0.9\nnix build -f release.nix\n```\n\n이제 나중에 사용할 수 있도록 기본 구성 파일의 복사본을 만들어 보겠습니다.\n모든 옵션에 대해 알아 보려면[이 기사를](/docs/configuration-options-description/)확인하십시오.\n그런 다음 `roslaunch`로 패키지를 시작합니다.\n\n```\ncp config/default.json config/my.json\nsource result/setup.zsh\nroslaunch sensors_connectivity agent.launch config:=$PWD/config/my.json\n```\n\n## 센서를 연결성에 연결\n\nhttps://www.youtube.com/watch?v=yxqxBk-6bpI\n\n### 요구 사항\n\n* [Nova SDS011 센서1](https://aqicn.org/sensor/sds011) sensor \n* [Yarn 패키지 매니저](https://yarnpkg.com/getting-started/install)\n\n이제 실제 센서를 연결하고 USB 포트를 가상 머신에 전달하고지도를 설정하고 자체 측정을 살펴 보겠습니다\n\n먼저 Aira OS가 실행 중이면 중지하고 해당 USB 장치를 추가하십시오\n\n![VB USB Forwarding](../images/vb_forward_usb.jpg)\n\nVM을 시작하고 SSH를 통해 연결 한 다음 VM의 USB 장치에 따라 `comstation/port` 옵션을 설정합니다. 또한 `comstation`을 활성화하고 위도와 경도를 설정하십시오. 결국 `config/my.json`은 다음과 같아야합니다.\n\n```\n{\n   \"general\":{\n      \"publish_interval\":30\n   },\n   \"comstation\":{\n      \"enable\":true,\n      \"port\":\"/dev/ttyUSB0\",\n      \"work_period\":0,\n      \"geo\":\"59.944917,30.294558\",\n      \"public_key\":\"\"\n   },\n   \"httpstation\":{\n      \"enable\":false,\n      \"port\":8001\n   },\n   \"mqttstation\": {\n      \"enable\": false,\n      \"host\": \"connectivity.robonomics.network\",\n      \"port\": 1883\n   },\n   \"luftdaten\":{\n      \"enable\":false\n   },\n   \"robonomics\":{\n      \"enable\":true,\n      \"ipfs_provider\":\"/ip4/127.0.0.1/tcp/5001/http\",\n      \"ipfs_topic\":\"airalab.lighthouse.5.robonomics.eth\"\n   },\n   \"datalog\":{\n      \"enable\":false,\n      \"path\":\"\",\n      \"suri\":\"\",\n      \"remote\":\"wss://substrate.ipci.io\",\n      \"dump_interval\":3600,\n      \"temporal_username\":\"\",\n      \"temporal_password\":\"\"\n   },\n   \"dev\":{\n      \"sentry\":\"\"\n   }\n}\n```\n\n> 실제 센서가없는 경우 `sensors-connectivity/utils/virtual-sensor.py` 스크립트를 사용하여 하나를 에뮬레이션 할 수 있습니다\n> \n> 구성 파일을 다음과 같이 변경하여 `HTTPStation`을 활성화하고 `COMStation`을 비활성화합니다 :\n> ```\n> {\n>    \"general\":{\n>       \"publish_interval\":30\n>    },\n>    \"comstation\":{\n>       \"enable\":false,\n>       \"port\":\"/dev/ttyUSB0\",\n>       \"work_period\":0,\n>       \"geo\":\"59.944917,30.294558\",\n>       \"public_key\":\"\"\n>    },\n>    \"httpstation\":{\n>       \"enable\":true,\n>       \"port\":8001\n>    },\n>    ...\n> }\n> ```\n>\n> VM의 전용 터미널에서 `utils/virtual-sensor.py` 실행\n\n파일을 저장하고`sensors-connectivity` 폴더에서 연결을 시작합니다.\n\n```\nsource result/setup.zsh\nroslaunch sensors_connectivity agent.launch config:=$PWD/config/my.json\n```\n\n콘솔 출력에 첫 번째 측정이 표시되어야합니다.\n\nVM에서 IPFS ID를 찾으십시오. 이미지를 부팅 한 직후 또는 `ipfs id` 명령을 통해 나타납니다. 나중에 필요합니다.\n\n이제 맵의 자체 인스턴스를 설정하겠습니다. VM이 아닌 노트북에서이 [저장소를 복제하고](https://github.com/airalab/sensors.robonomics.network) 앱을 빌드합니다.\n\n```\ngit clone https://github.com/airalab/sensors.robonomics.network\ncd sensors.robonomics.network\nyarn install\n```\n\n`src/agents.json` 파일을 편집하고 IPFS ID를 입력하십시오. 예를 들면\n\n```\n[\n  \"12D3KooWSCFAD3Lpew1HijniE6oFTuo4jsMwHzF87wNnXkpCRYWn\"\n]\n```\n\nmap 시작 :\n\n```\nyarn serve\n```\n\n[http://localhost:8080/](http://localhost:8080/) 또는 yarn이 제공한 주소로 이동하여 센서를 찾으십시오. \n\n## 연습\n\n### Trajectory 1. 플래시 센서 ESP + SDS011\n\n요구 사항 :\n\n* ESP8266\n* 센서 SDS011, BME280, HTU21D 중 하나 이상\n\n[지침을](https://wiki.robonomics.network/docs/connect-sensor-to-robonomics/) 사용하여 센서를 Robonomics Connectivity에 연결합니다.  \n\n센서가 [매프에 ](https://sensors.robonomics.network/#/)나타나는지 확인하십시오.\n\n### Trajectory 2. 연결성 시작\n\n요구 사항 :\n\n* ROS\n* Python\n* Nix (선택 과목)\n\n[센서 연결 구축 및 실행](https://github.com/airalab/sensors-connectivity#get-a-package-and-build)\n\n> 빌드, [설치](https://wiki.robonomics.network/docs/iot-sensors-connectivity/) 및 [구성하](https://wiki.robonomics.network/docs/configuration-options-description/)는 방법. \n\n패키지의 일반 계획 :\n\n```\n    station1 \\                        / feeder1\n    station2 -  sensors-connectivity  - feeder2\n    station3 /                        \\ feeder3\n```\n\n예를 들어 난수 생성기와 같은 새로운 스테이션을 구현하거나, 예를 들어 화면에 문자열을 표시하는 새 피더를 구현하기 위해 선택이 제안됩니다.\n\n`IStation` 인터페이스 [여기](https://github.com/airalab/sensors-connectivity/blob/master/src/stations/istation.py#L73).\n\n`IFeeder` 인터페이스 [여기](https://github.com/airalab/sensors-connectivity/blob/master/src/feeders/ifeeder.py#L5)","tools":[],"fileInfo":{"path":"ko/wschool2021-connectivity-service.md","name":"wschool2021-connectivity-service"}}},"context":{}}