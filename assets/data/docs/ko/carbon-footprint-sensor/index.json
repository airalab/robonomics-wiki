{"hash":"7990a580514d683a748e46921b940c710d0cb934","data":{"doc":{"id":"899f206a9c105cc06004d095e951018a","title":"센서 연결","description":"","contributors":["LoSk-p","makyul"],"headings":[],"subtitles":[{"depth":2,"value":"요구 사항","anchor":"#요구-사항"},{"depth":2,"value":"Zigbee 스틱","anchor":"#zigbee-스틱"},{"depth":2,"value":"설치","anchor":"#설치"},{"depth":2,"value":"구성","anchor":"#구성"},{"depth":2,"value":"플러그 연결","anchor":"#플러그-연결"},{"depth":2,"value":"페어링 후","anchor":"#페어링-후"},{"depth":2,"value":"실행","anchor":"#실행"}],"content":"\n작업 예시는 동영상에 있습니다:\n\nhttps://youtu.be/jsaFCVAx2sA\n\n## 요구 사항\n\n* [Aqara 스마트 플러그](https://aqara.ru/product/aqara-smart-plug/?yclid=462434430312045270)\n* 라즈베리 파이\n* Zigbee 어댑터 [JetHome USB JetStick Z2](https://jhome.ru/catalog/parts/PCBA/293/) (또는 [지원되는](https://www.zigbee2mqtt.io/information/supported_adapters.html) 어댑터 중 하나)\n\n서비스는 라즈베리 파이에서 실행되며 zigbee 프로토콜을 통해 스마트 플러그와 통신합니다.\n\n## Zigbee 스틱\n\nJetHome USB JetStick Z2를 가지고 있다면 이미 필요한 펌웨어가 있으므로 플래시 할 필요가 없습니다. 그러나 다른 어댑터를 가지고 있다면 먼저 zigbee2MQTT 소프트웨어로 플래시해야 합니다. 당신의 장치에 대한 지침은 [여기](https://www.zigbee2mqtt.io/information/supported_adapters.html)에서 찾을 수 있습니다.\n\n어댑터를 연결하고 어댑터 주소를 확인하세요 (또는 `/dev/ttyUSB1`일 수도 있음):\n```bash\n$ ls -l /dev/ttyUSB0\ncrw-rw---- 1 root dialout 166, 0 May 16 19:15 /dev/ttyUSB0 \n```\n\n먼저 USB 포트에 액세스해야 할 수도 있습니다. 사용자를 `dialout` 그룹에 추가하세요 (ubuntu에서 작동하지만 다른 OS에서는 그룹 이름이 다를 수 있음).\nubuntu의 경우:\n```bash\nsudo usermod -a -G dialout $USER\n```\narch의 경우:\n```bash\nsudo usermod -a -G uucp $USER\n```\n그런 다음 로그아웃하고 로그인하거나 컴퓨터를 다시 시작하세요.\n\n## 설치\n\n저장소를 복제하세요:\n\n```\ngit clone https://github.com/makyul/robonomics-carbon-footprint.git\ncd robonomics-carbon-footprint\n```\n\n## 구성\n\n`data/configuration.yaml`로 이동하고 `permit_join: true`로 설정하세요:\n\n```\n# Home Assistant integration (MQTT discovery)\nhomeassistant: false\n\n# allow new devices to join\npermit_join: true\n\n# MQTT settings\nmqtt:\n  # MQTT base topic for zigbee2mqtt MQTT messages\n  base_topic: zigbee2mqtt\n  # MQTT server URL\n  server: 'mqtt://172.17.0.1'\n  # MQTT server authentication, uncomment if required:\n  # user: my_user\n  # password: my_password\n\n# Serial settings\nserial:\n  # Location of CC2531 USB sniffer\n  port: /dev/ttyUSB0\n```\n또한 `server` 필드와 `port` 필드를 해당 정보로 채우고 연결을 설정할 수 있습니다. `server` 필드에서는 `docker0` 브리지의 IP를 사용하세요: \n\n```bash\n$ ip a                                                 127\n1: lo: <LOOPBACK,UP,LOWER_UP> mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000\n    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00\n\n...\n\n5: docker0: <NO-CARRIER,BROADCAST,MULTICAST,UP> mtu 1500 qdisc noqueue state DOWN group default \n    link/ether 02:42:0d:ff:5f:a3 brd ff:ff:ff:ff:ff:ff\n    inet 172.17.0.1/16 brd 172.17.255.255 scope global docker0\n       valid_lft forever preferred_lft forever\n    inet6 fe80::42:dff:feff:5fa3/64 scope link \n       valid_lft forever preferred_lft forever\n```\n여기에서 주소는 `172.17.0.1`입니다.\n\n그런 다음 다음 정보를 포함하는 파일 config/config.yaml을 생성하고 위치를 설정하세요 (3자리 ISO 코드에 대한 정보는 https://countrycode.org/에서 찾을 수 있습니다):\n\n```\nlocation: RUS\nservice_address: 4GdHeLbmio2noKCQM5mfxswXfPoW2PcbpYKKkM4NQiqSqJMd\ntwin_id: 5\nsending_timeout: 3600\nbroker_address: \"172.17.0.1\"\nbroker_port: 1883\n```\n\n## 플러그 연결\n\n첫 실행:\n\n```\ndocker-compose up     \n```\n\n플러그의 페어링 모드로 전환하려면 전원 버튼을 길게 눌러 파란색 빠르게 깜박이는 빛이 나타날 때까지 몇 초 동안 누르세요. \n\n로그에서 이제 플러그가 mqtt로 게시되기 시작한 것을 볼 수 있어야 합니다. \n\n\n## 페어링 후\n\n다른 장치가 스틱과 페어링할 수 없도록 하려면 이제 `data/configuration.yaml`로 이동하고 `permit_join: false`로 설정하세요. 서비스를 다시 시작하세요 ('Ctrl+C'를 사용하여 변경  \n\n```bash\ndocker-compose up     \n```\n사항을 제출한 후 다시 시작).\n\n## 실행\n플러그에 대한 계정이 처음 시작할 때 생성됩니다. \n> 이미 계정이 있는 경우 `config.config.yaml` 파일의 `device_seed` 섹션에 시드를 추가해야 합니다:\n>\n> ```\n> location: RUS\n> service_address: 4GdHeLbmio2noKCQM5mfxswXfPoW2PcbpYKKkM4NQiqSqJMd\n> twin_id: 5\n> sending_timeout: 3600\n> broker_address: \"172.17.0.1\"\n> broker_port: 1883\n> device_seed: <device_seed>\n>```\n\n 계정을 생성한 후 로그에서 주소를 확인할 수 있습니다 (시드는 `config/config.yaml`에 추가됩니다):\n```\nplug               | Generated account with address: 4GuP82BMAgrbtU8GhnKhgzP827sJEaBXeMX38pZZKPSpcWeT\n```\n이 계정에 일부 토큰을 이체하여 거래 수수료를 지불해야 합니다. [Robonomics 포털](https://polkadot.js.org/apps/?rpc=wss%3A%2F%2Fkusama.rpc.robonomics.network%2F#/accounts)에서 이를 수행할 수 있습니다. \n\n서비스는 충분한 토큰이 있는 것을 인식하고 로그에서 다음과 같이 볼 수 있습니다:\n```\nplug               | Balance is OK\n```\n서비스는 플러그와 안전한 전력 사용으로부터 MQTT 메시지를 수신합니다. 매 시간마다(`config/config.yaml`의 `sending_timeout` 섹션에서 타임아웃을 변경할 수 있으며, 타임아웃은 초 단위로 설정됩니다) 다음 정보를 포함하는 데이터로그를 생성합니다:\n```\n{'geo': 'RUS', 'power_usage': 1.021237391233444, 'timestamp': 1644494860.5860083}\n```\n","tools":[],"fileInfo":{"path":"ko/carbon-footprint-sensor.md","name":"carbon-footprint-sensor"}}},"context":{}}