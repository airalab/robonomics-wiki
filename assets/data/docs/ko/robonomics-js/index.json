{"hash":"aead50ac73c745bb189e936e9792a96377a793bd","data":{"doc":{"id":"aafc80c2bd6acdacde60302e13dda3ee","title":"로노미크스-JS","description":"","cover_image":{"type":"image","mimeType":"image/png","src":"/assets/static/robonomics-js.0b85c65.89a9a8829df1b869bbe737b294fa073e.png","size":{"width":1920,"height":1080},"sizes":"(max-width: 1920px) 100vw, 1920px","srcset":["/assets/static/robonomics-js.1b91758.89a9a8829df1b869bbe737b294fa073e.png 480w","/assets/static/robonomics-js.3df3210.89a9a8829df1b869bbe737b294fa073e.png 1024w","/assets/static/robonomics-js.0b85c65.89a9a8829df1b869bbe737b294fa073e.png 1920w"],"dataUri":"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 1920 1080' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-549c4118e2a41e6744a4e6e891cd0c15'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='40'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-549c4118e2a41e6744a4e6e891cd0c15)' width='1920' height='1080' xlink:href='data:image/png%3bbase64%2ciVBORw0KGgoAAAANSUhEUgAAAEAAAAAkCAYAAAA5DDySAAAACXBIWXMAAAsSAAALEgHS3X78AAACiElEQVRo3u2YW2sTQRTH8xGkVn1QYxq1thrxBj75HXz0SXxSHxRRfLAoVm0Lqa2X3lRaFUQxktpWEIolsUZFxVJKFQXRXkiTNO7mttvdzcUkm787Q7pEGi/FIps4Bw7LnpNZMr/5z2HmmFZW1YB4pWUTKtZugNW2C5Isg5iqqlgqy%2bVyMKKZVmgTJ161ZecCAMT8gVlMTE3D6/Pj0%2bcv8PkDmPbOgONDmJicQmA2iCDHYTL/G6/Ph0g0qo8heUEQDQvBtNy8kU5%2b7779MNdsg2Xzjh8AOHr7cPzUGdy8cw8HDh1BV/ct1Dc1o6H5EuyX23G20Y7T55tQd64Rdx1OdNzowcDjQRw%2bdhIX7K1oudqJNyOj9FvZbNZ4ACrXVcNcux223XuwutoGiwajEMCcJOErx9MVJ6vJ8Tz4UBiCKCIQDCImCPk8j1A4ouVCkGUFkUgUYfoehiTJxlUA3f8ahApNCcvWrId1639YAwiEVdbaBTWA/Gniqjr/VPVY4bua99wv3NAKmPdiAMrdGAAGgAFgABgABoAB%2bDmAxXqxcYY%2bCS5GAYUTKnbM/V2%2bZBWQSqWQSCT1QclkEqI4h4T2VOJxGstkMnqeHJGJK0q8tBVAbHRsHHX1DXA/e44nrqe0P9B%2bvRutbV00d/FKB8bG38HZ/wjvP3zUYH2jt7%2bWtk56dSY3w5IG4Hn5CgePnoDb84JO9sHDAQy5h3Gt5zZevx2Bo7efxgaHXHANe2jsvrOPAiDgZvyBJb9Z/tMtkE6ndakTScfzkiddHtITkBWFbg/SNyBbgxjtCWjxaCxWXkXwT4pasZUu%2bSL4t152CmAnQQaAAWAAGAAGgAFgABgABoABYAAYgBK37wPewf2vUwH5AAAAAElFTkSuQmCC' /%3e%3c/svg%3e"},"contributors":["Vourhey","arinaml"],"translated":true,"headings":[],"subtitles":[{"depth":2,"value":"설치","anchor":"#설치"},{"depth":3,"value":"의존성","anchor":"#의존성"},{"depth":2,"value":"용법","anchor":"#용법"},{"depth":3,"value":"옵션","anchor":"#옵션"},{"depth":2,"value":"API","anchor":"#api"},{"depth":3,"value":"메시지","anchor":"#메시지"},{"depth":4,"value":"수요","anchor":"#수요"},{"depth":4,"value":"공급","anchor":"#공급"},{"depth":4,"value":"결과","anchor":"#결과"},{"depth":3,"value":"스마트 계약","anchor":"#스마트-계약"},{"depth":4,"value":"책임","anchor":"#책임"},{"depth":4,"value":"등대","anchor":"#등대"},{"depth":5,"value":"새로운 등대 창조","anchor":"#새로운-등대-창조"},{"depth":5,"value":"공급자되기","anchor":"#공급자되기"},{"depth":4,"value":"토큰","anchor":"#토큰"},{"depth":5,"value":"균형 확인","anchor":"#균형-확인"},{"depth":5,"value":"허용량 확인","anchor":"#허용량-확인"},{"depth":5,"value":"승인","anchor":"#승인"},{"depth":2,"value":"링크","anchor":"#링크"}],"content":"\n[Robonomics-js](https://github.com/airalab/robonomics-js) 는 Robonomics 네트워크 작업을위한 간단한 자바 스크립트 라이브러리입니다.\n\n## 설치\n\n```\nnpm install robonomics-js --save\n```\n\n또는/나\n\n```\nyarn add robonomics-js\n```\n\n### 의존성\n\n* [Web3](https://github.com/ethereum/web3.js/) 버전 1.2.4\n* [Ipfs](https://github.com/ipfs/js-ipfs) 버전 0.34.0\n\n\n## 용법\n\nRobonomics 인스턴스를 만듦\n\n```JavaScript\nconst options = {...};\nconst robonomics = new Robonomics(options);\n```\n\n### 옵션\n\n속성의 대상 :\n\n```\noptions.web3\n```\n\n[web3.js](https://github.com/ethereum/web3.js/)인스턴스 :\n\n```JavaScript\n// metamask\nconst options = {\n  web3: new Web3(window.ethereum),\n  ...\n};\n\n// infura\nconst options = {\n  web3: new Web3(\n    new Web3.providers.WebsocketProvider(\n      \"wss://mainnet.infura.io/ws/v3/0b2f2a5026264b57b6d698b480332e89\"\n    )\n  ),\n  ...\n};\n```\n\n```\noptions.messageProvider\n```\n\npubsub 지원과 함께 [js-ipfs](https://github.com/ipfs/js-ipfs) 노드를 사용하는 MessageProviderIpfs의 인스턴스입니다 \n\n```JavaScript\nconst ipfs = new Ipfs({\n  repo: 'robonomics-example',\n  relay: {\n    enabled: true,\n    hop: {\n      enabled: true\n    }\n  },\n  EXPERIMENTAL: {\n    pubsub: true\n  },\n  config: {\n    Addresses: {\n      Swarm: [\n        '/dns4/ws-star.discovery.libp2p.io/tcp/443/wss/p2p-websocket-star',\n        '/dns4/1.wsstar.aira.life/tcp/443/wss/p2p-websocket-star/',\n        '/dns4/2.wsstar.aira.life/tcp/443/wss/p2p-websocket-star/',\n        '/dns4/3.wsstar.aira.life/tcp/443/wss/p2p-websocket-star/'\n      ]\n    },\n    Bootstrap: [\n      '/dns4/ams-1.bootstrap.libp2p.io/tcp/443/wss/ipfs/QmSoLer265NRgSp2LA3dPaeykiS1J6DifTC88f5uVQKNAd',\n      '/dns4/lon-1.bootstrap.libp2p.io/tcp/443/wss/ipfs/QmSoLMeWqB7YGVLJN3pNLQpmmEk35v6wYtsMGLzSr5QBU3',\n      '/dns4/nyc-1.bootstrap.libp2p.io/tcp/443/wss/ipfs/QmSoLueR4xBeUbY9WZ9xGUUxunbKWcrNFTDAadQJmocnWm',\n      '/dns4/nyc-2.bootstrap.libp2p.io/tcp/443/wss/ipfs/QmSoLV4Bbm51jM9C4gDYZQ9Cy3U6aXMJDAbzgu2fzaDs64',\n      '/dns4/node0.preload.ipfs.io/tcp/443/wss/ipfs/QmZMxNdpMkewiVZLMRxaNxUeZpDUb34pWjZ1kZvsd16Zic',\n      '/dns4/node1.preload.ipfs.io/tcp/443/wss/ipfs/Qmbut9Ywz9YEDrz8ySBSgWyJk41Uvm2QJPhwDJzJyGFsD6',\n      '/dns4/1.pubsub.aira.life/tcp/443/wss/ipfs/QmdfQmbmXt6sqjZyowxPUsmvBsgSGQjm4VXrV7WGy62dv8',\n      '/dns4/2.pubsub.aira.life/tcp/443/wss/ipfs/QmPTFt7GJ2MfDuVYwJJTULr6EnsQtGVp8ahYn9NSyoxmd9',\n      '/dns4/3.pubsub.aira.life/tcp/443/wss/ipfs/QmWZSKTEQQ985mnNzMqhGCrwQ1aTA6sxVsorsycQz9cQrw'\n    ]\n  }\n})\n\nconst options = {\n  messageProvider: new MessageProviderIpfs(ipfs),\n  ...\n};\n```\n\n```\noptions.account\n```\n\n이것은 메시지에 서명하는 데 사용되는 계정 개체입니다. 계정 주소 (잠금 해제해야 함) 또는 개인 키 (주어진 개인 키에서 주소가 복구 됨)를 지정해야합니다.\n\n옵션 `isSignPrefix`는 접두어를 추가해야하는지 여부를 알려줍니다. 디폴트 `true`입니다.\n\n```JavaScript\nconst options = {\n  account: {\n    address: '0x0000000000000000000000000000000000000000',\n    privateKey: '0x0000000000000000000000000000000000000000000000000000',\n    isSignPrefix: true\n  },\n  ...\n};\n```\n\n```\noptions.ens\n```\n\n이것은 `ens`계약 객체입니다. 이것은 필수가 아닙니다. 필요한 경우 네트워크가 메인 넷으로 설정되지 않은 경우 계약의 `address`를 지정할 수 있습니다. `suffix`는 사이드 체인의 경우 `sid`, 메인 넷의 경우 `eth`일 수 있습니다. `eth`가 디폴트입니다. `version`은 Robonomics Network의 버전입니다. 디폴트는 배포된 최신 버전입니다.\n\n```JavaScript\nconst options = {\n  ens: {\n    address: '0x314159265dD8dbb310642f98f50C066173C1259b',\n    suffix: 'eth',\n    version: 5\n  },\n  ...\n};\n```\n\n```\noptions.lighthouse\n```\n\n등대의 ENS 이름이며 필요하지 않습니다. 디폴트는 `airalab.lighthouse.5.robonomics.eth`입니다. `airalab`과 같이 이름의 첫부분 만 지정할수 있습니다.\n\n```JavaScript\nconst options = {\n  lighthouse: 'airalab.lighthouse.5.robonomics.eth',\n  ...\n};\n```\n\n전체 초기화가 될때까지 기다려야합니다\n\n```JavaScript\nconst options = {...};\nconst robonomics = new Robonomics(options);\nrobonomics.ready().then(() => {\n  console.log('Robonomics instance ready')\n})\n```\n\n## API\n\n### 메시지\n\n#### 수요\n\n메시지 사양\n\n```JavaScript\nconst demand = {\n  // REQUIRED\n  model: \"QmSt69qQqGka1qwRRHbdmAWk4nCbsV1mqJwd8cWbEyhf1M\",      // ipfs hash of the model \n  objective: \"QmSt69qQqGka1qwRRHbdmAWk4nCbsV1mqJwd8cWbEyhf2M\",  // ipfs hash of the objective\n  token: robonomics.xrt.address,                                // payment token address\n  cost: 1,                                                      // cost\n  deadline: 9999999,                                            // until which block demand is valid\n\n  // NOT REQUIRED \n  lighthouse: \"0x0000000000000000000000000000000000000000\",     // lighthouse address, by default the initialization address\n  validator: \"0x0000000000000000000000000000000000000000\",      // validator address if necessary\n  validatorFee: 0,                                              // validator fee \n  nonce: 1                                                      // index number \n};\n```\n\n`robonomics.sendDemand`\n\n수요 메시지에 서명하고 브로드캐스팅합니다. 책임은 약속으로 반환됩니다\n\n```JavaScript\nrobonomics.sendDemand(demand).then(liability => {\n  console.log(liability.address);\n});\n```\n\n`robonomics.onDemand`\n\n정의된 모델로 수요 메시지를 수신합니다. 모델이 null이면 모든 수요 메시지를 반환합니다.\n\n```JavaScript\nrobonomics.onDemand(model, message => {\n  console.log(message);\n});\n```\n\n#### 공급\n\n메시지 사양\n\n```JavaScript\nconst offer = {\n  // REQUIRED \n  model: \"QmSt69qQqGka1qwRRHbdmAWk4nCbsV1mqJwd8cWbEyhf1M\",      // ipfs hash of the model \n  objective: \"QmSt69qQqGka1qwRRHbdmAWk4nCbsV1mqJwd8cWbEyhf2M\",  // ipfs hash of the objective\n  token: robonomics.xrt.address,                                // payment token address\n  cost: 1,                                                      // cost \n  deadline: 9999999,                                            // until which block demand is valid\n\n  // NOT REQUIRED\n  lighthouse: \"0x0000000000000000000000000000000000000000\",     // lighthouse address, by default the initialization address\n  lighthouseFee: 0,                                             // lighthouse fee\n  validator: \"0x0000000000000000000000000000000000000000\",      // validator address if necessary\n  nonce: 1                                                      // index number \n};\n```\n\n`robonomics.sendOffer`\n\n공급 메시지에 서명하고 브로드캐스팅합니다. 책임은 약속으로 반환됩니다\n\n```JavaScript\nrobonomics.sendOffer(offer).then(liability => {\n  console.log(liability.address);\n});\n```\n\n`robonomics.onOffer`\n\n정의된 모델로 공급 메시지를 수신합니다. 모델이 `null`이면 모든 공급 메시지를 반환합니다\n\n```JavaScript\nrobonomics.onOffer(model, message => {\n  console.log(message);\n});\n```\n\n#### 결과\n\n메시지 사양\n\n```JavaScript\nconst result = {\n  // REQUIRED \n  liability: \"0x0000000000000000000000000000000000000000\",  // liability contract address\n  success: true,                                            // status of the task\n  result: \"QmWXk8D1Fh5XFJvBodcWbwgyw9htjc6FJg8qi1YYEoPnrg\"  // ipfs hash of the rosbag log file\n};\n```\n\n`robonomics.sendResult`\n\n결과 메시지에 서명하고 브로드캐스팅합니다\n\n```JavaScript\nrobonomics.sendResult(result).then(() => {\n  console.log(\"ok\");\n});\n```\n\n`robonomics.onResult`\n\n결과 메시지를 수신합니다. 이 결과는 유효하지 않을 수 있습니다. 유효한 결과는 책임 계약에 저장됩니다\n\n```JavaScript\nrobonomics.onResult(result => {\n  console.log(result);\n});\n```\n\n### 스마트 계약\n\n#### 책임\n\n`liability.getInfo`\n\n계약의 속성 개체 반환합니다\n\n```JavaScript\nliability.getInfo().then(data => {\n  console.log(data);\n  /*\n  {\n    model,\n    objective,\n    result,\n    token,\n    cost,\n    lighthouseFee,\n    validatorFee,\n    demandHash,\n    offerHash,\n    promisor,\n    promisee,\n    lighthouse,\n    validator,\n    isSuccess,\n    isFinalized\n  }\n  */\n});\n```\n\n`liability.onResult`\n\n책임이 끝날 때까지 기다립니다. 결과를 반환합니다\n\n```JavaScript\nliability.onResult().then(result => {\n  console.log(result);\n});\n```\n\n#### 등대\n\n`robonomics.lighthouse.getInfo`\n\n계약의 속성 개체 반환합니다\n\n```JavaScript\nrobonomics.lighthouse.getInfo().then(data => {\n  console.log(data);\n  /*\n  {\n    minimalStake,\n    timeoutInBlocks,\n    keepAliveBlock,\n    marker,\n    quota\n  }\n  */\n});\n```\n\n`robonomics.lighthouse.getProviders`\n\n등대에있는 공급자 목록을 반환합니다\n\n```JavaScript\nrobonomics.lighthouse.getProviders().then(list => {\n  console.log(list);\n});\n```\n\n##### 새로운 등대 창조\n\n```JavaScript\nconst minimalFreeze = 1000      // Wn\nconst timeout = 25              // blocks\nconst name = 'mylighthouse'     // lighthouse name\nrobonomics.factory.methods.createLighthouse(minimalFreeze, timeout, name).send({ from: robonomics.account.address })\n    .then((tx) => console.log(tx))\n\nrobonomics.factory.onLighthouse((lighthouse) => {\n    console.log(lighthouse.name)\n})\n```\n\n##### 공급자되기\n\n사전에 `XRT`토큰에 대해 `approve`를 호출해야합니다.\n\n```JavaScript\nconst name = \"mylighthouse\";    // lighthouse name\nconst stake = 1000;             // Wn\nrobonomics.lighthouse.methods\n  .refill(stake)\n  .send({ from: robonomics.account.address })\n  .then(tx => console.log(tx));\n```\n\n#### 토큰\n\n`robonomics.xrt.getInfo`\n\n토큰의 속성 개체 반환합니다\n\n```JavaScript\nrobonomics.xrt.getInfo().then(data => {\n  console.log(data);\n  /*\n  {\n    name,\n    totalSupply,\n    decimals,\n    symbol\n  }\n  */\n});\n```\n\n##### 균형 확인\n\n```JavaScript\nrobonomics.xrt.methods\n  .balanceOf(robonomics.account.address)\n  .call()\n  .then(balance => console.log(balance));\n```\n\n##### 허용량 확인\n\n```JavaScript\nrobonomics.xrt.methods\n  .allowance(robonomics.account.address, robonomics.factory.address)\n  .call()\n  .then(allowance => console.log(allowance));\n```\n\n##### 승인\n\n```JavaScript\nrobonomics.xrt.methods\n  .approve(robonomics.lighthouse.address, 100)\n  .send({\n    from: robonomics.account.address\n  })\n  .then(tx => console.log(tx));\n```\n\n## 링크\n\n- [Website](https://robonomics.network/)\n- [Minimal template of dApp](https://github.com/airalab/vue-dapp-robonomics-template)\n- [dApp example](https://codesandbox.io/s/robonomics-vue-template-ewuiw)"}},"context":{}}