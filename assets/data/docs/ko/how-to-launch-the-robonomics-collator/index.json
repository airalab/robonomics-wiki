{"hash":"dde37335f94693e5e93177d1e4e5fb502f1d4f29","data":{"doc":{"id":"75916d0c7d87f689264e9c0544a7f5b6","title":"로보노믹스 콜레이터를 시작하는 방법","description":"","contributors":["dergudzon","Leemo94"],"headings":[],"subtitles":[{"depth":2,"value":"콜레이터란 무엇인가요","anchor":"#콜레이터란-무엇인가요"},{"depth":2,"value":"요구 사항","anchor":"#요구-사항"},{"depth":2,"value":"중요한 정보","anchor":"#중요한-정보"},{"depth":2,"value":"로보노믹스 콜레이터를 쉽게 시작하기","anchor":"#로보노믹스-콜레이터를-쉽게-시작하기"},{"depth":2,"value":"로보노믹스 콜레이터를 서비스로 시작하기","anchor":"#로보노믹스-콜레이터를-서비스로-시작하기"},{"depth":2,"value":"Kusama 스냅샷을 사용하여 동기화 프로세스 가속화","anchor":"#kusama-스냅샷을-사용하여-동기화-프로세스-가속화"},{"depth":2,"value":"문제 해결","anchor":"#문제-해결"},{"depth":3,"value":"오류: \"State Database error: Too many sibling blocks inserted\"","anchor":"#오류-state-database-error-too-many-sibling-blocks-inserted"},{"depth":3,"value":"오류: \"cannot create module: compilation settings are not compatible with the native host\"","anchor":"#오류-cannot-create-module-compilation-settings-are-not-compatible-with-the-native-host"}],"content":"\n<robo-wiki-note type=\"note\" title=\"Note\">\n  이 문서의 스크린 캐스트와 스크린샷에서는 Robonomics의 버전 1.4.0을 사용했습니다. 동일한 명령을 사용하지만 Robonomics의 버전을 현재 버전으로 바꿔야 합니다.\n</robo-wiki-note>\n\nhttps://youtu.be/wUTDDLDbzTg\n\n현재 로보노믹스 네트워크는 주로 초기 개발자들에 의해 유지되고 있지만, 누구나 프로젝트를 지원할 수 있습니다. 블록체인의 추가적인 전체 노드는 블록체인이 더욱 지속 가능하고 장애 허용성이 높아지도 도와줍니다. 로보노믹스 노드 이진 파일은 [릴리즈](https://github.com/airalab/robonomics/releases) 자산에서 사용할 수 있거나 [소스에서 빌드](/docs/how-to-build-collator-node/)할 수 있습니다.\n\n## 콜레이터란 무엇인가요\n\n콜레이터는 로보노믹스 파라체인의 일부입니다. 이 유형의 노드는 로보노믹스 체인을 위해 새로운 블록을 생성합니다.\n\n>콜레이터는 사용자로부터 파라체인 트랜잭션을 수집하고 Relay Chain 검증자를 위해 상태 전이 증명을 생성하여 파라체인을 유지합니다. 다시 말해, 콜레이터는 파라체인 트랜잭션을 파라체인 블록 후보로 집계하고 해당 블록을 기반으로 검증자를 위한 상태 전이 증명을 생성하여 파라체인을 유지합니다.\n\n관련된 [Polkadot 위키 페이지](https://wiki.polkadot.network/docs/learn-collator)에서 콜레이터에 대해 더 자세히 알아볼 수 있습니다.\n\nRobonomics 파라체인에서 모든 대조자는 대조자가 구축하는 모든 블록에 대해 (**0.001598184 XRT**)의 보상을 받습니다(보상은 블록이 체인에 봉인될 때 발생합니다).\n또한 블록을 구축하는 콜레이터는 생성한 블록에 포함된 **거래 수수료의 50%**를 받습니다.\n\n## 요구 사항\n\n콜레이터를 시작할 때 [Polkadot 검증자](https://wiki.polkadot.network/docs/maintain-guides-how-to-validate-polkadot#standard-hardware)를 위한 **표준 하드웨어 요구 사항**을 사용하는 것이 좋습니다:\n+ x86-64 호환.\n+ Intel Ice Lake 또는 이후 (Xeon 또는 Core 시리즈); AMD Zen3 또는 이후 (EPYC 또는 Ryzen).\n+ 물리적인 코어 4개 @ 3.4GHz.\n+ 동시 멀티스레딩 비활성화 (Intel의 Hyper-Threading, AMD의 SMT).\n+ 저장소 - 1TB의 NVMe SSD (블록체인 성장을 처리하기에 적당한 크기여야 함).\n+ 메모리 - 32GB DDR4 ECC\n\n\n이 문서에서는 다음 사양을 사용합니:\n+ 4 vCPU\n+ 콜레이터의 데이터베이스에 700GB의 NVMe 공간. 이 디스크 공간을 확장할 수 있는 능력이 필요합니다.\n+ 8GB RAM\n\n\n## 중요한 정보\n1. 이 지침에서는 몇 가지 변수를 사용하며, 모든 명령에서 자체 값을 대체해야 합니다:\n    + **%NODE_NAME%**은 노드 이름입니다. 예: *my-robonomics-kusama-collator*\n    + **%BASE_PATH%**는 마운트된 볼륨의 경로입니다. 예: */mnt/HC_Volume_16056435/*\n    + **%POLKADOT_ACCOUNT_ADDRESS%**는 Polkadot 생태계의 SS58 형식의 계정 주소입니다. 예: *4Gp3QpacQhp4ZReGhJ47pzExQiwoNPgqTWYqEQca9XAvrYsu*\n\n2. 콜레이터의 서비스 시작에 *--state-cache-size=0*를 포함해야 합니다. 이 매개변수는 콜레이터의 안정성에 중요합니다.\n관련된 [이슈](https://github.com/airalab/robonomics/issues/234)에서 더 많은 정보를 볼 수 있습니다.\n\n## 로보노믹스 콜레이터를 쉽게 시작하기\n\n명령줄에서 직접 콜레이터를 시작하여 오류를 확인할 수 있습니다.\n이 작업을 수행한 후 로보노믹스 콜레이터를 서비스로 시작하는 것이 강력히 권장됩니다 (다음 단계 참조).\n\n```\nroot@robokusama-collator-screencast:~# robonomics \\\n  --parachain-id=2048 \\\n  --name=\"%NODE_NAME%\" \\\n  --validator \\\n  --lighthouse-account=\"%POLKADOT_ACCOUNT_ADDRESS%\" \\\n  --telemetry-url=\"wss://telemetry.parachain.robonomics.network/submit/ 0\" \\\n  --base-path=\"%BASE_PATH%\" \\\n  --state-cache-size=0 \\\n  -- \\\n  --database=RocksDb \n```\n\n\n## 로보노믹스 콜레이터를 서비스로 시작하기\n\n1. 홈 디렉토리를 가진 서비스용 사용자를 생성합니다.\n    ```\n    root@robokusama-collator-screencast:~# useradd -m robonomics\n    ```\n\n2. 로보노믹스 진 파일을 다운로드하고 압축을 해제한 후 */usr/local/bin/* 디렉토리로 이동합니다. 이 섹션의 명령에서 *$ROBONOMICS_VERSION*을 현재 로보노믹스 버전으로 대체해야 합니다. 현재 버전은 [github의 Robonomics 저장소의 릴리즈 페이지](https://github.com/airalab/robonomics/releases)에서 확인할 수 있습니다.\n   ```\n   root@robokusama-collator-screencast:~# wget https://github.com/airalab/robonomics/releases/download/v$ROBONOMICS_VERSION/robonomics-$ROBONOMICS_VERSION-x86_64-unknown-linux-gnu.tar.gz\n   root@robokusama-collator-screencast:~# tar -xf robonomics-$ROBONOMICS_VERSION-x86_64-unknown-linux-gnu.tar.gz\n   root@robokusama-collator-screencast:~# mv robonomics /usr/local/bin/\n   ```\n   ![Download Robonomics 1.4.0 binary](../images/how-to-launch-the-robonomics-collator/wget_binary.png)\n\n\n3. *robonomics.service*라는 systemd 서비스 파일을 생성합니다.\n    ```\n    root@robokusama-collator-screencast:~# nano /etc/systemd/system/robonomics.service\n    ```\n\n    그리고 서비스 파일에 다음 줄을 추가합니다.\n    ```\n    [Unit]\n    Description=robonomics\n    After=network.target\n    \n    [Service]\n    User=robonomics\n    Group=robonomics\n    Type=simple\n    Restart=on-failure\n\n    ExecStart=/usr/local/bin/robonomics \\\n      --parachain-id=2048 \\\n      --name=\"%NODE_NAME%\" \\\n      --validator \\\n      --lighthouse-account=\"%POLKADOT_ACCOUNT_ADDRESS%\" \\\n      --telemetry-url=\"wss://telemetry.parachain.robonomics.network/submit/ 0\" \\\n      --base-path=\"%BASE_PATH%\" \\\n      --state-cache-size=0 \\\n      --execution=Wasm \\\n      -- \\\n      --database=RocksDb \\\n      --execution=Wasm\n\n    [Install]\n    WantedBy=multi-user.target\n    ```\n\n    ![Create Robonomics service file](../images/how-to-launch-the-robonomics-collator/nano_robonomics_service.png)\n\n\n    ```\n    root@robokusama-collator-screencast:~# chown -R robonomics:robonomics %BASE_PATH%\n    ```\n\n\n4. 이 파일을 저장한 후 서비스를 활성화하고 시작합니다.\n    ```\n    root@robokusama-collator-screencast:~# systemctl enable robonomics.service \n    root@robokusama-collator-screencast:~# systemctl start robonomics.service\n    ```\n\n텔레메트리 URL: https://telemetry.parachain.robonomics.network/#/Robonomics\n\nCollator 로그는 `journalctl -u robonomics.service -f`를 사용하여 모니터링할 수 있습니다.\n\nRobonomics collator가 시작되면 Kusama Relay Chain과 동기화되기 시작합니다. 이는 네트워크 속도 및 시스템 사양에 따라 상당한 시간이 걸릴 수 있으므로 Kusama 스냅샷을 다운로드하는 것이 좋습니다.\n\n\n## Kusama 스냅샷을 사용하여 동기화 프로세스 가속화\n\n로보노믹스 서비스를 생성하고 시작한 후에 즉시 이 작업을 수행하는 것이 좋습니다. 스냅샷 및 사용 지침에 대한 자세한 정보는 다음 페이지에서 확인할 수 있습니다: https://ksm-rocksdb.polkashots.io/\n\n지침:\n\n1. 로보노믹스 서비스를 중지하고 현재 Kusama 데이터베이스 디렉토리를 제거합니다.\n    ```\n    root@robokusama-collator-screencast:~# systemctl stop robonomics.service\n    root@robokusama-collator-screencast:~# rm -rf %BASE_PATH%/polkadot/chains/ksmcc3/db/\n    ```\n2. 실제 스냅샷을 다운로드하고 압축을 해제합니다.\n    ```\n    root@robokusama-collator-screencast:~# wget https://ksm-rocksdb.polkashots.io/snapshot -O kusama.RocksDb.tar.lz4\n    root@robokusama-collator-screencast:~# lz4 -c -d kusama.RocksDb.tar.lz4 | tar -x -C %BASE_PATH%/polkadot/chains/ksmcc3\n    ```\n    ![Download Kusama snapshot](../images/how-to-launch-the-robonomics-collator/wget_kusama_snapshot.png)\n\n    성공적으로 압축을 푼 후 다운로드한 아카이브를 제거할 수 있습니다.\n    ```\n    root@robokusama-collator-screencast:~# rm -v kusama.RocksDb.tar.lz4\n    ```\n\n3. 데이터베이스 폴더에 올바른 소유권을 설정합니다.\n    ```\n    root@robokusama-collator-screencast:~# chown -R robonomics:robonomics %BASE_PATH%/polkadot/chains/ksmcc3\n    ```\n4. 로보노믹스 서비스를 다시 시작합니다.\n    ```\n    root@robokusama-collator-screencast:~# systemctl start robonomics.service\n    ```\n5. 서비 로그를 확인합니다.\n    ```\n    root@robokusama-collator-screencast:~# journalctl -u robonomics.service -f\n    ```    \n    ![Check service logs](../images/how-to-launch-the-robonomics-collator/finish_journalctl.png)\n\n## 문제 해결\n### 오류: \"State Database error: Too many sibling blocks inserted\"\n이 오류를 수정하려면 보관 모드에서 대조기를 실행하면 됩니다.\n\n1) 먼저, 로보노믹스 서비스를 중지해야 합니다. \n    \n    root@robokusama-collator-screencast:~# systemctl stop robonomics.service\n    \n\n2) 그런 다음 서비스 파일의 파라체인 부분에 `--state-pruning=archive` 매개변수를 추가하십시오. 편집된 서비스 파일의 예시:\n    ```\n    [Unit]\n    Description=robonomics\n    After=network.target\n    \n    [Service]\n    User=robonomics\n    Group=robonomics\n    Type=simple\n    Restart=on-failure\n\n    ExecStart=/usr/local/bin/robonomics \\\n    --parachain-id=2048 \\\n    --name=\"%NODE_NAME%\" \\\n    --validator \\\n    --lighthouse-account=\"%POLKADOT_ACCOUNT_ADDRESS%\" \\\n    --telemetry-url=\"wss://telemetry.parachain.robonomics.network/submit/ 0\" \\\n    --base-path=\"%BASE_PATH%\" \\\n    --state-cache-size=0 \\\n    --execution=Wasm \\\n    --state-pruning=archive \\\n    -- \\\n    --database=RocksDb \\\n    --execution=Wasm \n\n    [Install]\n    WantedBy=multi-user.target\n    ```\n\n3) systemd 관리자 구성을 다시로드하십시오.\n    ```\n    root@robokusama-collator-screencast:~# systemctl daemon-reload\n    ```\n\n4) 기존의 파라체인 데이터베이스를 제거하십시오.\n    ```\n    root@robokusama-collator-screencast:~# rm -rf %BASE_PATH%/chains/robonomics/db/\n    ```\n\n5) 로보노믹스 서비스를 시작하십시오.\n    ```\n    root@robokusama-collator-screencast:~# systemctl start robonomics.service\n    ```\n\n    그 후에는 파라체인 데이터베이스의 동기화를 기다려야합니다.\n\n### 오류: \"cannot create module: compilation settings are not compatible with the native host\"\n이 오류는 가상화 매개변수와 관련이 있습니다. 에뮬레이션된 프로세서의 \"host-model\" 유형을 사용해야합니다. 이를 가상화 호스트에서 설정할 수 있습니다.\n\n그러나 호스팅에서 이 오류를 만나면 기술 지원에게 이 문제에 대해 문의해야합니다.\n","tools":["Ubuntu 22.04.1 https://releases.ubuntu.com/22.04/","Robonomics 2.6.0 https://github.com/airalab/robonomics"],"fileInfo":{"path":"ko/how-to-launch-the-robonomics-collator.md","name":"how-to-launch-the-robonomics-collator"}}},"context":{}}