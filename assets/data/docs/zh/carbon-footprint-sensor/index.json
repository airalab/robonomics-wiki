{"hash":"448caa13a6c2c9753fa72bcda71d6dba7a5bd610","data":{"doc":{"id":"a4d8b350effc8d2550450e69a06c2e40","title":"连接传感器","description":"","contributors":["LoSk-p","makyul"],"headings":[],"subtitles":[{"depth":2,"value":"要求","anchor":"#要求"},{"depth":2,"value":"Zigbee棒","anchor":"#zigbee棒"},{"depth":2,"value":"安装","anchor":"#安装"},{"depth":2,"value":"配置","anchor":"#配置"},{"depth":2,"value":"连接插头","anchor":"#连接插头"},{"depth":2,"value":"配对后","anchor":"#配对后"},{"depth":2,"value":"跑步","anchor":"#跑步"}],"content":"\n工作示例在视频中：\n\nhttps://youtu.be/jsaFCVAx2sA\n\n## 要求\n\n* [Aqara智能插座](https://aqara.ru/product/aqara-smart-plug/?yclid=462434430312045270)\n* Raspberry Pi\n* Zigbee adapter [JetHome USB JetStick Z2](https://jhome.ru/catalog/parts/PCBA/293/) (或其中之一 [支持](https://www.zigbee2mqtt.io/在部分中，超时是以秒为单位的，它将创建包含以下信息的数据日志：formation/supported_adapters.html))\n\n服务在 Raspberry Pi 上运行，并通过 zigbee 协议联系智能插头。\n\n## Zigbee棒\n\n如果您有JetHome USB JetStick Z2，则已经具备必要的固件，因您不需要刷新它。但是，如果您有另一个适配器，首先需要使用zigbee2MQTT软件刷新它。您可以在您的设备上找到说明 [这里](https://www.zigbee2mqtt.io/information/supported_adapters.html).\n\n连接适配器并验证适配器地址 (它也可能是 `/dev/ttyUSB1`):\n```bash\n$ ls -l /dev/ttyUSB0\ncrw-rw---- 1 root dialout 166, 0 May 16 19:15 /dev/ttyUSB0 \n```\n\n您可能需要先访问 USB 端口。 将您的用户添加到 `dialout` 组（在ubuntu上有效，但是在其他操作系统上组的名称可能不同）。\n\n对于ubuntu：\n```bash\nsudo usermod -a -G dialout $USER\n```\n对于arch：\n```bash\nsudo usermod -a -G uucp $USER\n```\n然后注销并登录或重新启动计算机。\n\n## 安装\n\n克隆存储库：\n\n```\ngit clone https://github.com/makyul/robonomics-carbon-footprint.git\ncd robonomics-carbon-footprint\n```\n\n## 配置\n\n转到 `data/configuration.yaml` 并设置 `permit_join: true`:\n\n```\n# Home Assistant integration (MQTT discovery)\nhomeassistant: false\n\n# allow new devices to join\npermit_join: true\n\n# MQTT settings\nmqtt:\n  # MQTT base topic for zigbee2mqtt MQTT messages\n  base_topic: zigbee2mqtt\n  # MQTT server URL\n  server: 'mqtt://172.17.0.1'\n  # MQTT server authentication, uncomment if required:\n  # user: my_user\n  # password: my_password\n\n# Serial settings\nserial:\n  # Location of CC2531 USB sniffer\n  port: /dev/ttyUSB0\n```\n此外，您可能想用相应的信息填充字段 `server` 和 `port`。 在 `server` 字段中使用 `docker0` 网桥的 IP 来建立连接：\n\n```bash\n$ ip a                                                 127\n1: lo: <LOOPBACK,UP,LOWER_UP> mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000\n    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00\n\n...\n\n5: docker0: <NO-CARRIER,BROADCAST,MULTICAST,UP> mtu 1500 qdisc noqueue state DOWN group default \n    link/ether 02:42:0d:ff:5f:a3 brd ff:ff:ff:ff:ff:ff\n    inet 172.17.0.1/16 brd 172.17.255.255 scope global docker0\n       valid_lft forever preferred_lft forever\n    inet6 fe80::42:dff:feff:5fa3/64 scope link \n       valid_lft forever preferred_lft forever\n```\n\n这里你的地址是 `172.17.0.1`。\n\n然后使用以下信息创建文件 config/config.yaml 并设置您的位置（您可以查找 https://countrycode.org/ 获取 3 个字母的 ISO 代码）：\n\n```\nlocation: RUS\nservice_address: 4GdHeLbmio2noKCQM5mfxswXfPoW2PcbpYKKkM4NQiqSqJMd\ntwin_id: 5\nsending_timeout: 3600\nbroker_address: \"172.17.0.1\"\nbroker_port: 1883\n```\n\n## 连接插头\n\n第一次运行：\n\n```\ndocker-compose up     \n```\n\n要切换到插头上的配对模式，请长按电源按钮几秒钟，直到指示灯开始快速闪烁蓝色。\n\n在日志中，您现在应该看到您的插件开始发布到 mqtt。 \n\n\n## 配对后\n\n如果您不想让其他设备与您的棒配对，现在您应该转到 `data/configuration.yaml` 并设置`permit_join: false`。 重新启动服务（使用 `Ctrl+C` 并\n\n```bash\ndocker-compose up     \n```\n再次提交更改）。\n\n## 跑步\n\n首次启动时，将创建该插件的帐户。\n> 如果您已经有一个帐户，则应将其种子添加到 `device_seed` 部分中的 `config.config.yaml`文件中：\n>\n> ```\n> location: RUS\n> service_address: 4GdHeLbmio2noKCQM5mfxswXfPoW2PcbpYKKkM4NQiqSqJMd\n> twin_id: 5\n> sending_timeout: 3600\n> broker_address: \"172.17.0.1\"\n> broker_port: 1883\n> device_seed: <device_seed>\n>```\n\n创建帐户后，您将在日志中看到地址（种子将添加到 `config/config.yaml`）:\n\n```\nplug               | Generated account with address: 4GuP82BMAgrbtU8GhnKhgzP827sJEaBXeMX38pZZKPSpcWeT\n```\n您需要向该账户转入一些代币作为交易费用，您可以在 [Robonomics Portal](https://polkadot.js.org/apps/?rpc=wss%3A%2F%2Fkusama.rpc.robonomics.network%2F#/accounts) 上进行. \n\n服务将看到您有足够的令牌，在日志中您将看到：\n```\nplug               | Balance is OK\n```\n服务将看到来自插头的 mqtt 消息和安全用电情况。 每小时（您可以在 `sending_timeout` 部分更改 `config/config.yaml` 中的超时，超时以秒为单位）它将创建包含以下信息的数据日志：\n\n```\n{'geo': 'RUS', 'power_usage': 1.021237391233444, 'timestamp': 1644494860.5860083}\n```\n","tools":[],"fileInfo":{"path":"zh/carbon-footprint-sensor.md","name":"carbon-footprint-sensor"}}},"context":{}}