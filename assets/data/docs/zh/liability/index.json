{"hash":"d85770fd775573aea0dbc0cab12307a58ec8883e","data":{"doc":{"id":"c57194f869f274dbf9c8aad19a86af84","title":"责任","description":"","contributors":["PaTara43"],"headings":[],"subtitles":[{"depth":2,"value":"理论概述","anchor":"#理论概述"},{"depth":3,"value":"谈判","anchor":"#谈判"},{"depth":3,"value":"签名","anchor":"#签名"},{"depth":2,"value":"创建责任","anchor":"#创建责任"},{"depth":3,"value":"准备工作","anchor":"#准备工作"},{"depth":3,"value":"1. 创建三个账户并向它们添加资金","anchor":"#1-创建三个账户并向它们添加资金"},{"depth":3,"value":"1. 导航到 Developer -> Extrinsics","anchor":"#1-导航到-developer---extrinsics"},{"depth":3,"value":"2. 从可能的外部因素的下拉列表中选择 liability -> createte","anchor":"#2-从可能的外部因素的下拉列表中选择-liability---createte"},{"depth":3,"value":"3. 提交交易","anchor":"#3-提交交易"},{"depth":3,"value":"4. 在事件中查看您的责任","anchor":"#4-在事件中查看您的责任"},{"depth":3,"value":"5. 存储探索","anchor":"#5-存储探索"},{"depth":2,"value":"报告","anchor":"#报告"},{"depth":3,"value":"1. 导航到extrinsics，liability -> finalize(report)","anchor":"#1-导航到extrinsics，liability---finalizereport"},{"depth":3,"value":"2. 探索报告","anchor":"#2-探索报告"},{"depth":3,"value":"3. 检查余额","anchor":"#3-检查余额"}],"content":"\n**要将机器人变成经济主体，需要一种合同工具。认识一下责任 - 实现了跨链账户之间的合同的Robonomics托盘！**\n\n<robo-wiki-note type=\"warning\" title=\"Dev Node\">\n\n  请注意，本教程是在Robonomics节点的本地实例上演示的。按照[这些说明](/docs/run-dev-node)设置您自己的节点。\n\n</robo-wiki-note>\n\n## 理论概述\n\n在以太坊上，责任交互有一个相当复杂的结构。您可以在[这里](/docs/robonomics-how-it-works)了解它。如今，在Kusama上的事情要简单一些！\n\n### 谈判\n\n要签订合同，双方首先需要进行谈判。 这可以通过多种方式完成，包括 [IPFS PubSub ](https://blog.ipfs.tech/25-pubsub/) 或 Robonomics PubSub。 [此处](https://multi-agent-io.github.io/robonomics-interface/usage.html#pubsub) 提供了使用 Robonomics PubSub 的 Python 代码示例。 \n\n供求是包含合同的两个主要特征的消息：**工作描述**和**价格**。每个特定应用程序的消息格式由用户设计。在谈判过程中，遵循严格的格式规则并不重要。可能的流程如下图所示。\n\n<robo-wiki-picture src=\"liability/negotiations.jpg\" />\n\n<robo-wiki-note type=\"warning\" title=\"PubSub\">\n\n  请注意，PubSub是一种开放协议，因此不应传输任何敏感数据。为此，您应该使用其他协议。\n\n</robo-wiki-note>\n\n\n### 签名\n\n当谈判成功结束后，双方都需要签署所谓的协议，即签名。 这是一条包含职位描述和价格的消息**以特定格式**，并使用帐户的私钥签名。 \n还有一个[Python工具](https://multi-agent-io.github.io/robonomics-interface/modules.html#robonomicsinterface.Liability.sign_liability)。\n - 工作描述称为**技术**。这是一个类似启动的32字节长的字符串，可以是编码的IPFS CID。\n - 价格称为**经济学**。这是一个XRT小数 - 维纳。1维纳= 10**-9 XRT。\n\n<robo-wiki-note type=\"note\" title=\"32 bytes\">\n\n  您可以使用[Python库](https://multi-agent-io.github.io/robonomics-interface/modules.html#robonomicsinterface.utils.ipfs_qm_hash_to_32_bytes)以正确的方式格式化IPFS CID。\n  使用`sign_liability`函数时，无需转换哈希，它将自动完。\n\n</robo-wiki-note>\n\n以下是咖啡的例子：\n\n1. 任务是一个JSON\n```json\n{\"task\": \"make_espresso\", \"description\": \"Make one cup of espresso\"}\n```\n2. 其IPFS CID为`QmP17mWKtQtq2Gq6qZAggPRrho3sVjQGBpXZ8KZiQ57FDi`\n3. 因此，**技术**（转换后的CID）为`0x09daaa8055722a6894951b1273e807f8a46628efeec46805f0228ace230bd5a9` \n4. **经济学**为`1.5 XRT`。\n\n签署后，就可以创建责任了！这可以由其中一方（承诺方或承诺方）或所谓的提供者的第三方账户完成。\n\n## 创建责任\n\n### 准备工作\n\n如前所述，该过程涉及至少两方。在这个例子中，我们使用三方，并为此创建一个独立的提供者。假设谈判已经以某种方式进行。\n\n### 1. 创建三个账户并向它们添加资金\n\n<robo-wiki-picture src=\"liability/balances.jpg\" />\n\n在这里，我们为提供者提供了100 XRT来签署责任外部交易，承诺方获得了2 XRT来支付工作费用。\n承诺方没有获得任何资金（除了至少1 mXRT的存在性存款）。\n\n### 1. 导航到 Developer -> Extrinsics\n\n<robo-wiki-picture src=\"liability/extrinsics.jpg\" />\n\n### 2. 从可能的外部因素的下拉列表中选择 liability -> createte\n\n还要选择要提交外部交易的账户。填写所有参数。\n\n<robo-wiki-picture src=\"liability/create.jpg\" />\n\n<robo-wiki-note type=\"note\" title=\"Signatures\">\n\n  由于这里使用了提供者，无需知道参与者的种子。只需要他们的签名。\n\n</robo-wiki-note>\n\n### 3. 提交交易\n\n<robo-wiki-picture src=\"liability/submit.jpg\" />\n\n### 4. 在事件中查看您的责任\n\n为此，请导航到`Network -> Explorer`并在右侧找到事件列表。单击三角形图标展开。\n\n<robo-wiki-picture src=\"liability/new-liability.jpg\" />\n\n<robo-wiki-note type=\"note\" title=\"Hash\">\n\n  可以使用相同的 [Python 工具](https://multi-agent-io.github.io/robonomics-interface/modules.html#robonomicsinterface.utils.ipfs_32_bytes_to_qm_hash) 将哈希值转换为 IPFS CID。\n\n</robo-wiki-note>\n\n### 5. 存储探索\n\n您还可以在存储模块`liability`中探索一责任的特征。\n\n<robo-wiki-picture src=\"liability/storage-liability.jpg\" />\n\n<robo-wiki-note type=\"note\" title=\"Next Index\">\n\n  `Next Index`存储函数显示最新的责任索引+1，因此即使是`1`，也可以探索到责任`0`。\n\n</robo-wiki-note>\n\n## 报告\n\n假设咖啡已经做好了，现在咖啡机需要以某种方式报告。这就是责任报告的作用。作为劳动的证明，账户在完成现有责任时添加另一个IPFS CID作为报告内容。这再次需要承诺方的签名。\n\n<robo-wiki-note type=\"note\" title=\"Report signature\">\n\n  签名的消息包含现有责任指数和以32字节表示的报告IPFS CID。再次，[Python工具](https://multi-agent-io.github.io/robonomics-interface/modules.html#robonomicsinterface.Liability.sign_report)可以帮助签署报告。\n\n</robo-wiki-note>\n\n继续使用咖啡机的例子：\n\n1. 报告是一个JSON\n```json\n{\"report\": \"Coffee made! Time to execute - 80 seconds.\"}\n```\n2. 它的IPFS CID`QmeXCrBuv6cw825JJfSWqNVv28AyjJZW9KReN9wcLQjfCm`\n3. 所以**有效负载**（转换后的CID）是“0xf06f2394f55537a5f37d63fd72bfbef50e9f60ea9e0e34224e455afae27a97a2”\n4. **索引**是`0`，它是现有责任指数。\n\n### 1. 导航到extrinsics，liability -> finalize(report)\n\n填写参数并提交外部。 同样，这可以通过第三方帐户来完成。\n\n<robo-wiki-picture src=\"liability/report.jpg\" />\n\n<robo-wiki-note type=\"warning\" title=\"Existential deposit\">\n\n  请注意，承诺人账户不应该是\"dead\" - 它应该至少有1 mXRT的存在性存款。\n\n</robo-wiki-note>\n\n签署并提交报告。完成后，您可以在事件中探索它。\n\n<robo-wiki-picture src=\"liability/new-report.jpg\" />\n\n### 2. 探索报告\n\n您还可以在存储中观察报告。转到`Developer -> Storage`并从下拉列表中选择`liability`。\n\n<robo-wiki-picture src=\"liability/storage-report.jpg\" />\n\n### 3. 检查余额\n\n图片显示现在承诺人已经得到了\"工资\"。经济关系发生了！\n\n<robo-wiki-picture src=\"liability/balances-2.jpg\" />\n\n\n<robo-wiki-note type=\"note\" title=\"Verifying\">\n\n  目前还没有办法验证工作是否完成，因此一旦承诺人报告，代币将转移到其账户。 \n  验证功能将在将来添加。\n\n</robo-wiki-note>","tools":["Robonomics 2.3.0 https://github.com/airalab/robonomics","robonomics_interface 1.3.5 https://github.com/Multi-Agent-io/robonomics-interface"],"fileInfo":{"path":"zh/liability.md","name":"liability"}}},"context":{}}