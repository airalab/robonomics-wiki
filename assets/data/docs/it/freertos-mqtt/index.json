{"hash":"0fc731af9b90653b97e5d5b575cb73fa2319c9c4","data":{"doc":{"id":"e3da16eeb809803d94f1f112f163fffe","title":"Collega un dispositivo Amazon FreeRTOS a Robonomics tramite MQTT","description":"","contributors":["khssnv"],"headings":[],"subtitles":[{"depth":2,"value":"Configurazione hardware","anchor":"#configurazione-hardware"},{"depth":2,"value":"Flusso dei dati","anchor":"#flusso-dei-dati"},{"depth":2,"value":"Firmware","anchor":"#firmware"},{"depth":3,"value":"Configurazione Wi-Fi","anchor":"#configurazione-wi-fi"},{"depth":3,"value":"Configurazione del punto di accesso MQTT","anchor":"#configurazione-del-punto-di-accesso-mqtt"},{"depth":2,"value":"Da MQTT a Robonomics","anchor":"#da-mqtt-a-robonomics"},{"depth":2,"value":"Risorse originali utilizzate","anchor":"#risorse-originali-utilizzate"}],"content":"\nEcco la dimostrazione di come un microcontrollore che esegue [Amazon Web Services FreeRTOS](https://aws.amazon.com/freertos/) può essere collegato alla rete Robonomics tramite MQTT. Si prega di controllare [questo repository](http://github.com/khssnv/freertos_mqtt_robonomics_example) per il codice sorgente del progetto.\n\nUtilizziamo [ESP32 DevKitC](https://devices.amazonaws.com/detail/a3G0L00000AANtjUAH/ESP32-WROOM-32-DevKitC/) con distribuzione FreeRTOS e implementazione MQTT fornita da [Espressif IoT Development Framework](https://github.com/espressif/esp-idf) mentre Espressif è un fornitore del microcontrollore utilizzato.\n\nInoltre, c'è un sensore [PMS-3003](http://www.plantower.com/en/content/?107.html) a scopo dimostrativo. Il sensore misura la presenza di particolato nell'aria e può essere utilizzato per stimare la qualità dell'aria.\n\nLa qualità dell'aria non è un argomento dell'articolo, è possibile trovare ulteriori informazioni al sito web dell'OMS: [Inquinamento atmosferico ambientale (all'aperto)](https://www.who.int/news-room/fact-sheets/detail/ambient-(outdoor)-air-quality-and-health). L'obiettivo del sistema è pubblicare le misurazioni del sensore sulla rete Robonomics di Airalab.\n\n## Configurazione hardware\n\nColleghiamo il PIN5 TXD di PMS3003 a ESP32 DevKitC IO17 per trasferire le misurazioni tramite UART.\nEntrambi i dispositivi richiedono anche alimentazione e massa comune.\n\n![Wiring Diagram](../images/freertos-mqtt/wiring.png)\n\n## Flusso dei dati\n\nAl fine di inviare le misurazioni del sensore alla rete Robonomics, a livello di firmware il nostro obiettivo è ottenere i dati da un sensore tramite il protocollo di comunicazione integrato che supporta (UART nel nostro caso) e passarli a un'istanza AIRA tramite MQTT / TCP.\n\n![Sending](../images/freertos-mqtt/send.svg)\n\nNel nostro esempio utilizziamo l'implementazione cloud di AIRA disponibile tramite indirizzo IP pubblico e nome di dominio assegnato.\nNell'istanza AIRA configuriamo il broker MQTT `mosquitto` e ci iscriviamo al topic `/freertos_mqtt_robonomics_example/98:F4:AB:72:23:C4` per ricevere messaggi da MQTT.\n\nQuindi passiamo i messaggi al writer `robonomics io` tramite pipe.\n\n![Receiving](../images/freertos-mqtt/recv.svg)\n\nOra i dati sono disponibili nella rete Robonomics e possiamo leggerli nuovamente con `robonomics io`.\n\n## Firmware\n\nUtilizziamo l'applicazione di esempio [ESP-MQTT con trasporto TCP](https://github.com/espressif/esp-idf/tree/master/examples/protocols/mqtt/tcp) come base.\n\nModifichiamo solo `main/app_main.c` per la connessione UART al sensore, la sincronizzazione dell'ora SNTP e la routine periodica di pubblicazione MQTT.\n\nSe stai cercando di ripetere il progetto e si tratta del tuo primo progetto basato su ESP IDF, ti preghiamo di seguire prima la guida di programmazione ESP-IDF di Espressif's ESP-IDF](https://docs.espressif.com/projects/esp-idf/en/latest/esp32/get-started/index.html#installation-step-by-step) per familiarizzare con le operazioni del firmware come configurazione, compilazione e caricamento con lo strumento `idf.py`.\n\n### Configurazione Wi-Fi\n\nAl fine di comunicare con l'istanza AIRA distribuita nel cloud, il nostro microcontrollore richiede una connessione Internet.\nUtilizziamo il Wi-Fi di ESP32 per questo.\nEspressif fornisce strumenti per configurare il Wi-Fi integrato.\nNel nostro esempio utilizziamo un ambiente di sviluppo con Ubuntu 20.04 GNU/Linux.\nPer configurare il Wi-Fi andiamo nella cartella del progetto e avviamo lo strumento di configurazione SDK.\n\n```console\ncd freertos_mqtt_robonomics_example/firmware\nidf.py menuconfig\n```\n\nQuindi impostiamo il nome SSID e la password del punto di accesso Wi-Fi nella sezione `Example Connettiion Configurazione`.\n\n![Menuconfig Wi-Fi](../images/freertos-mqtt/menuconfig-wi-fi.png)\n\n### Configurazione del punto di accesso MQTT\n\nCi sono due cose da configurare per MQTT.\nLa prima è l'indirizzo del broker MQTT.\nÈ configurabile con lo strumento di configurazione SDK.\n\n```console\ncd freertos_mqtt_robonomics_example/firmware\nidf.py menuconfig\n```\n\nImposta l'URL del broker nella sezione `Example Configurazione`.\n\n![Menuconfig MQTT](../images/freertos-mqtt/menuconfig-mqtt.png)\n\nLa seconda cosa è il topic MQTT.\nLo impostiamo nel firmware con il prefisso del nome del progetto seguito dal nostro indirizzo MAC ESP32.\nCiò ci dà `/freertos_mqtt_robonomics_example/98:F4:AB:72:23:C4` per il nostro particolare microchip.\n\n## Da MQTT a Robonomics\n\nIniziamo controllando se riceviamo dati tramite MQTT.\nPossiamo iscriverci al topic del broker MQTT Mosquitto che il dispositivo pubblica.\n\n```console\n$ nix-shell -p mosquitto --run \"mosquitto_sub -h localhost -t '/freertos_mqtt_robonomics_example/98:F4:AB:72:23:C4'\"\nts=1615651809, PM1=2, PM2.5=6, PM10=3\n```\n\nQui portiamo il pacchetto `mosquitto` nel nostro ambiente per utilizzare l'utilità `mosquitto_sub`.\nPoi ci iscriviamo all'argomento impostato nel firmware.\nAbbiamo ottenuto le nostre misurazioni, il che significa che AIRA riceve correttamente i dati tramite MQTT.\nOra facciamo passare questi messaggi alla rete Robonomics.\n\n```console\nnix-shell -p mosquitto --run \"mosquitto_sub -h localhost -t '/freertos_mqtt_robonomics_example/98:F4:AB:72:23:C4'\" | robonomics io write pubsub --bootnodes=/ip4/127.0.0.1/tcp/34333 /freertos_mqtt_robonomics_example\n```\n\nQui utilizziamo l'utilità `robonomics` per pubblicare messaggi nel canale pubsub `/freertos_mqtt_robonomics_example`.\nSpecifichiamo `bootnodes` per garantire almeno una connessione stabilita.\n\nOra stiamo leggendo questi messaggi dallo stesso canale pubsub.\n\n```console\n$ robonomics io read pubsub --listen /ip4/127.0.0.1/tcp/34333 /freertos_mqtt_robonomics_example\n2021-03-27 15:15:51  Generated random peer id: 12D3KooWB2nym5E6c3aPpnPKK5wB9Z6n9eZzcXSpyUBozxhi6dam\n2021-03-27 15:15:51  Subscribed to topic: _robonomics_pubsub_peer_discovery\n2021-03-27 15:15:51  Subscribed to topic: /freertos_mqtt_robonomics_example\n2021-03-27 15:15:56  New peer connected: PeerId(\"12D3KooWRPLCioD2b9XLZTZJQELSAuQAyTrHUKzRktrQHtTSs6kS\")\n2021-03-27 15:15:56  GRAFT: Mesh link added for peer: PeerId(\"12D3KooWRPLCioD2b9XLZTZJQELSAuQAyTrHUKzRktrQHtTSs6kS\") in topic: TopicHash { hash: \"_robonomics_pubsub_peer_discovery\" }\nts=1616843855, PM1=3, PM2.5=4, PM10=3\n```\n\n## Risorse originali utilizzate\n\n* Pinout ESP32 DevKitC da GoJimmy's blog https://gojimmypi.blogspot.com/2017/03/jtag-debugging-for-esp32.html\n* Struttura dati e decodificatore PSM3003 da OpenAirProject https://github.com/openairproject/sensor-esp32\n\n**Grazie a tutti!**\n","tools":[],"fileInfo":{"path":"it/freertos-mqtt.md","name":"freertos-mqtt"}}},"context":{}}