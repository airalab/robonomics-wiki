{"hash":"6049b68e007bd8fa4054505bb4c1089344ab6865","data":{"doc":{"id":"a2b4c6da4fb8ec93edca6f06122aa24e","title":"Collega il sensore","description":"","contributors":["LoSk-p","makyul"],"headings":[],"subtitles":[{"depth":2,"value":"Requisiti","anchor":"#requisiti"},{"depth":2,"value":"Zigbee stick","anchor":"#zigbee-stick"},{"depth":2,"value":"Installaazione","anchor":"#installaazione"},{"depth":2,"value":"Configurazione","anchor":"#configurazione"},{"depth":2,"value":"Collega la spina","anchor":"#collega-la-spina"},{"depth":2,"value":"Dopo l'accoppiamento","anchor":"#dopo-laccoppiamento"},{"depth":2,"value":"In esecuzione","anchor":"#in-esecuzione"}],"content":"\nL'esempio di lavoro è nel video:\n\nhttps://youtu.be/jsaFCVAx2sA\n\n## Requisiti\n\n* [Aqara Smart Plug](https://aqara.ru/product/aqara-smart-plug/?yclid=462434430312045270)\n* Raspberry Pi\n* Zigbee adapter [JetHome USB JetStick Z2](https://jhome.ru/catalog/parts/PCBA/293/) (o uno dei [supportati](https://www.zigbee2mqtt.io/information/supported_adapters.html))\n\nIl servizio è in esecuzione su Raspberry Pi e contatta la presa intelligente tramite protocollo zigbee.\n\n## Zigbee stick\n\nSe hai JetHome USB JetStick Z2, ha già il firmware necessario, quindi non è necessario flasharlo. Ma se hai un altro adattatore, devi prima flasharlo con il software zigbee2MQTT. Puoi trovare le istruzioni per il tuo dispositivo [qui](https://www.zigbee2mqtt.io/information/supported_adapters.html).\n\nCollega l'adattatore e verifica l'indirizzo dell'adattatore (potrebbe anche essere `/dev/ttyUSB1`):\n```bash\n$ ls -l /dev/ttyUSB0\ncrw-rw---- 1 root dialout 166, 0 May 16 19:15 /dev/ttyUSB0 \n```\n\nPotrebbe essere necessario prima accedere alla porta USB. Aggiungi il tuo utente a `dialout` gruppo (funziona per ubuntu, ma il nome del gruppo potrebbe essere diverso su altri sistemi operativi).\nPer ubuntu:\n```bash\nsudo usermod -a -G dialout $USER\n```\nPer arch:\n```bash\nsudo usermod -a -G uucp $USER\n```\nQuindi esci e accedi nuovamente o riavvia il computer.\n\n## Installaazione\n\nClona il repository:\n\n```\ngit clone https://github.com/makyul/robonomics-carbon-footprint.git\ncd robonomics-carbon-footprint\n```\n\n## Configurazione\n\nVai a `data/configuration.yaml` e imposta `permit_join: true`:\n\n```\n# Home Assistant integration (MQTT discovery)\nhomeassistant: false\n\n# allow new devices to join\npermit_join: true\n\n# MQTT settings\nmqtt:\n  # MQTT base topic for zigbee2mqtt MQTT messages\n  base_topic: zigbee2mqtt\n  # MQTT server URL\n  server: 'mqtt://172.17.0.1'\n  # MQTT server authentication, uncomment if required:\n  # user: my_user\n  # password: my_password\n\n# Serial settings\nserial:\n  # Location of CC2531 USB sniffer\n  port: /dev/ttyUSB0\n```\nPotresti anche voler compilare i campi `server` and `port` con le informazioni corrispondenti. Nel campo `server` utilizza l'IP del `docker0` bridge per stabilire la connessione: \n\n```bash\n$ ip a                                                 127\n1: lo: <LOOPBACK,UP,LOWER_UP> mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000\n    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00\n\n...\n\n5: docker0: <NO-CARRIER,BROADCAST,MULTICAST,UP> mtu 1500 qdisc noqueue state DOWN group default \n    link/ether 02:42:0d:ff:5f:a3 brd ff:ff:ff:ff:ff:ff\n    inet 172.17.0.1/16 brd 172.17.255.255 scope global docker0\n       valid_lft forever preferred_lft forever\n    inet6 fe80::42:dff:feff:5fa3/64 scope link \n       valid_lft forever preferred_lft forever\n```\nQui il tuo indirizzo è `172.17.0.1`.\n\nQuindi crea il file config/config.yaml con le seguenti informazioni e imposta la tua posizione (puoi cercare su https://countrycode.org/ per il codice ISO a 3 lettere):\n\n```\nlocation: RUS\nservice_address: 4GdHeLbmio2noKCQM5mfxswXfPoW2PcbpYKKkM4NQiqSqJMd\ntwin_id: 5\nsending_timeout: 3600\nbroker_address: \"172.17.0.1\"\nbroker_port: 1883\n```\n\n## Collega la spina\n\nPrima esecuzione:\n\n```\ndocker-compose up     \n```\n\nPer passare alla modalità di accoppiamento sulla spina, premere a lungo il pulsante di accensione per alcuni secondi fino a quando la luce inizia a lampeggiare rapidamente in blu.\n\nNei log dovresti vedere ora che il tuo plug ha iniziato a pubblicare su mqtt.\n\n\n## Dopo l'accoppiamento\n\nSe non vuoi consentire ad altri dispositivi di accoppiarsi con la tua chiavetta, ora dovresti andare su `data/configuration.yaml` and set `permit_join: false`. Restart service (use 'Ctrl+C' and \n\n```bash\ndocker-compose up     \n```\nancora una volta per inviare le modifiche).\n\n## In esecuzione\nAll'avvio verrà creato l'account per la spina. \n> Se hai già un account dovresti aggiungere il suo seme al file `config.config.yaml` nella sezione `device_seed`:\n>\n> ```\n> location: RUS\n> service_address: 4GdHeLbmio2noKCQM5mfxswXfPoW2PcbpYKKkM4NQiqSqJMd\n> twin_id: 5\n> sending_timeout: 3600\n> broker_address: \"172.17.0.1\"\n> broker_port: 1883\n> device_seed: <device_seed>\n>```\n\nDopo aver creato l'account, vedrai l'indirizzo nei log (il seed verrà aggiunto a `config/config.yaml`):\n```\nplug               | Generated account with address: 4GuP82BMAgrbtU8GhnKhgzP827sJEaBXeMX38pZZKPSpcWeT\n```\nDevi trasferire alcuni token a questo account per le commissioni di transazione, puoi farlo su [Robonomics Portal](https://polkadot.js.org/apps/?rpc=wss%3A%2F%2Fkusama.rpc.robonomics.network%2F#/accounts). \n\nIl servizio vedrà che hai abbastanza token, nei log vedrai:\n```\nplug               | Balance is OK\n```\nIl servizio vedrà i messaggi mqtt dalla spina e utilizzerà l'energia in modo sicuro. Ogni ora (puoi modificare il timeout in `config/config.yaml` in `sending_timeout` sezione, il timeout è in secondi) verrà creato un datalog con le seguenti informazioni:\n```\n{'geo': 'RUS', 'power_usage': 1.021237391233444, 'timestamp': 1644494860.5860083}\n```\n","tools":[],"fileInfo":{"path":"it/carbon-footprint-sensor.md","name":"carbon-footprint-sensor"}}},"context":{}}