{"hash":"7aa239c3bcfadce6a760f54beda5c30e0b86854b","data":{"doc":{"id":"8fe9246f9ca32f625ccd20130cd04350","title":"Responsabilità","description":"","contributors":["PaTara43"],"headings":[],"subtitles":[{"depth":2,"value":"Panoramica della teoria","anchor":"#panoramica-della-teoria"},{"depth":3,"value":"Negoziazioni","anchor":"#negoziazioni"},{"depth":3,"value":"Firme","anchor":"#firme"},{"depth":2,"value":"Creare responsabilità","anchor":"#creare-responsabilità"},{"depth":3,"value":"Preparativi","anchor":"#preparativi"},{"depth":3,"value":"1. Crea tre account e aggiungi fondi ad essi","anchor":"#1-crea-tre-account-e-aggiungi-fondi-ad-essi"},{"depth":3,"value":"1. Vai su Developer -> Extrinsics","anchor":"#1-vai-su-developer---extrinsics"},{"depth":3,"value":"2. Scegli la liability -> create dal menu a discesa delle estrinseche possibili","anchor":"#2-scegli-la-liability---create-dal-menu-a-discesa-delle-estrinseche-possibili"},{"depth":3,"value":"3. Invia la transazione","anchor":"#3-invia-la-transazione"},{"depth":3,"value":"4. Esamina la tua responsabilità negli eventi","anchor":"#4-esamina-la-tua-responsabilità-negli-eventi"},{"depth":3,"value":"5. Esplorazione dello storage","anchor":"#5-esplorazione-dello-storage"},{"depth":2,"value":"Rapporti","anchor":"#rapporti"},{"depth":3,"value":"1. Naviga su extrinsics, liability -> finalize(report)","anchor":"#1-naviga-su-extrinsics-liability---finalizereport"},{"depth":3,"value":"2. Esplora i rapporti","anchor":"#2-esplora-i-rapporti"},{"depth":3,"value":"3. Controlla i saldi","anchor":"#3-controlla-i-saldi"}],"content":"\n**Per trasformare i robot in agenti economici è necessario uno strumento contrattuale per questo. Incontra Liability - Robonomics pallet che implementa contratti tra account parachain!**\n\n<robo-wiki-note type=\"warning\" title=\"Dev Node\">\n\n  Si prega di prestare attenzione al fatto che questo tutorial viene dimostrato su un'istanza locale di Robonomics Node. Configura la tua con [queste istruzioni](/docs/run-dev-node).\n\n</robo-wiki-note>\n\n## Panoramica della teoria\n\nTornando all'Ethereum c'era una struttura abbastanza complicata di interazione di responsabilità. Puoi conoscerla [qui](/docs/robonomics-how-it-works). Oggi le cose sono un po' più facili con Kusama!\n\n### Negoziazioni\n\nPer firmare un contratto le due parti devono prima negoziare. Questa operazione può essere eseguita in diversi modi, tra cui [IPFS PubSub](https://blog.ipfs.tech/25-pubsub/) o Robonomics PubSub. Un esempio di codice Python che utilizza Robonomics PubSub è\npresentato [qui](https://multi-agent-io.github.io/robonomics-interface/usage.html#pubsub). \n\nOfferta e domanda sono messaggi che contengono due caratteristiche principali di un contratto: **descrizione del lavoro** e **prezzo**. Il formato del messaggio deve essere progettato dall'utente per ogni applicazione specifica. Non è così importante nel processo di negoziazione seguire una regola di formato rigorosa. Il flusso possibile è presentato nell'immagine qui sotto.\n\n<robo-wiki-picture src=\"liability/negotiations.jpg\" />\n\n<robo-wiki-note type=\"warning\" title=\"PubSub\">\n\n  Si noti che PubSub è un protocollo aperto, quindi non dovrebbero essere trasferiti dati sensibili. Per questo è necessario utilizzare altri protocolli.\n\n</robo-wiki-note>\n\n\n### Firme\n\nUna volta che i negoziati si sono conclusi con successo, ciascuna parte deve firmare il cosiddetto accordo denominato firma. Questo è un messaggio contenente la descrizione del lavoro e il prezzo **in un formato specifico** firmato con una chiave privata dell'account.\nEsiste anche uno [Strumento Python](https://multi-agent-io.github.io/robonomics-interface/modules.html#robonomicsinterface.Liability.sign_liability) per questo.\n - La descrizione del lavoro è chiamata **tecnica**. Si tratta di una stringa lunga 32 byte simile a un lancio che può essere un CID IPFS codificato.\n - Il prezzo è chiamato **economia**. Si tratta di un decimale XRT - Weiner. 1 Weiner = 10**-9 XRT.\n\n<robo-wiki-note type=\"note\" title=\"32 bytes\">\n\n  È possibile ottenere un [CID IPFS](https://ipfs.tech/) formattato correttamente con la [libreria Python](https://multi-agent-io.github.io/robonomics-interface/modules.html#robonomicsinterface.utils.ipfs_qm_hash_to_32_bytes).\n  Quando si utilizza la funzione `sign_liability`, non è necessario trasformare l'hash, verrà fatto automaticamente.\n\n</robo-wiki-note>\n\nSeguendo l'esempio del caffè:\n\n1. Il compito è un JSON\n```json\n{\"task\": \"make_espresso\", \"description\": \"Make one cup of espresso\"}\n```\n2. Il suo CID IPFS è `QmP17mWKtQtq2Gq6qZAggPRrho3sVjQGBpXZ8KZiQ57FDi`\n3. Quindi la **tecnica** (CID trasformato) è `0x09daaa8055722a6894951b1273e807f8a46628efeec46805f0228ace230bd5a9` \n4. **Economia** è `1,5 XRT`.\n\nQuando viene firmato, è il momento di creare una responsabilità! Questo può essere fatto da una delle parti (sia il promissario che il promittente) o da un account di terze parti di un cosiddetto fornitore.\n\n## Creare responsabilità\n\n### Preparativi\n\nCome accennato in precedenza, nel processo sono coinvolti almeno due parti. Per questo esempio, utilizziamo tre e creiamo un fornitore separato per questo. Supponiamo che le negoziazioni abbiano già avuto luogo in qualche modo.\n\n### 1. Crea tre account e aggiungi fondi ad essi\n\n<robo-wiki-picture src=\"liability/balances.jpg\" />\n\nQui abbiamo fornito al fornitore 100 XRT per firmare le estrinseche di responsabilità, al promissario sono stati dati 2 XRT per pagare il lavoro.\nAl promittente non sono stati concessi fondi (tranne un deposito esistenziale di almeno 1 mXRT).\n\n### 1. Vai su Developer -> Extrinsics\n\n<robo-wiki-picture src=\"liability/extrinsics.jpg\" />\n\n### 2. Scegli la liability -> create dal menu a discesa delle estrinseche possibili\n\nScegli anche un account con cui desideri inviare l'estrinseco. Compila tutti i parametri.\n\n<robo-wiki-picture src=\"liability/create.jpg\" />\n\n<robo-wiki-note type=\"note\" title=\"Signatures\">\n\n  Poiché qui viene utilizzato il fornitore, non è necessario conoscere i seed dei partecipanti. Sono necessarie solo le loro firme.\n\n</robo-wiki-note>\n\n### 3. Invia la transazione\n\n<robo-wiki-picture src=\"liability/submit.jpg\" />\n\n### 4. Esamina la tua responsabilità negli eventi\n\nPer fare ciò, vai su `Network -> Explorer` e trova un elenco di eventi sulla destra. Fai clic su un'icona a triangolo per espanderla.\n\n<robo-wiki-picture src=\"liability/new-liability.jpg\" />\n\n<robo-wiki-note type=\"note\" title=\"Hash\">\n\n  The hash may be transformed to an IPFS CID with the same [Python tool](https://multi-agent-io.github.io/robonomics-interface/modules.html#robonomicsinterface.utils.ipfs_32_bytes_to_qm_hash).\n\n</robo-wiki-note>\n\n### 5. Esplorazione dello storage\n\nPuoi anche esplorare alcune caratteristiche delle responsabilità nel modulo di storage `liability`.\n\n<robo-wiki-picture src=\"liability/storage-liability.jpg\" />\n\n<robo-wiki-note type=\"note\" title=\"Next Index\">\n\n  La funzione di storage `Next Index` mostra l'ultimo indice di responsabilità +1, quindi anche se è `1`, la responsabilità `0` viene esplorata.\n\n</robo-wiki-note>\n\n## Rapporti\n\nImmagina che sia stato preparato un caffè e ora la macchina del caffè ha bisogno di segnalarlo in qualche modo. Ecco dove entrano in gioco i rapporti di responsabilità. Come prova di lavoro, l'account aggiunge un altro CID IPFS come contenuto del rapporto quando si finalizza la responsabilità esistente. Anche questo richiede una firma del promittente.\n\n<robo-wiki-note type=\"note\" title=\"Report signature\">\n\n  Il messaggio firmato contiene l'indice di responsabilità esistente e l'IPFS CID del rapporto codificato in una rappresentazione di 32 byte. Ancora una volta, lo [strumento Python](https://multi-agent-io.github.io/robonomics-interface/modules.html#robonomicsinterface.Liability.sign_report) può aiutare a firmare il rapporto.\n\n</robo-wiki-note>\n\nContinuando con l'esempio della macchina del caffè:\n\n1. Il rapporto è un JSON\n```json\n{\"report\": \"Coffee made! Time to execute - 80 seconds.\"}\n```\n2. Il suo IPFS CID è `QmeXCrBuv6cw825JJfSWqNVv28AyjJZW9KReN9wcLQjfCm`\n3. Quindi il **carico utile** (CID trasformato) è \"0xf06f2394f55537a5f37d63fd72bfbef50e9f60ea9e0e34224e455afae27a97a2\"\n4. **L'indice** è `0`, è l'indice di responsabilità esistente.\n\n### 1. Naviga su extrinsics, liability -> finalize(report)\n\nCompila i parametri e invia estrinseco. Ancora una volta, questo può essere fatto da un account di terze parti.\n\n<robo-wiki-picture src=\"liability/report.jpg\" />\n\n<robo-wiki-note type=\"warning\" title=\"Existential deposit\">\n\n  Fai attenzione che l'account promettente non dovrebbe essere \"morto\" - dovrebbe avere un deposito esistenziale di almeno 1 mXRT.\n\n</robo-wiki-note>\n\nFirma e invia il rapporto. Quando hai finito, puoi esplorarlo negli eventi.\n\n<robo-wiki-picture src=\"liability/new-report.jpg\" />\n\n### 2. Esplora i rapporti\n\nPuoi anche osservare il rapporto nello storage. Vai su `Developer -> Storage` e scegli `liability` dalla lista a discesa.\n\n<robo-wiki-picture src=\"liability/storage-report.jpg\" />\n\n### 3. Controlla i saldi\n\nNell'immagine è mostrato che ora il promettente ha ricevuto il \"salario\". È avvenuta una relazione economica!\n\n<robo-wiki-picture src=\"liability/balances-2.jpg\" />\n\n\n<robo-wiki-note type=\"note\" title=\"Verifying\">\n\n  Al momento non c'è modo di verificare che il lavoro sia stato completato, quindi non appena il promettente segnala, i token vengono trasferiti sul suo account. \n  La funzione di verifica verrà aggiunta in futuro.\n\n</robo-wiki-note>","tools":["Robonomics 2.3.0 https://github.com/airalab/robonomics","robonomics_interface 1.3.5 https://github.com/Multi-Agent-io/robonomics-interface"],"fileInfo":{"path":"it/liability.md","name":"liability"}}},"context":{}}