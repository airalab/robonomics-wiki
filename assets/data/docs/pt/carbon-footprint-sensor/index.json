{"hash":"7cb61ecb7aece8a731b99edf4c65740f47020848","data":{"doc":{"id":"455921273610fd86656ed3ac8beec23d","title":"Conectar sensor","description":"","contributors":["LoSk-p","makyul"],"headings":[],"subtitles":[{"depth":2,"value":"Requisitos","anchor":"#requisitos"},{"depth":2,"value":"Zigbee stick","anchor":"#zigbee-stick"},{"depth":2,"value":"Instalação","anchor":"#instalação"},{"depth":2,"value":"Configuração","anchor":"#configuração"},{"depth":2,"value":"Conectar Plug","anchor":"#conectar-plug"},{"depth":2,"value":"Após o emparelhamento","anchor":"#após-o-emparelhamento"},{"depth":2,"value":"Executando","anchor":"#executando"}],"content":"\nExemplo de trabalho está no vídeo:\n\nhttps://youtu.be/jsaFCVAx2sA\n\n## Requisitos\n\n* [Aqara Smart Plug](https://aqara.ru/product/aqara-smart-plug/?yclid=462434430312045270)\n* Raspberry Pi\n* Zigbee adapter [JetHome USB JetStick Z2](https://jhome.ru/catalog/parts/PCBA/293/) (ou um dos [suportado](https://www.zigbee2mqtt.io/emformation/supported_adapters.html))\n\nO serviço está sendo executado no Raspberry Pi e entre em contato com o plugue inteligente via protocolo zigbee.\n\n## Zigbee stick\n\nSe você tiver o JetHome USB JetStick Z2, ele já possui o firmware necessário, portanto, não é necessário atualizá-lo. Mas se você tiver outro adaptador, primeiro você precisa atualizá-lo com o software zigbee2MQTT. Você pode encontrar instruções para o seu dispositivo [aqui](https://www.zigbee2mqtt.io/information/supported_adapters.html).\n\nConecte o adaptador e verifique o endereço do adaptador (também pode ser `/dev/ttyUSB1`):\n```bash\n$ ls -l /dev/ttyUSB0\ncrw-rw---- 1 root dialout 166, 0 May 16 19:15 /dev/ttyUSB0 \n```\n\nTalvez seja necessário obter acesso à porta USB primeiro. Adicione seu usuário a `dialout` grupo (funciona para o ubuntu, mas o nome do grupo pode ser diferente em outros sistemas operacionais).\nPara ubuntu:\n```bash\nsudo usermod -a -G dialout $USER\n```\nPara arch:\n```bash\nsudo usermod -a -G uucp $USER\n```\nEm seguida, faça logout e login ou reinicie o computador.\n\n## Instalação\n\nClone o repositório:\n\n```\ngit clone https://github.com/makyul/robonomics-carbon-footprint.git\ncd robonomics-carbon-footprint\n```\n\n## Configuração\n\nVá para `data/configuration.yaml` e defina `permit_join: true`:\n\n```\n# Home Assistant integration (MQTT discovery)\nhomeassistant: false\n\n# allow new devices to join\npermit_join: true\n\n# MQTT settings\nmqtt:\n  # MQTT base topic for zigbee2mqtt MQTT messages\n  base_topic: zigbee2mqtt\n  # MQTT server URL\n  server: 'mqtt://172.17.0.1'\n  # MQTT server authentication, uncomment if required:\n  # user: my_user\n  # password: my_password\n\n# Serial settings\nserial:\n  # Location of CC2531 USB sniffer\n  port: /dev/ttyUSB0\n```\nTambém pode ser necessário preencher os campos `server` and `port` com informações correspondentes. No campo `server` use o IP da `docker0` ponte para estabelecer a conexão: \n\n```bash\n$ ip a                                                 127\n1: lo: <LOOPBACK,UP,LOWER_UP> mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000\n    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00\n\n...\n\n5: docker0: <NO-CARRIER,BROADCAST,MULTICAST,UP> mtu 1500 qdisc noqueue state DOWN group default \n    link/ether 02:42:0d:ff:5f:a3 brd ff:ff:ff:ff:ff:ff\n    inet 172.17.0.1/16 brd 172.17.255.255 scope global docker0\n       valid_lft forever preferred_lft forever\n    inet6 fe80::42:dff:feff:5fa3/64 scope link \n       valid_lft forever preferred_lft forever\n```\nAqui seu endereço é `172.17.0.1`.\n\nEm seguida, crie o arquivo config/config.yaml com as seguintes informações e defina sua localização (você pode consultar https://countrycode.org/ para o código ISO de 3 letras):\n\n```\nlocation: RUS\nservice_address: 4GdHeLbmio2noKCQM5mfxswXfPoW2PcbpYKKkM4NQiqSqJMd\ntwin_id: 5\nsending_timeout: 3600\nbroker_address: \"172.17.0.1\"\nbroker_port: 1883\n```\n\n## Conectar Plug\n\nPrimeira execução:\n\n```\ndocker-compose up     \n```\n\nPara mudar para o modo de emparelhamento no plugue, pressione longamente o botão liga / desliga por alguns segundos até que a luz azul comece a piscar rapidamente.\n\nNos logs você deverá ver agora que seu plug começou a ser publicado no mqtt.\n\n## Após o emparelhamento\n\nSe você não quiser permitir que outros dispositivos se conectem ao seu adaptador, agora você deve ir para `data/configuration.yaml` e definir `permit_join: false`. Reinicie o serviço (use 'Ctrl+C' e\n\n```bash\ndocker-compose up     \n```\nmais uma vez para enviar as alterações).\n\n## Executando\nNo primeiro início, a conta para a tomada será criada. \n> Se você já possui uma conta, você deve adicionar sua semente a `config.config.yaml` farquivo na seção `device_seed` :\n>\n> ```\n> location: RUS\n> service_address: 4GdHeLbmio2noKCQM5mfxswXfPoW2PcbpYKKkM4NQiqSqJMd\n> twin_id: 5\n> sending_timeout: 3600\n> broker_address: \"172.17.0.1\"\n> broker_port: 1883\n> device_seed: <device_seed>\n>```\n\nApós criar a conta, você verá o endereço nos logs (a semente será adicionada a `config/config.yaml`):\n```\nplug               | Generated account with address: 4GuP82BMAgrbtU8GhnKhgzP827sJEaBXeMX38pZZKPSpcWeT\n```\nVocê precisa transferir alguns tokens para esta conta para taxas de transação, você pode fazer isso em [Robonomics Portal](https://polkadot.js.org/apps/?rpc=wss%3A%2F%2Fkusama.rpc.robonomics.network%2F#/accounts). \n\nO serviço verá que você tem tokens suficientes, nos logs você verá:\n```\nplug               | Balance is OK\n```\nO serviço verá mensagens mqtt da tomada e garantirá o uso seguro de energia. A cada hora (você pode alterar o tempo limite em `config/config.yaml` em `sending_timeout` seção, o tempo limite está em segundos) ele criará um registro de dados com as seguintes informações:\n```\n{'geo': 'RUS', 'power_usage': 1.021237391233444, 'timestamp': 1644494860.5860083}\n```\n","tools":[],"fileInfo":{"path":"pt/carbon-footprint-sensor.md","name":"carbon-footprint-sensor"}}},"context":{}}