{"hash":"44c5b3e5ed0ff1f1fbc533a14a86e4fafe90371c","data":{"doc":{"id":"d93f469113b6a9969411bc8aab48e001","title":"Gaka-Chu setup and software Installation","description":"","contributors":["PaTara43"],"translated":false,"headings":[],"subtitles":[{"depth":2,"value":"Software installation on KRC4","anchor":"#software-installation-on-krc4"},{"depth":2,"value":"Software installation on NUC","anchor":"#software-installation-on-nuc"},{"depth":2,"value":"Filling in constants","anchor":"#filling-in-constants"},{"depth":2,"value":"Calibrating Gaka-Chu","anchor":"#calibrating-gaka-chu"},{"depth":2,"value":"Testing Gaka-Chu calibration","anchor":"#testing-gaka-chu-calibration"},{"depth":2,"value":"Making art","anchor":"#making-art"},{"depth":3,"value":"Eki interface","anchor":"#eki-interface"},{"depth":3,"value":"RViz and MOVEit","anchor":"#rviz-and-moveit"},{"depth":3,"value":"Environment","anchor":"#environment"},{"depth":3,"value":"Pictures processor","anchor":"#pictures-processor"},{"depth":3,"value":"Trajectories drawer","anchor":"#trajectories-drawer"},{"depth":2,"value":"Send the robot a picture to draw","anchor":"#send-the-robot-a-picture-to-draw"}],"content":"\nhttps://www.youtube.com/watch?v=GxlYxaykqTU\n\n**In this article we will go through some installation and launching steps to set up a robot-painter. Requirements:**\n- KUKA KR6 R900 sixx with KRC4 and a SmartPad;\n- Intel NUC with [ROS melodic](http://wiki.ros.org/melodic/Installation/Ubuntu) installed;\n- Table, paint, brush, water.\n\n## Software installation on KRC4\nEKI interface is required on both, KRC4 and NUC. Detailed information on how to set it up on KRC4 is presented [here](https://github.com/AlexeiOvcharov/kuka_experimental/tree/a915bf4e932990379c84164713e7ae11a24a2a13/kuka_eki_hw_interface/krl). Launch it on robot's controller.\n\n## Software installation on NUC\nCreate a catkin workspace:\n```\nmkdir -p ~/catkin_ws/src\ncd ~/catkin_ws/\ncatkin build\n```\nDownload ROS packages. All the scripts are stored [here](https://github.com/airalab/robot_painter/tree/test_branch). Clone the repository:\n```\ncd src\ngit clone --branch test_branch https://github.com/airalab/robot_painter\ncd robot_painter\nrm -rf scenes\nmv * ../\ncd ..\nrmdir robot_painter\n```\nYou may need some header files and libraries to make it all work correctly. Download them:\n```\ncd ~\ngit clone https://github.com/PaTara43/kuka_moveit_webots\ncd kuka_moveit_webots\nsudo mv -r headers/* usr/include/c++/7/\nsudo mv libs/* usr/local/lib/\ncd ~\nsvn checkout https://github.com/PX4/Matrix/trunk/matrix\nmv matrix -r /usr/include/c++/7/\nsudo apt-get install ros-melodic-brics-actuator\ncd ~/catkin_ws\ncatkin build\n```\nAdd source command to `.bashrc` file:\n```\necho “source ~/catkin_ws/devel/setup.bash” >> ~/.bashrc\nsource ~/.bashrc\n```\nUp to now. you should be able to launch the scripts. If something goes wrong, try some [troubleshooting](https://github.com/airalab/robot_painter/issues)\n\n## Filling in constants\nFirst of all, the robot needs to know canvas location and orientation as well as the paint tin position. All of this is specified in `fake_painter_enviroment_tf/src/tf_broadcaster.cpp`. Let's take a look into it.\n```\n// Plane constants\nconst double A = -0.0641;\nconst double B = 0.0214;\nconst double C = 0.9977;\nconst double D = -0.2198;\n\n// Canvas transform\nconst double px = 0.52;\nconst double py = -0.24;\nconst double qx = -0.011;\nconst double qy = -0.032;\nconst double qz = 0.0;\nconst double qw = 0.999;\n```\nThese are the plane equation constants which specify canvas position in 3-D space. They are to be obtained during a calibration process described below. Next goes the paint.\n```\ncolorTransform.transform.translation.x = 0.5;\ncolorTransform.transform.translation.y = 0.2;\ncolorTransform.transform.translation.z = 0.258;\n```\nThese are paint tin coordinates. They also may be specified while calibrating. Canvas size is specified in\n```\ncanvas.width = 0.5;\ncanvas.height = 0.4;\n```\nSeveral more important constants are stored in `local_task_planner/src/Drawing.cpp`:\n```\nconst double COLOR_BOTLE_HEIGHT = 0.06;\nconst double COLOR_HEIGHT = 0.045;\nconst double HEIGHT_OFFSET = COLOR_BOTLE_HEIGHT - COLOR_HEIGHT + 0.02;\nconst double BRUSH_HEIGHT = 0.01;\nconst double BRUSH_WIDTH = 0.01;\n```\nTheir names say it all, so fill them in according to the situation.\n\n## Calibrating Gaka-Chu\nThe calibration process itself is pretty simple.\n\n1) Start EKI interface on the KRC4:\n\nLog in in 'AUT' mode, turn on drivers and launch the script `eki_hw_interface`\n\n2) Start EKI interface on the NUC\n```\nroslaunch kuka_eki_hw_interface test_hardware_interface.launch\n```\nIt should output endless logs.\n\n3) Start RViz\n```\nroslaunch kuka_moveit_config demo.launch\n```\nYou should see the following:\n\n![KUKA in RViz](../images/kuka-real/kuka_rviz.png \"KUKA in RViz\")\n\nTry moving the end effector and clicking 'Plan and Execute'. The robot should move. On SmartPad go to **Display -> Actual position** and observe end effector's coordinate. Place a canvas horizontally to the robot base. Plug a brush into the brush holder and carefully move it till it barely touches the canvas. At this position, save end effector's coordinates. Repeat 12-15 times. Also, save the coordinates of the canvas center and paint tin.\nWhen you have a set of coordinates, use [these](https://github.com/nakata5321/Matlab_scripts_gaka-chu) Matlab scripts to resolve the missing constants and quaternion. Paste them. Rebuild your workspace with\n```\ncd ~/catkin_workspace\nrm -rf build logs devel\ncatkin build\n```\n\n## Testing Gaka-Chu calibration\nWhen calibrated, Gaka-Chu needs to be tested by drawing the borders of canvas. To make him do so execute each in new terminal:\n```\nroslaunch kuka_eki_hw_interface test_hardware_interface.launch\nroslaunch kuka_moveit_config demo.launch\nrosrun fake_painter_enviroment_tf tf_broadcaster\nrosrun local_task_planner draw_workspace\n```\nAfter this, you should see a canvas contour in RViz:\n\n![KUKA in RViz canvas](../images/kuka-real/kuka_rviz_canvas.png \"KUKA in RViz canvas\")\n\nIn terminal press \"S\" to perform testing. Robot's end effector should move right above the borders of the canvas and the brush should gently touch the canvas during the entire movement. If not so, try recalibrating. If the canvas model is rotated wrong, you can rotate it by changing quaternion in Matlab.\n\n## Making art\nYou need 6 basic modules to make it all work:\n- EKI interface;\n- MOVEit + RViz;\n- Environment frames broadcasting;\n- Picture converter service;\n- Trajectories drawing module;\n- Starting trigger.\n\nLet's launch them one by one.\n\n### Eki interface\nOn KRC4 launch `eki_hw_interface`, on NUC in a new terminal do:\n```\nroslaunch kuka_eki_hw_interface test_hardware_interface.launch\n```\n\n### RViz and MOVEit\nYou need a planner and a simulation. Launch them with\n```\nroslaunch kuka_moveit_config demo.launch\n```\n\n### Environment\nTell the robot where the paint tin and the canvas are. Note that it is not necessary to launch `draw workspace` node, the `tf_broadcaster` shares the canvas size. It just doesn't show it in RViz.\n```\nrosrun fake_painter_enviroment_tf tf_broadcaster\n```\n\n### Pictures processor\nAll incoming pictures need to be processed. Launch the service.\n```\nrosrun picture_preprocessing TextConverter.py\n```\nWhen it receives the call, it processes a picture with a HP filter and creates a rosbag file with trajectories.\n\n### Trajectories drawer\nThe mainest script here is the trajectories drawer itself. It waits for the picture, calls TextConverter service and draws the painting.\n```\nrosrun local_task_planner trajectory_drawing\n```\n\n## Send the robot a picture to draw\nThe robot listens to a specific ROS-topic where you need to pass the path to a desired picture. The picture should be square (width equals height) and made of lines. Send the path:\n```\nrostopic pub /run std_msgs/String \"data: '<path_to_picture>'\"\n```\nAfter that. Two windows pop up showing the contours and the tracks. Close them and see Gaka-Chu drawing. Watch out for safety and alwasy be ready to press emergency stop button.\nWhen Gaka-Chu finishes his art, you can send another path to picture and painter repeats the whole process.\n","tools":[],"fileInfo":{"path":"pt/gaka-chu.md","name":"gaka-chu"}}},"context":{}}