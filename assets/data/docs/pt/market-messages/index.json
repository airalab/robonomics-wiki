{"hash":"fd5d0a5f3aa1c3e6f4368684b3f72c24a1a4a9b2","data":{"doc":{"id":"94cf7e35a698e140bdfc9487d4bbf4e5","title":"Market messages","description":"","cover_image":{"type":"image","mimeType":"image/png","src":"/assets/static/market-messages.0b85c65.0606e7c29c7f0c0aed9be1d22da101dc.png","size":{"width":1920,"height":1080},"sizes":"(max-width: 1920px) 100vw, 1920px","srcset":["/assets/static/market-messages.1b91758.0606e7c29c7f0c0aed9be1d22da101dc.png 480w","/assets/static/market-messages.3df3210.0606e7c29c7f0c0aed9be1d22da101dc.png 1024w","/assets/static/market-messages.0b85c65.0606e7c29c7f0c0aed9be1d22da101dc.png 1920w"],"dataUri":"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 1920 1080' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-df494e1eb6fbe956e5c980754c3e6756'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='40'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-df494e1eb6fbe956e5c980754c3e6756)' width='1920' height='1080' xlink:href='data:image/png%3bbase64%2ciVBORw0KGgoAAAANSUhEUgAAAEAAAAAkCAYAAAA5DDySAAAACXBIWXMAAAsSAAALEgHS3X78AAACzklEQVRo3u2YaU9TQRSG%2bQkGUT%2boFVARtMYt8ZP/wY/GxC1R6oIFtRqqKMoiEMWIIpE1wQ2FVEQIxsQEkVpAcAuaGGVJLaV2w0IX25Levs5M2oa1ECPxFuckb%2bbOzLlN57nnzj1nopbGJYIqJnYdoleuQbx0G%2bwOB6gJgoC/ZX6/H2K0qCVk4VRxG7ZOAUBtUD%2bE3v4BaHWD%2bPL1G3SDegxov8NoMqO3rx/6IQMMRiP6Aj5anQ7W4eHQPXTeZhsRLYSoxZK1bPE7d%2b2FJHETYtdvmQCgpk6FE%2bkZqKi%2bh/2yFNwqq0RmbgGyCwqRf%2b0GLuTk49ylXCgv5uBuTS1u3i5HfWMzDqcqkJV/FVeuF6P9TTf7LZ/PJz4AMasSIEnaDOn2HVieIEUsgTEewKjdjh9GE3vi9GkaTSaYzBbYRkagNxjw02YLzJtgtljJnBkOhxNW6zAsrG%2bB3e4QbwSw959AiCaRsGjFasRv/A/3AAphWXzSlD2A/mkqQQi2QmhsfF8IyB9Goo6AoKYDsNCNA%2bAAOAAOgAPgADiAmQFMl8xMvg7nsyAiILggWsz4AtkfuyYSZvCZ0E5SMMUWA6hZAcylHviTmkEsERIWALW6%2bqcoKa9C5Z376CBl7ZOmZlQ/eIiut%2b%2bhamhEyys1Gp89R3FpBcqqqqHp7IJa04GXba/R2f0OrWoN2slYm6ad%2bdLxDz2fIiMCqNU%2bbsA%2bWQo7A9h9IBl5hUU4n5MH%2bWkljqQp8EhVjyYCYM%2bho0jPzEbqmbPIyLqM4wola2XyUzh4LI2dJSTLT7KzhaKS0lDkiP4V8Hq98I6Nwel0YXTUDg/pj5E%2bPSfweLxwu92spX4ejwe/SJ/K4XQyfzcZ%2b9jzGS9aWkP%2bTpcrMiKAlsHzZRGxB/hnqfHnKiHwNRDj53JeE6GZcgeeCXIAHAAHwAFwABwAB8ABcAAcAAfAAfxj%2bw0sr6tgPSxuiQAAAABJRU5ErkJggg==' /%3e%3c/svg%3e"},"contributors":[],"translated":true,"headings":[],"subtitles":[{"depth":2,"value":"Messages content","anchor":"#messages-content"},{"depth":3,"value":"Demand","anchor":"#demand"},{"depth":3,"value":"Offer","anchor":"#offer"},{"depth":3,"value":"Result","anchor":"#result"},{"depth":2,"value":"Messages signing","anchor":"#messages-signing"}],"content":"\nMarket messages is used for exchange **Demand** and **Offer** information. It also used for delivery **Result** messages with liability execution reports.\n\n> This is spec for Robonomics `Generation 5`.\n\n- Currently for message delivery is used [IPFS PubSub](https://ipfs.io/blog/25-pubsub/) broadcaster.\n- IPFS PubSub **topic** is set according to *Lighthouse [ENS](https://ens.domains/) name*.\n\n## Messages content\n\nRobonomics market message use [JSON](https://www.json.org/) data format.\n\n\n### Demand\n\n| Field | ROS Type | Description |\n|-------------- |-------------------------  |------------------------------------------------ |\n| model | [ipfs_common/Multihash](/docs/ipfs-common-messages#ipfs_commonmultihashmsg) | CPS behavioral model identifier |\n| objective | [ipfs_common/Multihash](/docs/ipfs-common-messages#ipfs_commonmultihashmsg) | CPS behavioral model parameters in rosbag file |\n| token | [ethereum_common/Address](/docs/ethereum-common-messages#ethereum_commonaddressmsg) | Operational token address |\n| cost | [ethereum_common/UInt256](/docs/ethereum-common-messages#ethereum_commonuint256msg) | CPS behavioral model execution cost |\n| lighthouse | [ethereum_common/Address](/docs/ethereum-common-messages#ethereum_commonaddressmsg) | Lighthouse contract address |\n| validator | [ethereum_common/Address](/docs/ethereum-common-messages#ethereum_commonaddressmsg) | Observing network address |\n| validatorFee  | [ethereum_common/UInt256](/docs/ethereum-common-messages#ethereum_commonuint256msg) | Observing network fee |\n| deadline | [ethereum_common/UInt256](/docs/ethereum-common-messages#ethereum_commonuint256msg) | Deadline block number |\n| nonce | [ethereum_common/UInt256](/docs/ethereum-common-messages#ethereum_commonuint256msg) | Robonomics message counter |\n| sender | [ethereum_common/Address](/docs/ethereum-common-messages#ethereum_commonaddressmsg) | Message sender address |\n| signature | std_msgs/UInt8[] | Sender’s Ethereum signature |\n\n### Offer\n\n| Field             | ROS Type                  | Description                                       |\n|---------------    |-------------------------  |------------------------------------------------   |\n| model             | [ipfs_commom/Multihash](/docs/ipfs-common-messages#ipfs_commonmultihashmsg)     | CPS behavioral model identifier                   |\n| objective         | [ipfs_commom/Multihash](/docs/ipfs-common-messages#ipfs_commonmultihashmsg)     | CPS behavioral model parameters in rosbag file    |\n| token             | [ethereum_commom/Address](/docs/ethereum-common-messages#ethereum_commonaddressmsg)   | Operational token address                         |\n| cost              | [ethereum_commom/UInt256](/docs/ethereum-common-messages#ethereum_commonuint256msg)   | CPS behavioral model execution cost               |\n| validator         | [ethereum_commom/Address](/docs/ethereum-common-messages#ethereum_commonaddressmsg)   | Observing network address                         |\n| lighthouse        | [ethereum_commom/Address](/docs/ethereum-common-messages#ethereum_commonaddressmsg)   | Lighthouse contract address                       |\n| lighthouseFee     | [ethereum_commom/UInt256](/docs/ethereum-common-messages#ethereum_commonuint256msg)   | Liability creation fee                            |\n| deadline          | [ethereum_commom/UInt256](/docs/ethereum-common-messages#ethereum_commonuint256msg)   | Deadline block number                             |\n| nonce             | [ethereum_commom/UInt256](/docs/ethereum-common-messages#ethereum_commonuint256msg)   | Robonomics message counter                        |\n| sender            | [ethereum_commom/Address](/docs/ethereum-common-messages#ethereum_commonaddressmsg)   | Message sender address                            |\n| signature         | std_msgs/UInt8[]          | Sender’s Ethereum signature                       |\n\n### Result\n\n| Field         | ROS Type                  | Description                       |\n|-----------    |-------------------------  |---------------------------------- |\n| liability     | [ethereum_commom/Address](/docs/ethereum-common-messages#ethereum_commonaddressmsg)   | Liability contract address        |\n| result        | [ipfs_commom/Multihash](/docs/ipfs-common-messages#ipfs_commonmultihashmsg)     | Liability result multihash        |\n| success       | std_msgs/Bool             | Is liability executed successful  |\n| signature     | std_msgs/UInt8[]          | Sender’s Ethereum signature       |\n\n## Messages signing\n\nBefore signing the messages is packed using [abi.encodePacked](https://solidity.readthedocs.io/en/latest/abi-spec.html#non-standard-packed-mode\n) solidity finction and hashed by Keccak_256.\n\n```\n   demandHash = keccak256(abi.encodePacked(\n        _model\n      , _objective\n      , _token\n      , _cost\n      , _lighthouse\n      , _validator\n      , _validator_fee\n      , _deadline\n      , IFactory(factory).nonceOf(_sender)\n      , _sender\n      ));\n```\n\n**`nonce` parameter is counted by factory smart contract and incremented for each created liability smart contract.**\n\nMessage hash are signed using Ethereum ``secp256k1`` [signature](https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_sign).\n"}},"context":{}}