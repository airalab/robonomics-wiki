{"hash":"374e5e6bd3c921ba1dd42a764de57557a5b04902","data":{"doc":{"id":"54d8dfaf8f5c340051bb78ce1b3f3524","title":"Responsabilidade","description":"","contributors":["PaTara43"],"headings":[],"subtitles":[{"depth":2,"value":"Visão Geral da Teoria","anchor":"#visão-geral-da-teoria"},{"depth":3,"value":"Negociações","anchor":"#negociações"},{"depth":3,"value":"Assinaturas","anchor":"#assinaturas"},{"depth":2,"value":"Criar Responsabilidade","anchor":"#criar-responsabilidade"},{"depth":3,"value":"Preparativos","anchor":"#preparativos"},{"depth":3,"value":"1. Crie três contas e adicione fundos a elas","anchor":"#1-crie-três-contas-e-adicione-fundos-a-elas"},{"depth":3,"value":"1. Navegue até Developer -> Extrinsics","anchor":"#1-navegue-até-developer---extrinsics"},{"depth":3,"value":"2. Escolha a liability -> create na lista suspensa de extrínsecos possíveis","anchor":"#2-escolha-a-liability---create-na-lista-suspensa-de-extrínsecos-possíveis"},{"depth":3,"value":"3. Envie a transação","anchor":"#3-envie-a-transação"},{"depth":3,"value":"4. Revise sua responsabilidade nos eventos","anchor":"#4-revise-sua-responsabilidade-nos-eventos"},{"depth":3,"value":"5. Explorando o armazenamento","anchor":"#5-explorando-o-armazenamento"},{"depth":2,"value":"Relatórios","anchor":"#relatórios"},{"depth":3,"value":"1. Navegue até extrinsics, liability -> finalize(report)","anchor":"#1-navegue-até-extrinsics-liability---finalizereport"},{"depth":3,"value":"2. Explore relatórios","anchor":"#2-explore-relatórios"},{"depth":3,"value":"3. Verifique os saldos","anchor":"#3-verifique-os-saldos"}],"content":"\n**Para transformar robôs em agentes econômicos, é necessário uma ferramenta de contrato para isso. Conheça a Responsabilidade - Robonomics pallet implementando contratos entre contas parachain!**\n\n<robo-wiki-note type=\"warning\" title=\"Dev Node\">\n\n  Por favor, preste atenção que este tutorial é demonstrado em uma instância local do Robonomics Node. Configure o seu com [estas instruções](/docs/run-dev-node).\n\n</robo-wiki-note>\n\n## Visão Geral da Teoria\n\nDe volta ao Ethereum, havia uma estrutura bastante complicada de interação de responsabilidade. Você pode se familiarizar com ela [aqui](/docs/robonomics-how-it-works). Hoje em dia as coisas estão um pouco mais fáceis com o Kusama!\n\n### Negociações\n\nPara assinar um contrato, os dois lados precisam primeiro negociar. Isso pode ser feito de várias maneiras, incluindo [IPFS PubSub](https://blog.ipfs.tech/25-pubsub/) ou Robonomics PubSub. Um exemplo de código Python usando Robonomics PubSub é apresentado [aqui](https://multi-agent-io.github.io/robonomics-interface/usage.html#pubsub).\n\nOferta e demanda são mensagens contendo duas características principais de um contrato: **descrição do trabalho** e **preço**. O formato da mensagem deve ser projetado pelo usuário para cada aplicação específica. Não é tão importante no processo de negociação seguir uma regra de formato estrito. O fluxo possível é apresentado na imagem abaixo.\n\n<robo-wiki-picture src=\"liability/negotiations.jpg\" />\n\n<robo-wiki-note type=\"warning\" title=\"PubSub\">\n\n  Observe que o PubSub é um protocolo aberto, portanto, nenhum dado sensível deve ser transferido. Para isso, você deve usar outros protocolos.\n\n</robo-wiki-note>\n\n\n### Assinaturas\n\nQuando as negociações terminam com sucesso, cada lado precisa assinar o chamado acordo denominado assinatura. Esta é uma mensagem contendo descrição do trabalho e preço **em formato específico** assinado com uma chave privada da conta. Existe uma [ferramenta Python](https://multi-agent-io.github.io/robonomics-interface/modules.html#robonomicsinterface.Liability.sign_liability) para isso também.\n - A descrição do trabalho é chamada de **técnica**. Esta é uma string de 32 bytes de comprimento, semelhante a um lançamento, que pode ser um CID IPFS codificado.\n - O preço é chamado de **economia**. Este é um decimal XRT - Weiner. 1 Weiner = 10**-9 XRT.\n\n<robo-wiki-note type=\"note\" title=\"32 bytes\">\n\n  Você pode obter um [CID](https://ipfs.tech/) IPFS formatado de maneira adequada com a [biblioteca Python](https://multi-agent-io.github.io/robonomics-interface/modules.html#robonomicsinterface.utils.ipfs_qm_hash_to_32_bytes).\n  Ao usar a função `sign_liability`, não é necessário transformar o hash, isso será feito automaticamente.\n\n</robo-wiki-note>\n\nSeguindo o exemplo do café:\n\n1. A tarefa é um JSON\n```json\n{\"task\": \"make_espresso\", \"description\": \"Make one cup of espresso\"}\n```\n2. Seu CID IPFS é `QmP17mWKtQtq2Gq6qZAggPRrho3sVjQGBpXZ8KZiQ57FDi`\n3. Portanto, a **técnica** (CID transformado) é `0x09daaa8055722a6894951b1273e807f8a46628efeec46805f0228ace230bd5a9` \n4. **Economia** é `1.5 XRT`.\n\nQuando assinado, é hora de criar uma responsabilidade! Isso pode ser feito por um dos lados (seja o promitente ou o promissor) ou por uma conta de terceiros de um chamado provedor.\n\n## Criar Responsabilidade\n\n### Preparativos\n\nComo mencionado anteriormente, pelo menos dois lados estão envolvidos no processo. Para este exemplo, vamos usar três e fazer um provedor separado para isso. Suponha que as negociações já tenham ocorrido de alguma forma.\n\n### 1. Crie três contas e adicione fundos a elas\n\n<robo-wiki-picture src=\"liability/balances.jpg\" />\n\nAqui fornecemos ao provedor 100 XRT para assinar extrínsecos de responsabilidade, o promitente recebeu 2 XRT para pagar pelo trabalho.\nO promissor não recebeu nenhum fundo (exceto por um depósito existencial de pelo menos 1 mXRT).\n\n### 1. Navegue até Developer -> Extrinsics\n\n<robo-wiki-picture src=\"liability/extrinsics.jpg\" />\n\n### 2. Escolha a liability -> create na lista suspensa de extrínsecos possíveis\n\nTambém escolha uma conta com a qual você deseja enviar o extrínseco. Preencha todos os parâmetros.\n\n<robo-wiki-picture src=\"liability/create.jpg\" />\n\n<robo-wiki-note type=\"note\" title=\"Signatures\">\n\n  Como o provedor é usado aqui, não é necessário conhecer as sementes dos participantes. Apenas suas assinaturas são necessárias.\n\n</robo-wiki-note>\n\n### 3. Envie a transação\n\n<robo-wiki-picture src=\"liability/submit.jpg\" />\n\n### 4. Revise sua responsabilidade nos eventos\n\nPara isso, navegue até `Network -> Explorer` e encontre uma lista de eventos à direita. Clique em um ícone de triângulo para expandir.\n\n<robo-wiki-picture src=\"liability/new-liability.jpg\" />\n\n<robo-wiki-note type=\"note\" title=\"Hash\">\n\n  O hash pode ser transformado em um CID IPFS com a mesma [ferramenta Python](https://multi-agent-io.github.io/robonomics-interface/modules.html#robonomicsinterface.utils.ipfs_32_bytes_to_qm_hash).\n\n</robo-wiki-note>\n\n### 5. Explorando o armazenamento\n\nVocê também pode explorar algumas características das responsabilidades no módulo de armazenamento `liability`.\n\n<robo-wiki-picture src=\"liability/storage-liability.jpg\" />\n\n<robo-wiki-note type=\"note\" title=\"Next Index\">\n\n  A função de armazenamento `Next Index` mostra o último índice de responsabilidade +1, então mesmo que seja `1`, a responsabilidade `0` é explorada.\n\n</robo-wiki-note>\n\n## Relatórios\n\nImaginem que um café foi feito e agora a máquina de café precisa relatar de alguma forma. É aí que entram os relatórios de responsabilidade. Como prova de trabalho, a conta adiciona outro CID IPFS como conteúdo do relatório ao finalizar a responsabilidade existente. Isso novamente requer uma assinatura do promissor.\n\n<robo-wiki-note type=\"note\" title=\"Report signature\">\n\n  A mensagem assinada contém o índice de responsabilidade existente e o CID IPFS do relatório codificado em uma representação de 32 bytes. Mais uma vez, a [ferramenta Python](https://multi-agent-io.github.io/robonomics-interface/modules.html#robonomicsinterface.Liability.sign_report) pode ajudar a assinar o relatório.\n\n</robo-wiki-note>\n\nContinuando com o exemplo da máquina de café:\n\n1. O relatório é um JSON\n```json\n{\"report\": \"Coffee made! Time to execute - 80 seconds.\"}\n```\n2. Seu CID IPFS é `QmeXCrBuv6cw825JJfSWqNVv28AyjJZW9KReN9wcLQjfCm`\n3. Portanto, a **carga útil** (CID transformado) é `0xf06f2394f55537a5f37d63fd72bfbef50e9f60ea9e0e34224e455afae27a97a2`\n4. **Índice** é `0`, é o índice de responsabilidade existente.\n\n### 1. Navegue até extrinsics, liability -> finalize(report)\n\nPreencha os parâmetros e envie extrínseco. Novamente, isso pode ser feito por uma conta de terceiros.\n\n<robo-wiki-picture src=\"liability/report.jpg\" />\n\n<robo-wiki-note type=\"warning\" title=\"Existential deposit\">\n\n  Atenção para que a conta do promissor não esteja \"inativa\" - ela deve ter o depósito existencial de pelo menos 1 mXRT.\n\n</robo-wiki-note>\n\nAssine e envie o relatório. Quando terminar, você pode explorá-lo nos eventos.\n\n<robo-wiki-picture src=\"liability/new-report.jpg\" />\n\n### 2. Explore relatórios\n\nVocê também pode observar o relatório no armazenamento. Vá para  `Developer -> Storage` e escolha `liability` na lista suspensa.\n\n<robo-wiki-picture src=\"liability/storage-report.jpg\" />\n\n### 3. Verifique os saldos\n\nNa imagem é mostrado que agora o promissor recebeu o \"salário\". A relação econômica aconteceu!\n\n<robo-wiki-picture src=\"liability/balances-2.jpg\" />\n\n\n<robo-wiki-note type=\"note\" title=\"Verifying\">\n\n  Por enquanto, não há maneira de verificar se o trabalho foi concluído, portanto, assim que o promissor relatar, os tokens são transferidos para sua conta. \n  O recurso de verificação será adicionado no futuro.\n\n</robo-wiki-note>","tools":["Robonomics 2.3.0 https://github.com/airalab/robonomics","robonomics_interface 1.3.5 https://github.com/Multi-Agent-io/robonomics-interface"],"fileInfo":{"path":"pt/liability.md","name":"liability"}}},"context":{}}