{"hash":"1e020d1fc74b5e36a067a169ec239f10bbcc6b81","data":{"doc":{"id":"09d1da0919bf87a077358f37c7aeba30","title":"Connect the simplest CPS","description":"","contributors":["ensrationis","akru"],"translated":false,"headings":[],"subtitles":[{"depth":2,"value":"Arduino","anchor":"#arduino"},{"depth":2,"value":"AIRA client","anchor":"#aira-client"},{"depth":2,"value":"ROS","anchor":"#ros"},{"depth":2,"value":"AIRA","anchor":"#aira"}],"content":"\nIn this section we will build the simplest real cyber-physical system!\n\nWe will buy a \"wink\" from Arduino, e.g. make Arduino blink with its onboard led. The lesson is tested on Arduino Uno, but any other board with a led will do the job.\n\n> The source code of this lesson is [here](https://github.com/airalab/robonomics_tutorials/tree/master/arduino_blink).\n\n## Arduino\n\nThe firmware for the board is located in [arduino_blink/misc/arduino/arduino.ino](https://github.com/airalab/robonomics_tutorials/blob/master/arduino_blink/misc/arduino/arduino.ino). Use [Arduino IDE](https://www.arduino.cc/en/Main/Software) to load the code to your Arduino board.\n\nIn the code we subscribe for the ``/blink_led`` topic and set a callback. The type of the topic is ``Empty``, so the board waits until someone publishes to the topic and performs the LED blinking.\n\n```\n  #include <ros.h>\n  #include <std_msgs/Empty.h>\n\n  ros::NodeHandle  nh;\n\n  void blink(int led, int mil) {\n\n    digitalWrite(led, HIGH);\n    delay(mil);\n    digitalWrite(led, LOW);\n    delay(mil);\n\n  }\n\n  void messageCb( const std_msgs::Empty& toggle_msg){\n    blink(LED_BUILTIN, 500);\n    blink(LED_BUILTIN, 500);\n    blink(LED_BUILTIN, 500);\n  }\n\n  ros::Subscriber<std_msgs::Empty> sub(\"blink_led\", &messageCb );\n\n  void setup()\n  {\n    pinMode(LED_BUILTIN, OUTPUT);\n    nh.initNode();\n    nh.subscribe(sub);\n  }\n\n  void loop()\n  {\n    nh.spinOnce();\n    delay(1);\n  }\n```\n\n\n## AIRA client\n\n> You can download the latest release from [here](https://github.com/airalab/aira/releases).\n\nSet up the COM port forwarding. You should forward your `/dev/ttyUSB0` or `/dev/ttyACM0` port (depending on the system) to `COM1`. In the client `/dev/ttyS0` will represent the board. After this launch the virtual machine.\n\n## ROS\n\nWhen new liability is created it goes to `/liability/ready` topic. We have to remember the address and call `/liability/start` service to get the data from objective.\n\n```\n  def newliability(l):\n    self.liability = l.address\n    rospy.loginfo(\"Got new liability {}\".format(self.liability))\n\n    prefix = \"/liability/eth_\" + self.liability\n    rospy.Subscriber(prefix + '/blink', Empty, self.blink)\n\n    rospy.wait_for_service(\"/liability/start\")\n    rospy.ServiceProxy('/liability/start', StartLiability)(StartLiabilityRequest(address=self.liability))\n  rospy.Subscriber(\"/liability/ready\", Liability, newliability)\n```\n\nA message in the `/blink` topic come from the objective field. Have a look at [Basic usage](/docs/aira-basic-usage) page.\n\n## AIRA\n\nConnect to AIRA client via SSH as described [here](/docs/aira-connecting-via-ssh). All tutorials are pre-installed. To launch the ros package run the following command:\n\n```\n$ rosrun arduino_blink blink.py\n```\n\nAlso we need to add a rosbag file to IPFS::\n\n```\n$ ipfs add rosbag/blink.bag\n```\n\n> Before the next step you should approve XRT tokens on the Factory.\n\nOn your host system build and launch an Dapp for the lesson:\n\n```\n$ git clone https://github.com/airalab/robonomics_tutorials/\n$ cd robonomics_tutorials/arduino_blink_dapp\n$ npm i && npm run dev\n```\n\nOpen [http://localhost:8000/](http://localhost:8000/) and press \"Demand\" then \"Offer\" buttons. Wait until a new liability is created and you should see the board blinking. Congratulations on the first agent!\n","tools":[],"fileInfo":{"path":"pt/connect-simple-cps.md","name":"connect-simple-cps"}}},"context":{}}