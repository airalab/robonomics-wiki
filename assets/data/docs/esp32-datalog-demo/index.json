{"hash":"cb4c129b3e2be6c76e5d06e65fc08b2878de0f17","data":{"doc":{"id":"d8f19de48e41878d33efb763651602f8","title":"How to Send Extrinsic from ESP32","description":"","contributors":["LoSk-p"],"headings":[],"subtitles":[{"depth":3,"value":"Requirements","anchor":"#requirements"},{"depth":3,"value":"Installation","anchor":"#installation"},{"depth":3,"value":"Configuration","anchor":"#configuration"},{"depth":3,"value":"Upload","anchor":"#upload"},{"depth":3,"value":"Run","anchor":"#run"}],"content":"\nSend Datalog extrinsic in Robonomics Network on ESP32 using [robonomics-client-cpp](https://github.com/airalab/robonomics-client-cpp). The code of the demo you can find [here](https://github.com/LoSk-p/esp32-datalog-demo).\n\n### Requirements\n\n* Platformio core ([installation instructions](https://docs.platformio.org/en/latest/core/installation/methods/installer-script.html)).\n* Any serial client for your OS (`tio` for Linux, for example). You can install `tio` with the following command\n```bash\nsudo apt install tio\n```\n### Installation\nClone the repo:\n```bash\ngit clone https://github.com/LoSk-p/esp32-datalog-demo.git\n```\n### Configuration\nCreate file `Private.h` in `src` folder with the following content:\n```\n#pragma once\n\n// Set up real keys and addresses instead of dummy values\n#define PRIV_KEY \"\"\n\n#define SS58_ADR \"\"\n\n// WiFi\n#ifndef STASSID\n#define STASSID \"\"\n#define STAPSK  \"\"\n#endif\n```\nand fill it with the information about your Robonomics account and WiFi Network. `PRIV_KEY` is the private key of your Robonomics account, `SS58_ADR` is its address.\n\n<robo-wiki-note type=\"warning\">This demo works only for ED25519 accounts!</robo-wiki-note>\n\n\nTo get the private key from your account seed phrase you can use [get-private-key.py](https://github.com/LoSk-p/esp32-datalog-demo/blob/main/get-private-key.py) script. Just run it and follow instructions:\n```bash\npython3 get-private-key.py\n```\n\n### Upload\nConnect ESP32 to the computer using USB cable and build the project:\n```bash\ncd esp32-datalog-demo\nplatformio run -t upload\n```\nThis command will build binary files for esp and upload them, so in the end you will see following\n```\nWriting at 0x000b9def... (84 %)\nWriting at 0x000bf4c2... (87 %)\nWriting at 0x000c56bf... (90 %)\nWriting at 0x000cc6df... (93 %)\nWriting at 0x000d1dec... (96 %)\nWriting at 0x000d71b0... (100 %)\nWrote 836160 bytes (538555 compressed) at 0x00010000 in 12.2 seconds (effective 548.7 kbit/s)...\nHash of data verified.\n\nLeaving...\nHard resetting via RTS pin...\n=========================== [SUCCESS] Took 24.08 seconds ===========================\n```\n\n### Run\n\nAfter uploading reconnect ESP to the computer aand run your Serial Client (tio with the port `/dev/ttyACM0` in this example):\n```bash\ntio /dev/ttyACM0\n```\nAnd write the text for Datalog record extrinsic.\n\nYou can find out the port in the logs arter `platformio run -t upload` command in the previous section. Look for something like this:\n```\nAuto-detected: /dev/ttyACM0\nUploading .pio/build/nodemcu-32s/firmware.bin\nesptool.py v4.5.1\nSerial port /dev/ttyACM0\nConnecting.......\n```","tools":[],"fileInfo":{"path":"esp32-datalog-demo.md","name":"esp32-datalog-demo"}}},"context":{}}