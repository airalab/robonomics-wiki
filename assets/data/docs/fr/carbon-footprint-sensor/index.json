{"hash":"d3d0c5839881173ea5ce58941786b122f010825e","data":{"doc":{"id":"9b5d5ef07e4b7a24e6b125fa462a8fde","title":"Connexioner le capteur","description":"","contributors":["LoSk-p","makyul"],"headings":[],"subtitles":[{"depth":2,"value":"Exigences","anchor":"#exigences"},{"depth":2,"value":"Clé Zigbee","anchor":"#clé-zigbee"},{"depth":2,"value":"Installeration","anchor":"#installeration"},{"depth":2,"value":"Configuration","anchor":"#configuration"},{"depth":2,"value":"Connectez la prise","anchor":"#connectez-la-prise"},{"depth":2,"value":"Après l'appariement","anchor":"#après-lappariement"},{"depth":2,"value":"En cours d'exécution","anchor":"#en-cours-dexécution"}],"content":"\nUn exemple de travail est dans la vidéo:\n\nhttps://youtu.be/jsaFCVAx2sA\n\n## Exigences\n\n* [Aqara Smart Plug](https://aqara.ru/product/aqara-smart-plug/?yclid=462434430312045270)\n* Raspberry Pi\n* Zigbee adapter [JetHome USB JetStick Z2](https://jhome.ru/catalog/parts/PCBA/293/) (ou l'un des [pris en charge](https://www.zigbee2mqtt.io/dansformation/supported_adapters.html))\n\nLe service fonctionne sur Raspberry Pi et contacte la prise intelligente via le protocole zigbee.\n\n## Clé Zigbee\n\nSi vous avez le JetHome USB JetStick Z2, il possède déjà le micrologiciel nécessaire, vous n'avez donc pas besoin de le flasher. Mais si vous avez un autre adaptateur, vous devez d'abord le flasher avec le logiciel zigbee2MQTT. Vous pouvez trouver des instructions pour votre appareil [ici](https://www.zigbee2mqtt.io/information/supported_adapters.html).\n\nConnectez l'adaptateur et vérifiez l'adresse de l'adaptateur (cela peut aussi être `/dev/ttyUSB1`):\n```bash\n$ ls -l /dev/ttyUSB0\ncrw-rw---- 1 root dialout 166, 0 May 16 19:15 /dev/ttyUSB0 \n```\n\nVous devrez peut-être d'abord accéder au port USB. Ajoutez votre utilisateur à `dialout` groupe (cela fonctionne pour Ubuntu, mais le nom du groupe peut être différent sur d'autres systèmes d'exploitation).\nPour Ubuntu:\n```bash\nsudo usermod -a -G dialout $USER\n```\nPour Arch:\n```bash\nsudo usermod -a -G uucp $USER\n```\nEnsuite, déconnectez-vous et reconnectez-vous ou redémarrez l'ordinateur.\n\n## Installeration\n\nClonez le référentiel:\n\n```\ngit clone https://github.com/makyul/robonomics-carbon-footprint.git\ncd robonomics-carbon-footprint\n```\n\n## Configuration\n\nAllez à `data/configuration.yaml` et définissez `permit_join: true`:\n\n```\n# Home Assistant integration (MQTT discovery)\nhomeassistant: false\n\n# allow new devices to join\npermit_join: true\n\n# MQTT settings\nmqtt:\n  # MQTT base topic for zigbee2mqtt MQTT messages\n  base_topic: zigbee2mqtt\n  # MQTT server URL\n  server: 'mqtt://172.17.0.1'\n  # MQTT server authentication, uncomment if required:\n  # user: my_user\n  # password: my_password\n\n# Serial settings\nserial:\n  # Location of CC2531 USB sniffer\n  port: /dev/ttyUSB0\n```\nVous voudrez peut-être également remplir les champs `server` et `port` avec les informations correspondantes. Dans le champ `server` utilisez l'adresse IP du `docker0` pont pour établir la connexion: \n\n```bash\n$ ip a                                                 127\n1: lo: <LOOPBACK,UP,LOWER_UP> mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000\n    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00\n\n...\n\n5: docker0: <NO-CARRIER,BROADCAST,MULTICAST,UP> mtu 1500 qdisc noqueue state DOWN group default \n    link/ether 02:42:0d:ff:5f:a3 brd ff:ff:ff:ff:ff:ff\n    inet 172.17.0.1/16 brd 172.17.255.255 scope global docker0\n       valid_lft forever preferred_lft forever\n    inet6 fe80::42:dff:feff:5fa3/64 scope link \n       valid_lft forever preferred_lft forever\n```\nIci, votre adresse est `172.17.0.1`.\n\nEnsuite, créez le fichier config/config.yaml avec les informations suivantes et définissez votre emplacement (vous pouvez vous référer à https://countrycode.org/ pour le code ISO à 3 lettres):\n\n```\nlocation: RUS\nservice_address: 4GdHeLbmio2noKCQM5mfxswXfPoW2PcbpYKKkM4NQiqSqJMd\ntwin_id: 5\nsending_timeout: 3600\nbroker_address: \"172.17.0.1\"\nbroker_port: 1883\n```\n\n## Connectez la prise\n\nPremière exécution:\n\n```\ndocker-compose up     \n```\n\nPour passer au mode d'appairage sur la prise, appuyez longuement sur le bouton d'alimentation pendant quelques secondes jusqu'à ce que le voyant commence à clignoter rapidement en bleu.\n\nDans les journaux, vous devriez voir maintenant que votre plug a commencé à publier sur mqtt.\n\n\n## Après l'appariement\n\nSi vous ne souhaitez pas autoriser d'autres appareils à s'associer à votre clé, vous devez maintenant aller à `data/configuration.yaml` et mettre `permit_join: false`. Redémarrez le service (utilisez 'Ctrl+C' et\n\n```bash\ndocker-compose up     \n```\nencore une fois pour soumettre les modifications).\n\n## En cours d'exécution\nLors du premier démarrage, un compte pour la prise sera créé. \n> Si vous avez déjà un compte, vous devez ajouter sa graine au fichier `config.config.yaml` dans la section `device_seed` :\n>\n> ```\n> location: RUS\n> service_address: 4GdHeLbmio2noKCQM5mfxswXfPoW2PcbpYKKkM4NQiqSqJMd\n> twin_id: 5\n> sending_timeout: 3600\n> broker_address: \"172.17.0.1\"\n> broker_port: 1883\n> device_seed: <device_seed>\n>```\n\nAprès la création du compte, vous verrez l'adresse dans les journaux (la graine sera ajoutée à `config/config.yaml`):\n```\nplug               | Generated account with address: 4GuP82BMAgrbtU8GhnKhgzP827sJEaBXeMX38pZZKPSpcWeT\n```\nVous devez transférer quelques jetons sur ce compte pour les frais de transaction, vous pouvez le faire sur [Robonomics Portal](https://polkadot.js.org/apps/?rpc=wss%3A%2F%2Fkusama.rpc.robonomics.network%2F#/accounts). \n\nLe service verra que vous avez suffisamment de jetons, dans les journaux vous verrez:\n```\nplug               | Balance is OK\n```\nLe service verra les messages MQTT de la prise et assurera une utilisation sûre de l'énergie. Toutes les heures (vous pouvez modifier le délai d'attente dans la section `config/config.yaml` in `sending_timeout` , le délai d'attente est en secondes), il créera un journal de données avec les informations suivantes:\n```\n{'geo': 'RUS', 'power_usage': 1.021237391233444, 'timestamp': 1644494860.5860083}\n```\n","tools":[],"fileInfo":{"path":"fr/carbon-footprint-sensor.md","name":"carbon-footprint-sensor"}}},"context":{}}