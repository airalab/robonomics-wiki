{"hash":"5a3268fc52e0f7185f77fad8dffb53b768d5d795","data":{"doc":{"id":"4a998ac3d8f782e50fbfdc92ff48dcc4","title":"Connexionez un appareil Amazon FreeRTOS à Robonomics via MQTT","description":"","contributors":["khssnv"],"headings":[],"subtitles":[{"depth":2,"value":"Configuration matérielle","anchor":"#configuration-matérielle"},{"depth":2,"value":"Flux de données","anchor":"#flux-de-données"},{"depth":2,"value":"Micrologiciel","anchor":"#micrologiciel"},{"depth":3,"value":"Configuration Wi-Fi","anchor":"#configuration-wi-fi"},{"depth":3,"value":"Configuration du point de terminaison MQTT","anchor":"#configuration-du-point-de-terminaison-mqtt"},{"depth":2,"value":"De MQTT à Robonomics","anchor":"#de-mqtt-à-robonomics"},{"depth":2,"value":"Ressources originales utilisées","anchor":"#ressources-originales-utilisées"}],"content":"\nVoici la démonstration de la façon dont un microcontrôleur exécutant [Amazon Web Services FreeRTOS](https://aws.amazon.com/freertos/) peut être connecté au réseau Robonomics via MQTT. Veuillez consulter [ce référentiel](http://github.com/khssnv/freertos_mqtt_robonomics_example) pour le code source du projet.\n\nNous utilisons [ESP32 DevKitC](https://devices.amazonaws.com/detail/a3G0L00000AANtjUAH/ESP32-WROOM-32-DevKitC/) avec la distribution FreeRTOS et la mise en œuvre MQTT fournies par [Espressif IoT Development Framework](https://github.com/espressif/esp-idf) tandis qu'Espressif est un fournisseur du microcontrôleur utilisé.\n\nIl y a aussi un capteur [PMS-3003](http://www.plantower.com/en/content/?107.html) à des fins de démonstration. Le capteur mesure la présence de particules dans l'air et on peut l'utiliser pour estimer la qualité de l'air.\n\nLa qualité de l'air n'est pas un sujet de l'article, vous pouvez en savoir plus à ce sujet sur le site web de l'OMS: [Pollution de l'air ambiant (extérieur)](https://www.who.int/news-room/fact-sheets/detail/ambient-(outdoor)-air-quality-and-health). L'objectif du système est de publier les mesures du capteur sur le réseau Robonomics d'Airalab.\n\n## Configuration matérielle\n\nNous connectons la broche TXD du PMS3003 à l'IO17 de l'ESP32 DevKitC pour transférer les mesures par UART.\nLes deux appareils nécessitent également une alimentation et une masse commune.\n\n![Wiring Diagram](../images/freertos-mqtt/wiring.png)\n\n## Flux de données\n\nAfin de transmettre les mesures du capteur au réseau Robonomics, notre objectif au niveau du micrologiciel est d'obtenir les données d'un capteur par le protocole de communication intégré qu'il prend en charge (UART dans notre cas) et de les transmettre à une instance AIRA par MQTT / TCP.\n\n![Sending](../images/freertos-mqtt/send.svg)\n\nDans notre exemple, nous utilisons le déploiement cloud AIRA disponible par une adresse IP publique et un nom de domaine attribué.\nSur l'instance AIRA, nous configurons le courtier MQTT `mosquitto` et nous nous abonnons au sujet `/freertos_mqtt_robonomics_example/98:F4:AB:72:23:C4` pour recevoir des messages de MQTT.\n\nEnsuite, nous transmettons les messages à l'écrivain `robonomics io` par un tuyau.\n\n![Receiving](../images/freertos-mqtt/recv.svg)\n\nMaintenant, les données sont disponibles dans le réseau Robonomics et nous pouvons les lire à nouveau avec `robonomics io`.\n\n## Micrologiciel\n\nNous utilisons l'application d'exemple [ESP-MQTT avec transport TCP](https://github.com/espressif/esp-idf/tree/master/examples/protocols/mqtt/tcp) comme base.\n\nNous modifions uniquement `main/app_main.c` pour la connexion UART au capteur, la synchronisation de l'heure SNTP et la routine de publication MQTT périodique.\n\nSi vous essayez de reproduire le projet et que c'est votre premier projet basé sur ESP IDF, veuillez d'abord suivre le guide de programmation [ESP-IDF d'Espressif](https://docs.espressif.com/projects/esp-idf/en/latest/esp32/get-started/index.html#installation-step-by-step) pour vous familiariser avec les opérations du micrologiciel telles que la configuration, la compilation et le téléchargement avec l'outil `idf.py`.\n\n### Configuration Wi-Fi\n\nAfin de communiquer avec l'instance AIRA déployée dans le cloud, notre microcontrôleur nécessite une connexion Internet.\nNous utilisons le Wi-Fi de l'ESP32 pour cela.\nEspressif fournit des utilitaires pour configurer le Wi-Fi intégré.\nDans notre exemple, nous utilisons un environnement de développement avec Ubuntu 20.04 GNU/Linux.\nPour configurer le Wi-Fi, nous allons dans le dossier du projet et exécutons l'outil de configuration SDK.\n\n```console\ncd freertos_mqtt_robonomics_example/firmware\nidf.py menuconfig\n```\n\nEnsuite, nous définissons le SSID et le mot de passe du point d'accès Wi-Fi dans la section `Example Connection Configuration`.\n\n![Menuconfig Wi-Fi](../images/freertos-mqtt/menuconfig-wi-fi.png)\n\n### Configuration du point de terminaison MQTT\n\nIl y a deux choses à configurer pour MQTT.\nLa première est l'adresse du courtier MQTT.\nElle est configurable avec l'outil de configuration SDK.\n\n```console\ncd freertos_mqtt_robonomics_example/firmware\nidf.py menuconfig\n```\n\nDéfinissez l'URL du courtier dans la section `Example Configuration`.\n\n![Menuconfig MQTT](../images/freertos-mqtt/menuconfig-mqtt.png)\n\nLa deuxième chose est le sujet MQTT.\nNous le définissons dans le micrologiciel avec le préfixe du nom du projet suivi de l'adresse MAC de notre ESP32.\nCela nous donne `/freertos_mqtt_robonomics_example/98:F4:AB:72:23:C4` pour notre microprocesseur particulier.\n\n## De MQTT à Robonomics\n\nCommençons par vérifier si nous recevons des données par MQTT.\nNous pouvons nous abonner au sujet du courtier MQTT Mosquitto pour recevoir les publications de l'appareil.\n\n```console\n$ nix-shell -p mosquitto --run \"mosquitto_sub -h localhost -t '/freertos_mqtt_robonomics_example/98:F4:AB:72:23:C4'\"\nts=1615651809, PM1=2, PM2.5=6, PM10=3\n```\n\nIci, nous importons le package `mosquitto` dans notre environnement pour utiliser l'utilitaire `mosquitto_sub`.\nEnsuite, nous nous abonnons au sujet défini dans le micrologiciel.\nNous avons obtenu nos mesures, ce qui signifie que AIRA reçoit correctement les données via MQTT.\nMaintenant, laissons passer ces messages vers le réseau Robonomics.\n\n```console\nnix-shell -p mosquitto --run \"mosquitto_sub -h localhost -t '/freertos_mqtt_robonomics_example/98:F4:AB:72:23:C4'\" | robonomics io write pubsub --bootnodes=/ip4/127.0.0.1/tcp/34333 /freertos_mqtt_robonomics_example\n```\n\nIci, nous utilisons l'utilitaire `robonomics` pour publier des messages dans le canal pubsub `/freertos_mqtt_robonomics_example`.\nNous spécifions les `bootnodes` pour garantir au moins une connexion établie.\n\nMaintenant, nous lisons ces messages à partir du même canal pubsub.\n\n```console\n$ robonomics io read pubsub --listen /ip4/127.0.0.1/tcp/34333 /freertos_mqtt_robonomics_example\n2021-03-27 15:15:51  Generated random peer id: 12D3KooWB2nym5E6c3aPpnPKK5wB9Z6n9eZzcXSpyUBozxhi6dam\n2021-03-27 15:15:51  Subscribed to topic: _robonomics_pubsub_peer_discovery\n2021-03-27 15:15:51  Subscribed to topic: /freertos_mqtt_robonomics_example\n2021-03-27 15:15:56  New peer connected: PeerId(\"12D3KooWRPLCioD2b9XLZTZJQELSAuQAyTrHUKzRktrQHtTSs6kS\")\n2021-03-27 15:15:56  GRAFT: Mesh link added for peer: PeerId(\"12D3KooWRPLCioD2b9XLZTZJQELSAuQAyTrHUKzRktrQHtTSs6kS\") in topic: TopicHash { hash: \"_robonomics_pubsub_peer_discovery\" }\nts=1616843855, PM1=3, PM2.5=4, PM10=3\n```\n\n## Ressources originales utilisées\n\n* Schéma des broches ESP32 DevKitC provenant du blog de GoJimmy https://gojimmypi.blogspot.com/2017/03/jtag-debugging-for-esp32.html\n* Structure de données et décodeur PSM3003 provenant du projet OpenAirProject https://github.com/openairproject/sensor-esp32\n\n**Merci à tous !**\n","tools":[],"fileInfo":{"path":"fr/freertos-mqtt.md","name":"freertos-mqtt"}}},"context":{}}