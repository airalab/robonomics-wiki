{"hash":"0196e6eaf77d64aeb5e8bcaa4d983797efef2fe5","data":{"doc":{"id":"cad12c8b5dda2eef4cfa42e5e2943d56","title":"Sensor verbinden","description":"","contributors":["LoSk-p","makyul"],"headings":[],"subtitles":[{"depth":2,"value":"Anforderungen","anchor":"#anforderungen"},{"depth":2,"value":"Zigbee-Stick","anchor":"#zigbee-stick"},{"depth":2,"value":"Installierenierenation","anchor":"#installierenierenation"},{"depth":2,"value":"Konfiguration","anchor":"#konfiguration"},{"depth":2,"value":"Stecker verbinden","anchor":"#stecker-verbinden"},{"depth":2,"value":"Nach dem Pairing","anchor":"#nach-dem-pairing"},{"depth":2,"value":"Laufen","anchor":"#laufen"}],"content":"\nBeispiel für die Arbeit ist im Video:\n\nhttps://youtu.be/jsaFCVAx2sA\n\n## Anforderungen\n\n* [Aqara Smart Plug](https://aqara.ru/product/aqara-smart-plug/?yclid=462434430312045270)\n* Raspberry Pi\n* Zigbee adapter [JetHome USB JetStick Z2](https://jhome.ru/catalog/parts/PCBA/293/) (oder eine von [unterstützt](https://www.zigbee2mqtt.io/information/supported_adapters.html))\n\nDer Dienst läuft auf Raspberry Pi und kontaktiert den Smart Plug über das ZigBee-Protokoll.\n\n## Zigbee-Stick\n\nWenn Sie den JetHome USB JetStick Z2 haben, verfügt er bereits über die erforderliche Firmware, sodass Sie ihn nicht flashen müssen. Wenn Sie jedoch einen anderen Adapter haben, müssen Sie ihn zuerst mit der zigbee2MQTT-Software flashen. Anweisungen für Ihr Gerät finden Sie [hier](https://www.zigbee2mqtt.io/information/supported_adapters.html).\n\nVerbinden Sie den Adapter und überprüfen Sie die Adapteradresse (es kann auch sein `/dev/ttyUSB1`):\n```bash\n$ ls -l /dev/ttyUSB0\ncrw-rw---- 1 root dialout 166, 0 May 16 19:15 /dev/ttyUSB0 \n```\n\nMöglicherweise müssen Sie zuerst Zugriff auf den USB-Anschluss erhalten. Fügen Sie Ihren Benutzer hinzu `dialout` Gruppe (funktioniert für Ubuntu, aber der Name der Gruppe kann auf anderen Betriebssystemen unterschiedlich sein).\n\nFür Ubuntu:\n```bash\nsudo usermod -a -G dialout $USER\n```\n\nFür Arch:\n```bash\nsudo usermod -a -G uucp $USER\n```\nMelden Sie sich dann ab und wieder an oder starten Sie den Computer neu.\n\n## Installierenierenation\n\nKlonen Sie das Repository:\n\n```\ngit clone https://github.com/makyul/robonomics-carbon-footprint.git\ncd robonomics-carbon-footprint\n```\n\n## Konfiguration\n\nGehe zu `data/configuration.yaml` und setze `permit_join: true`:\n\n```\n# Home Assistant integration (MQTT discovery)\nhomeassistant: false\n\n# allow new devices to join\npermit_join: true\n\n# MQTT settings\nmqtt:\n  # MQTT base topic for zigbee2mqtt MQTT messages\n  base_topic: zigbee2mqtt\n  # MQTT server URL\n  server: 'mqtt://172.17.0.1'\n  # MQTT server authentication, uncomment if required:\n  # user: my_user\n  # password: my_password\n\n# Serial settings\nserial:\n  # Location of CC2531 USB sniffer\n  port: /dev/ttyUSB0\n```\nMöglicherweise möchten Sie auch die Felder `server` and `port` mit entsprechenden Informationen ausfüllen. Im `server` Feld verwenden Sie die IP der `docker0` Bridge, um die Verbindung herzustellen: \n\n```bash\n$ ip a                                                 127\n1: lo: <LOOPBACK,UP,LOWER_UP> mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000\n    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00\n\n...\n\n5: docker0: <NO-CARRIER,BROADCAST,MULTICAST,UP> mtu 1500 qdisc noqueue state DOWN group default \n    link/ether 02:42:0d:ff:5f:a3 brd ff:ff:ff:ff:ff:ff\n    inet 172.17.0.1/16 brd 172.17.255.255 scope global docker0\n       valid_lft forever preferred_lft forever\n    inet6 fe80::42:dff:feff:5fa3/64 scope link \n       valid_lft forever preferred_lft forever\n```\nHier ist Ihre Adresse `172.17.0.1`.\n\nErstellen Sie dann die Datei config/config.yaml mit folgenden Informationen und setzen Sie Ihren Standort (Sie können unter https://countrycode.org/ nach dem 3-Buchstaben-ISO-Code suchen):\n\n```\nlocation: RUS\nservice_address: 4GdHeLbmio2noKCQM5mfxswXfPoW2PcbpYKKkM4NQiqSqJMd\ntwin_id: 5\nsending_timeout: 3600\nbroker_address: \"172.17.0.1\"\nbroker_port: 1883\n```\n\n## Stecker verbinden\n\nErster Start:\n\n```\ndocker-compose up     \n```\n\nUm in den Pairing-Modus am Stecker zu wechseln, drücken Sie einige Sekunden lang die Ein-/Aus-Taste, bis das Licht schnell blau zu blinken beginnt.\n\nIn den Protokollen sollten Sie nun sehen, dass Ihr Plug mit der Veröffentlichung in mqtt begonnen hat.\n\n\n## Nach dem Pairing\n\nWenn Sie nicht möchten, dass andere Geräte sich mit Ihrem Stick verbinden können, sollten Sie jetzt erneut zu `data/configuration.yaml` und set `permit_join: false`. Restart service (use 'Ctrl+C' und \n\n```bash\ndocker-compose up     \n```\ngehen um die Änderungen zu übermitteln).\n\n## Laufen\nBeim ersten Start wird das Konto für den Stecker erstellt. \n> Wenn Sie bereits ein Konto haben, sollten Sie dessen Seed hinzufügen `config.config.yaml` Datei in `device_seed` Abschnitt:\n>\n> ```\n> location: RUS\n> service_address: 4GdHeLbmio2noKCQM5mfxswXfPoW2PcbpYKKkM4NQiqSqJMd\n> twin_id: 5\n> sending_timeout: 3600\n> broker_address: \"172.17.0.1\"\n> broker_port: 1883\n> device_seed: <device_seed>\n>```\n\nNachdem das Konto erstellt wurde, sehen Sie die Adresse in den Protokollen (der Seed wird hinzugefügt, um `config/config.yaml`):\n```\nplug               | Generated account with address: 4GuP82BMAgrbtU8GhnKhgzP827sJEaBXeMX38pZZKPSpcWeT\n```\nSie müssen einige Token auf dieses Konto übertragen, um Transaktionsgebühren zu bezahlen. Sie können dies auf der [Robonomics-Portal](https://polkadot.js.org/apps/?rpc=wss%3A%2F%2Fkusama.rpc.robonomics.network%2F#/accounts). \n\nDer Dienst erkennt, dass Sie genügend Token haben. In den Protokollen sehen Sie:\n```\nplug               | Balance is OK\n```\nDer Dienst empfängt MQTT-Nachrichten vom Stecker und überwacht den Stromverbrauch. Alle Stunden (Sie können den Timeout in `config/config.yaml` in `sending_timeout` Abschnitt ändern, der Timeout erfolgt in Sekunden) wird ein Datenprotokoll mit folgenden Informationen erstellt:\n```\n{'geo': 'RUS', 'power_usage': 1.021237391233444, 'timestamp': 1644494860.5860083}\n```\n","tools":[],"fileInfo":{"path":"de/carbon-footprint-sensor.md","name":"carbon-footprint-sensor"}}},"context":{}}