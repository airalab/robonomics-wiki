{"hash":"e41ba10f6e66ac63a44d40df67ebe96ed934212e","data":{"doc":{"id":"ef8660fdef9eb55441b68273529c2880","title":"Robonomics + Prometheus + Grafana","description":"","contributors":["Vourhey"],"headings":[],"subtitles":[{"depth":2,"value":"Εισαγωγή","anchor":"#εισαγωγή"},{"depth":2,"value":"Προαπαιτήσεις","anchor":"#προαπαιτήσεις"},{"depth":2,"value":"Βήμα 1 — Δημιουργία Χρηστών Υπηρεσίας","anchor":"#βήμα-1--δημιουργία-χρηστών-υπηρεσίας"},{"depth":2,"value":"Βήμα 2 — Λήψη του Prometheus","anchor":"#βήμα-2--λήψη-του-prometheus"},{"depth":2,"value":"Βήμα 3 — Ρύθμιση του Prometheus","anchor":"#βήμα-3--ρύθμιση-του-prometheus"},{"depth":2,"value":"Βήμα 4 — Εκτέλεση του Prometheus","anchor":"#βήμα-4--εκτέλεση-του-prometheus"},{"depth":2,"value":"Βήμα 5 — Λήψη του Node Exporter","anchor":"#βήμα-5--λήψη-του-node-exporter"},{"depth":2,"value":"Βήμα 6 — Εκτέλεση του Node Exporter","anchor":"#βήμα-6--εκτέλεση-του-node-exporter"},{"depth":2,"value":"Βήμα 7 - Διαμόρφωση του Prometheus για την Συλλογή του Node Exporter","anchor":"#βήμα-7---διαμόρφωση-του-prometheus-για-την-συλλογή-του-node-exporter"},{"depth":2,"value":"Βήμα 8 - Προσθήκη ενσωματωμένου node_exporter στο Robonomic","anchor":"#βήμα-8---προσθήκη-ενσωματωμένου-node_exporter-στο-robonomic"},{"depth":2,"value":"Βήμα 9 - Ρύθμιση του Grafana","anchor":"#βήμα-9---ρύθμιση-του-grafana"},{"depth":2,"value":"Αναφορές","anchor":"#αναφορές"}],"content":"\n**Οι παρακάτω οδηγίες παρέχονται από τον [Hubo Bubo](https://github.com/hubobubo)**\n\n**Το αρχικό άρθρο βρίσκεται [εδώ](https://github.com/hubobubo/robonomics/wiki/Robonomics-(XRT)-metrics-using-Prometheus-and-Grafana)**\n\n## Εισαγωγή\nΓια να παρακολουθείτε και να διατηρείτε καλύτερα τον κόμβο(ους) του Robonomics, είναι καλό να ρυθμίσετε ένα σύστημα παρακολούθησης βασισμένο στον Prometheus Server και το Grafana. Αυτό το έγγραφο θα δείξει πώς να ρυθμίσετε κάθε ένα από αυτά για να παρακολουθείτε πλήρως τον κόμβο σας.\n\n##  Προαπαιτήσεις\n* [Ρύθμιση διακομιστή με Ubuntu 18.04](https://www.digitalocean.com/community/tutorials/initial-server-setup-with-ubuntu-18-04) \n* [Εγκατεστημένος collator του Robonomics parachain](https://blog.aira.life/installing-and-running-the-robonomics-validator-in-the-polkadot-network-487ad4c1a567)\n* Βεβαιωθείτε ότι έχετε το robonomics.service να λειτουργεί στη μηχανή σας και η θύρα 9615 είναι προσβάσιμη \n\n## Βήμα 1 — Δημιουργία Χρηστών Υπηρεσίας\n\nΓια λόγους ασφαλείας, θα ξεκινήσουμε δημιουργώντας δύο νέους λογαριασμούς χρηστών, τον prometheus και τον node_exporter. Δημιουργήστε αυτούς τους δύο χρήστες και χρησιμποιήστε τις επιλογές _--no-create-home_ και _--shell /bin/false_ ώστε αυτοί οι χρήστες να μην μπορούν να συνδεθούν στον διακομιστή.\n```\nsudo useradd --no-create-home --shell /bin/false prometheus\nsudo useradd --no-create-home --shell /bin/false node_exporter\n```\n\nΠριν κατεβάσουμε τα δυαδικά αρχεία του Prometheus, δημιουργήστε τους απαραίτητους φακέλους για την αποθήκευση των αρχείων και των δεδομένων του Prometheus. Ακολουθώντας τις τυπικές συμβάσεις του Linux, θα δημιουργήσουμε έναν φάκελο στο _/etc_ για τα αρχεία ρύθμισης του Prometheus και έναν φάκελο στο _/var/lib_ για τα δεδομένα του.\n```\nsudo mkdir /etc/prometheus\nsudo mkdir /var/lib/prometheus\n```\nΤώρα, ορίστε τον χρήστη και την ομάδα για τους νέους φακέλους στον χρήστη prometheus.\n```\nsudo chown prometheus:prometheus /etc/prometheus\nsudo chown prometheus:prometheus /var/lib/prometheus\n```\n## Βήμα 2 — Λήψη του Prometheus\n\nΠρώτα, κατεβάστε και αποσυμπιέστε την τρέχουσα σταθερή έκδοση του Prometheus στον προσωπικό σας φάκελο. Μπορείτε να βρείτε τα πιο πρόσφατα δυαδικά αρχεία στη [σελίδα λήψης του Prometheus.](https://prometheus.io/download/)\n\n```\nwget https://github.com/prometheus/prometheus/releases/download/v2.21.0/prometheus-2.21.0.linux-amd64.tar.gz\n\n```\nΤώρα, αποσυμπιέστε το κατεβασμένο αρχείο.\n\n```\ntar xvf prometheus-2.21.0.linux-amd64.tar.gz\n\n```\nΑυτό θα δημιουργήσει έναν φάκελο με το όνομα prometheus-2.21.0.linux-amd64 που περιέχει δύο δυαδικά αρχεία (prometheus και promtool), τους φακέλους _consoles_ και _console_libraries_ που περιέχουν τα αρχεία της διεπαφής ιστού, μια άδεια χρήσης, μια ειδοποίηση και αρκετά παραδείγματα αρχείων.\n\nΑντιγράψτε τα δύο δυαδικά αρχεία στον φάκελο _/usr/local/bin_.\n\n```\nsudo cp prometheus-2.21.0.linux-amd64/prometheus /usr/local/bin/\nsudo cp prometheus-2.21.0.linux-amd64/promtool /usr/local/bin/\n\n```\nΟρίστε τον χρήστη και την ομάδα για τα δυαδικά αρχεία στον χρήστη prometheus που δημιουργήθηκε στο Βήμα 1.\n\n```\nsudo chown prometheus:prometheus /usr/local/bin/prometheus\nsudo chown prometheus:prometheus /usr/local/bin/promtool\n\n```\nΑντιγράψτε τους φακέλους consoles και _console_libraries_ στον φάκελο _/etc/prometheus_.\n\n```\nsudo cp -r prometheus-2.21.0.linux-amd64/consoles /etc/prometheus\nsudo cp -r prometheus-2.21.0.linux-amd64/console_libraries /etc/prometheus\n\n```\nΟρίστε τον χρήστη και την ομάδα για τους φακέλους στον χρήστη prometheus. Χρησιμοποιώντας τη σημαία -R θα διασφαλίσει ότι η ιδιοκτησία θα οριστεί και στα αρχεία μέσα στον φάκελο.\n\n```\nsudo chown -R prometheus:prometheus /etc/prometheus/consoles\nsudo chown -R prometheus:prometheus /etc/prometheus/console_libraries\n\n```\nΤώρα που έχει εγκατασταθεί ο Prometheus, θα δημιουργήσουμε τα αρχεία ρύθμισης και υπηρεσίας του για την προετοιμασία της πρώτης του εκτέλεσης.\n\n## Βήμα 3 — Ρύθμιση του Prometheus\n\nΣτον φάκελο _/etc/prometheus_, χρησιμοποιήστε το nano ή τον αγαπημένο σας επεξεργαστή κειμένου για να δημιουργήσετε ένα αρχείο ρύθμισης με το όνομα _prometheus.yml_.\n\n```\nsudo nano /etc/prometheus/prometheus.yml\n\n```\nΣτις γενικές ρυθμίσεις, ορίστε το προεπιλεγμένο διάστημα για τη συλλογή μετρήσεων. Σημειώστε ότι ο Prometheus θα εφαρμόσει αυτές τις ρυθμίσεις σε κάθε εξαγωγέα εκτός αν οι δικές του ρυθμίσεις αντικαταστήσουν τις γενικές.\n\n```\nglobal:\n  scrape_interval: 15s\n\n```\nΑυτή η τιμή scrape_interval λέει στον Prometheus να συλλέγει μετρήσεις από τους εξαγωγείς του κάθε 15 δευτερόλεπτα, που είναι αρκετά για τους περισσότερους εξαγωγείς.\nΤώρα, προσθέστε τον ίδιο τον Prometheus στη λίστα των εξαγωγέων για συλλογή με την ακόλουθη οδηγία scrape_configs:\n\n```\n...\nscrape_configs:\n  - job_name: 'prometheus'\n    scrape_interval: 5s\n    static_configs:\n      - targets: ['localhost:9090']\n```\nΟ Prometheus χρησιμοποιεί το _job_name_ για να επισημάνει τους εξαγωγείς σε ερωτήματα και γραφήματα, οπότε βεβαιωθείτε ότι επιλέγετε κάτι περιγραφικό εδώ.\n\nΕπιπλέον, καθώς ο Prometheus εξάγει σημαντικά δεδομένα για τον εαυτό του που μπορείτε να χρησιμοποιήσετε για την παρακολούθηση της απόδοσης και την εντοπισμό σφαλμάτων, έχουμε αντικαταστήσει την οδηγία scrape_interval από 15 δευτερόλεπτα σε 5 δευτερόλεπτα για πιο συχνές ενημερώσεις.\n\nΤέλος, ο Prometheus χρησιμοποιεί τις οδηγίες _static_configs_ και _targets_ για να προσδιορίσει πού εκτελούνται οι εξαγωγείς. Εφόσον αυτός ο συγκεκριμένος εξαγωγέας εκτελείται στον ίδιο διακομιστή με τον Prometheus ίδιο, μπορούμε να χρησιμοποιήσουμε το localhost αντί για μια διεύθυνση IP μαζί με την προεπιλεγμένη θύρα, 9090.\n\nΤο αρχείο διαμόρφωσής σας πρέπει να φαίνεται πλέον όπως αυτό:\n\n```\nglobal:\n  scrape_interval: 15s\n\nscrape_configs:\n  - job_name: 'prometheus'\n    scrape_interval: 5s\n    static_configs:\n      - targets: ['localhost:9090']\n```\nΑποθηκεύστε το αρχείο και κλείστε τον επεξεργαστή κειμένου σας.\n\nΤώρα, ορίστε την ιδιοκτησία χρήστη και ομάδας στο αρχείο διαμόρφωσης στον χρήστη prometheus που δημιουργήθηκε στο Βήμα 1.\n\n```\nsudo chown prometheus:prometheus /etc/prometheus/prometheus.yml\n\n```\nΜε την ολοκλήρωση της διαμόρφωσης, είμαστε έτοιμοι να δοκιμάσουμε τον Prometheus εκτελώντας τον για πρώτη φορά.\n\n## Βήμα 4 — Εκτέλεση του Prometheus\n\nΞεκινήστε τον Prometheus ως χρήστης _prometheus_, παρέχοντας τη διαδρομή τόσο για το αρχείο διαμόρφωσης όσο και για τον κατάλογο δεδομένων.\n\n```\nsudo -u prometheus /usr/local/bin/prometheus \\\n    --config.file /etc/prometheus/prometheus.yml \\\n    --storage.tsdb.path /var/lib/prometheus/ \\\n    --web.console.templates=/etc/prometheus/consoles \\\n    --web.console.libraries=/etc/prometheus/console_libraries\n```\n\nΗ έξοδος περιέχει πληροφορίες σχετικά με την πρόοδο φόρτωσης του Prometheus, το αρχείο διαμόρφωσης και τις σχετικές υπηρεσίες. Επιβεβαιώνει επίσης ότι ο Prometheus ακούει στη θύρα _9090_.\n\n```\n_log output_\nSep 14 17:55:53 robonomics systemd[1]: Started Prometheus.\nSep 14 17:55:53 robonomics prometheus[29488]: level=info ts=2020-09-14T15:55:53.347Z caller=main.go:310 msg=\"No time or size retention was set so using the default time retention\" duration=15d\nSep 14 17:55:53 robonomics prometheus[29488]: level=info ts=2020-09-14T15:55:53.350Z caller=main.go:346 msg=\"Starting Prometheus\" version=\"(version=2.21.0, branch=HEAD, revision=e83ef207b6c2398919b69cd87d2693cfc2fb4127)\"\nSep 14 17:55:53 robonomics prometheus[29488]: level=info ts=2020-09-14T15:55:53.351Z caller=main.go:347 build_context=\"(go=go1.15.2, user=root@a4d9bea8479e, date=20200911-11:35:02)\"\nSep 14 17:55:53 robonomics prometheus[29488]: level=info ts=2020-09-14T15:55:53.351Z caller=main.go:348 host_details=\"(Linux 4.15.0-112-generic #113-Ubuntu SMP Thu Jul 9 23:41:39 UTC 2020 x86_64 robonomics (none))\"\nSep 14 17:55:53 robonomics prometheus[29488]: level=info ts=2020-09-14T15:55:53.351Z caller=main.go:349 fd_limits=\"(soft=1024, hard=4096)\"\nSep 14 17:55:53 robonomics prometheus[29488]: level=info ts=2020-09-14T15:55:53.351Z caller=main.go:350 vm_limits=\"(soft=unlimited, hard=unlimited)\"\nSep 14 17:55:53 robonomics prometheus[29488]: level=info ts=2020-09-14T15:55:53.357Z caller=main.go:701 msg=\"Starting TSDB ...\"\nSep 14 17:55:53 robonomics prometheus[29488]: level=info ts=2020-09-14T15:55:53.368Z caller=web.go:523 component=web msg=\"Start listening for connections\" address=0.0.0.0:9090\nSep 14 17:55:53 robonomics prometheus[29488]: level=info ts=2020-09-14T15:55:53.372Z caller=head.go:644 component=tsdb msg=\"Replaying on-disk memory mappable chunks if any\"\nSep 14 17:55:53 robonomics prometheus[29488]: level=info ts=2020-09-14T15:55:53.373Z caller=head.go:658 component=tsdb msg=\"On-disk memory mappable chunks replay completed\" duration=12.659µs\nSep 14 17:55:53 robonomics prometheus[29488]: level=info ts=2020-09-14T15:55:53.373Z caller=head.go:664 component=tsdb msg=\"Replaying WAL, this may take a while\"\nSep 14 17:55:53 robonomics prometheus[29488]: level=info ts=2020-09-14T15:55:53.380Z caller=head.go:716 component=tsdb msg=\"WAL segment loaded\" segment=0 maxSegment=1\nSep 14 17:55:53 robonomics prometheus[29488]: level=info ts=2020-09-14T15:55:53.381Z caller=head.go:716 component=tsdb msg=\"WAL segment loaded\" segment=1 maxSegment=1\nSep 14 17:55:53 robonomics prometheus[29488]: level=info ts=2020-09-14T15:55:53.381Z caller=head.go:719 component=tsdb msg=\"WAL replay completed\" checkpoint_replay_duration=48.125µs wal_replay_duration=8.253748ms total_replay_duration=8.343335ms\nSep 14 17:55:53 robonomics prometheus[29488]: level=info ts=2020-09-14T15:55:53.383Z caller=main.go:721 fs_type=EXT4_SUPER_MAGIC\nSep 14 17:55:53 robonomics prometheus[29488]: level=info ts=2020-09-14T15:55:53.384Z caller=main.go:724 msg=\"TSDB started\"\nSep 14 17:55:53 robonomics prometheus[29488]: level=info ts=2020-09-14T15:55:53.384Z caller=main.go:850 msg=\"Loading configuration file\" filename=/etc/prometheus/prometheus.yml\nSep 14 17:55:53 robonomics prometheus[29488]: level=info ts=2020-09-14T15:55:53.384Z caller=main.go:881 msg=\"Completed loading of configuration file\" filename=/etc/prometheus/prometheus.yml totalDuration=908.135µs remote_storage=6.693µs web_handler=819ns query_engine=1.383µs scrape=400.232µs scrape_sd=41.679µs notify=1.1µs notify_sd=1.847µs rules=1.522µs\nSep 14 17:55:53 robonomics prometheus[29488]: level=info ts=2020-09-14T15:55:53.384Z caller=main.go:673 msg=\"Server is ready to receive web requests.\"\n```\nΕάν λάβετε ένα μήνυμα σφάλματος, ελέγξτε διπλά ότι χρησιμοποιήσατε σύνταξη YAML στο αρχείο διαμόρφωσής σας και στη συνέχεια ακολουθήστε τις οδηγίες που εμφανίζονται στην οθόνη για να επιλύσετε το πρόβλημα.\n\nΤώρα, διακόψτε τον Prometheus πατώντας _CTRL+C_, και στη συνέχεια ανοίξτε ένα νέο αρχείο υπηρεσίας _systemd_.\n\n```\nsudo nano /etc/systemd/system/prometheus.service\n\n```\nΤο αρχείο υπηρεσίας λέει στο _systemd_ να εκτελέσει τον Prometheus ως χρήστη prometheus, με το αρχείο διαμόρφωσης που βρίσκεται στον κατάλογο _/etc/prometheus/prometheus.yml_ και να αποθηκεύει τα δεδομένα του στον κατάλογο _/var/lib/prometheus_. Αντιγράψτε το παρακάτω περιεχόμενο στο αρχείο:\n\n```\n[Unit]\nDescription=Prometheus\nWants=network-online.target\nAfter=network-online.target\n\n[Service]\nUser=prometheus\nGroup=prometheus\nType=simple\nExecStart=/usr/local/bin/prometheus \\\n    --config.file /etc/prometheus/prometheus.yml \\\n    --storage.tsdb.path /var/lib/prometheus/ \\\n    --web.console.templates=/etc/prometheus/consoles \\\n    --web.console.libraries=/etc/prometheus/console_libraries\n\n[Install]\nWantedBy=multi-user.target\n```\n\nΤέλος, αποθηκεύστε το αρχείο και κλείστε τον επεξεργαστή κειμένου σας. Για να χρησιμοποιήσετε τη νεοδημιουργηθείσα υπηρεσία, επαναφορτώστε το systemd.\n\n```\nsudo systemctl daemon-reload\n\n```\nΤώρα μπορείτε να ξεκινήσετε τον Prometheus χρησιμοποιώντας την παρακάτω εντολή:\n\n```\nsudo systemctl start prometheus\n\n```\nΓια να βεβαιωθείτε ότι ο Prometheus εκτελείται, ελέγξτε την κατάσταση της υπηρεσίας.\n\n```\nsudo systemctl status prometheus\n\n```\nΗ έξοδος σας λέει την κατάσταση του Prometheus, τον αναγνωριστικό της κύριας διεργασίας (PID), τη χρήση μνήμης και άλλα.\n\nΕάν η κατάσταση της υπηρεσίας δεν είναι ενεργή, ακολουθήστε τις οδηίες στην οθόνη και επαναλάβετε τα προηγούμενα βήματα για να επιλύσετε το πρόβλημα πριν συνεχίσετε τον οδηγό.\n\n```\n* prometheus.service - Prometheus\n   Loaded: loaded (/etc/systemd/system/prometheus.service; enabled; vendor preset: enabled)\n   Active: active (running) since Mon 2020-09-14 17:59:48 CEST; 24h ago\n Main PID: 29650 (prometheus)\n    Tasks: 9 (limit: 4915)\n   CGroup: /system.slice/prometheus.service\n           `-29650 /usr/local/bin/prometheus --config.file /etc/prometheus/prometheus.yml --storage.tsdb.path /var/lib/prometheus/ --web.console.templates=/etc/prometheus/consoles --web.console.libraries=/etc/prometheus/console_libraries\n```\n\nΌταν είστε έτοιμοι να προχωρήσετε, πατήστε _Q_ για να τερματίσετε την εντολή κατάστασης. Τέλος, ενεργοποιήστε την υπηρεσία για να ξεκινήσει κατά την εκκίνηση.\n\n```\nsudo systemctl enable prometheus\n\n```\n\nΤώρα που ο Prometheus είναι ενεργός και λειτουργεί, μπορούμε να εγκαταστήσουμε έναν επιπλέον εξαγωγέα για να δημιουργήσουμε μετρήσεις σχετικά με τους πόρους του διακομιστή μας.\n\n## Βήμα 5 — Λήψη του Node Exporter\n\nΓια να επεκτείνουμε το Prometheus πέρα ​​από τις μετρήσεις μόνο για τον εαυτό του, θα εγκαταστήσουμε έναν επιπλέον εξαγωγέα που ονομάζεται Node Exporter. Ο Node Exporter παρέχει λεπτομερείς πληροφορίες σχετικά με το σύστημα, συμπεριλαμβανομένης της χρήσης CPU, δίσκου και μνήμης. Λάβετε την τρέχουσα σταθερή έκδοση του Node Exporter στον κατάλογο του αρχικού σας φακέλου. Μπορείτε να βρείτε τις τελευταίες δυαδικές εκδόσεις στη [σελίδα λήψης του Prometheus.](https://prometheus.io/download/)\n\n```\nwget https://github.com/prometheus/node_exporter/releases/download/v1.0.1/node_exporter-1.0.1.linux-amd64.tar.gz\n\n```\nΤώρα, αποσυσκευάστε το ληφθέν αρχείο.\n\n```\ntar xvf node_exporter-1.0.1.linux-amd64.tar.gz\n\n```\nΑυτό θα δημιουργήσει έναν κατάλογο με το όνομα _node_exporter-1.0.1.linux-amd64_ που περιέχει ένα δυαδικό αρχείο με το όνομα _node_exporter_, μια άδεια χρήσης και μια ειδοποίηση.\n\nΑντιγράψτε το δυαδικό αρχείο στον κατάλογο _/usr/local/bin_ και ορίστε τον χρήστη και την ομάδα ιδιοκτησίας στον χρήστη node_exporter που δημιουργήσατε στο Βήμα 1.\n\n```\nsudo cp node_exporter-1.0.1.linux-amd64/node_exporter /usr/local/bin\nsudo chown node_exporter:node_exporter /usr/local/bin/node_exporter\n\n```\nΤώρα που έχετε εγκαταστήσει το Node Exporter, ας το δοκιμάσουμε εκτελώντας το πριν δημιουργήσουμε ένα αρχείο υπηρεσίας για να ξεκινά κατά την εκκίνηση.\n\n## Βήμα 6 — Εκτέλεση του Node Exporter\n\nΤα βήματα για την εκτέλεση του Node Exporter είναι παρόμοια με αυτά για την εκτέλεση του ίδιου του Prometheus. Ξεκινήστε δημιουργώντας το αρχείο υπηρεσίας Systemd για το Node Exporter.\n\n```\nsudo nano /etc/systemd/system/node_exporter.service\n\n```\nΑντιγράψτε το παρακάτω περιεχόμενο στο αρχείο υπηρεσίας:\n\n```\n[Unit]\nDescription=Node Exporter\nWants=network-online.target\nAfter=network-online.target\n\n[Service]\nUser=node_exporter\nGroup=node_exporter\nType=simple\nExecStart=/usr/local/bin/node_exporter --collector.systemd\n\n[Εγκατάσταση]\nWantedBy=multi-user.target\n```\n\nΑποθηκεύστε το αρχείο και κλείστε τον επεξεργαστή κειμένου. Τέλος, επαναφορτώστε το systemd για να χρησιμοποιήσετε τη νεοδημιουργημένη υπηρεσία.\n\n```\nsudo systemctl daemon-reload\n\n```\nΤώρα μπορείτε να εκτελέσετε το Node Exporter χρησιμοποιώντας την παρακάτω εντολή:\n\n```\nsudo systemctl start node_exporter\n\n```\nΕπαλήθευση that Node Exporter’s running correctly with the status command.\n\n```\nsudo systemctl status node_exporter\n\n```\nΌπως και πριν, αυτή η έξοδος σας δείχνει την κατάσταση του Node Exporter, τον αναγνωριστικό κύριας διεργασίας (PID), τη χρήση μνήμης και άλλα. Εάν η κατάσταση της υπηρεσίας δεν είναι ενεργή, ακολουθήστε τις οδηγίες στην οθόνη και επαναλάβετε τα προηγούμενα βήματα για να επιλύσετε το πρόβλημα πριν συνεχίσετε.\n\n```\n_Output_\n* node_exporter.service - Node Exporter\n   Loaded: loaded (/etc/systemd/system/node_exporter.service; enabled; vendor preset: enabled)\n   Active: active (running) since Mon 2020-09-14 17:58:25 CEST; 1 day 1h ago\n Main PID: 29612 (node_exporter)\n    Tasks: 7 (limit: 4915)\n   CGroup: /system.slice/node_exporter.service\n           `-29612 /usr/local/bin/node_exporter --collector.systemd\n```\nΤέλος, ενεργοποιήστε το Node Exporter για να ξεκινά αυτόματα κατά την εκκίνηση.\n\n```\nsudo systemctl enable node_exporter\n\n```\nΜε το Node Exporter πλήρως διαμορφωμένο και λειτουργούντα όπως αναμένεται, θα πούμε στο Prometheus να ξεκινήσει τη συλλογή των νέων μετρήσεων.\n\n## Βήμα 7 - Διαμόρφωση του Prometheus για την Συλλογή του Node Exporter\n\nΕπειδή το Prometheus συλλέγει μόνο εξαγωγείς που έχουν καθοριστεί στ τμήμα scrape_configs του αρχείου διαμόρφωσής του, θα πρέπει να προσθέσουμε μια καταχώριση για το Node Exporter, όπως κάναμε και για τον ίδιο τον Prometheus. Ανοίξτε το αρχείο διαμόρφωσης.\n\n```\nsudo nano /etc/prometheus/prometheus.yml\n\n```\nΣτο τέλος του τμήματος scrape_configs, προσθέστε μια νέα καταχώριση με το όνομα node_exporter.\n\n```\n...\n  - job_name: 'node_exporter'\n    scrape_interval: 5s\n    static_configs:\n      - targets: ['localhost:9100']\n```\nΕπειδή αυτός ο εξαγωγέας τρέχει επίσης στον ίδιο διακομιστή με τον ίδιο τον Prometheus, μπορούμε να χρησιμοποιήσουμε το localhost αντί για μια διεύθυνση IP, μαζί με την προεπιλεγμένη θύρα του Node Exporter, 9100. Το σύνολο του αρχείου διαμόρφωσής σας θα πρέπει να φαίνεται όπως ακολούθως:\n\n```\nglobal:\n  scrape_interval: 15s\n\nscrape_configs:\n  - job_name: 'prometheus'\n    scrape_interval: 5s\n    static_configs:\n      - targets: ['localhost:9090']\n  - job_name: 'node_exporter'\n    scrape_interval: 5s\n    static_configs:\n      - targets: ['localhost:9100']\n```\nΑποθηκεύστε το αρχείο και κλείστε τον επεξεργαστή κειμένου όταν είστε έτοιμοι να συνεχίσετε. Τέλος, επανεκκινήστε το Prometheus για να τεθούν σε ισχύ οι αλλαγές.\n\n```\nsudo systemctl restart prometheus\n\n```\nΓια μια ακόμα φορά, επαληθεύστε ότι όλα λειτουργούν σωστά με την εντολή κατάστασης.\n\n```\nsudo systemctl status prometheus\n\n```\nΕάν η κατάσταση της υπηρεσίας δεν είναι ενεργή, ακολουθήστε τις οδηγίες στην οθόνη και επαναλάβετε τα προηγούμενα βήματα πριν προχωρήσετε.\n\n```\nOutput\n* prometheus.service - Prometheus\n   Loaded: loaded (/etc/systemd/system/prometheus.service; enabled; vendor preset: enabled)\n   Active: active (running) since Tue 2020-09-15 19:06:56 CEST; 2s ago\n Main PID: 19725 (prometheus)\n    Tasks: 8 (limit: 4915)\n   CGroup: /system.slice/prometheus.service\n           `-19725 /usr/local/bin/prometheus --config.file /etc/prometheus/prometheus.yml --storage.tsdb.path /var/lib/prometheus/ --web.console.templates=/etc/prometheus/consoles --web.console.libraries=/etc/prometheus/console_libraries\n```\n\nΤώρα έχουμε εγκατεστημένο, διαμορφωμένο και λειτουργικό το Prometheus και το Node Exporter.\n\n## Βήμα 8 - Προσθήκη ενσωματωμένου node_exporter στο Robonomic\n\nΑφού εγκαταστήσουμε με επιτυχία το Prometheus και το node_exporter, θα πρέπει να χρησιμοποιήσουμε τον ενσωματωμένο εξαγωγέα prometheus σε κάθε έργο υποστρώματος. Για να το επιτύχουμε αυτό, πρέπει να προσθέσουμε μια επιπλέον καταχώριση στο _/etc/prometheus/prometheus.yml_. \nΑνοίξτε το αρχείο διαμόρφωσης.\n\n```\nsudo nano /etc/prometheus/prometheus.yml\n\n```\nΣτο τέλος του τμήματος scrape_configs, προσθέστε μια νέα καταχώριση με το όνομα robonomic_exporter.\n\n``` \n  - job_name: 'robonomics_exporter'\n    scrape_interval: 5s\n    static_configs:\n      - targets: ['localhost:9615']\n```\nΑποθηκεύστε το αρχείο και βγείτε από τον επεξεργαστή κειμένου. Το συνολικό αρχείο διαμόρφωσής σας θα πρέπει να φαίνεται όπως παρακάτω:\n\n```\nglobal:\n  scrape_interval: 15s\n\nscrape_configs:\n  - job_name: 'prometheus'\n    scrape_interval: 5s\n    static_configs:\n      - targets: ['localhost:9090']\n  - job_name: 'node_exporter'\n    scrape_interval: 5s\n    static_configs:\n      - targets: ['localhost:9100']\n  - job_name: 'robonomics_exporter'\n    scrape_interval: 5s\n    static_configs:\n      - targets: ['localhost:9615']\n```\n\nΤέλος, επανεκκινήστε το Prometheus για να εφαρμοστούν οι αλλαγές.\n\n```\nsudo systemctl restart prometheus\n\n```\nΓια άλλη μια φορά, βεβαιωθείτε ότι όλα εκτελούνται σωστά με την εντολή status.\n\n```\nsudo systemctl status prometheus\n\n```\nΤώρα έχουμε εγκατεστημένο, διαμορφωμένο και λειτουργικό το _Prometheus_, το _Node Exporter_ καθώς και το _Robonomic Exporter_. Προχωρήστε τώρα στο Grafana\n\n## Βήμα 9 - Ρύθμιση του Grafana\n\nΤο τελευταίο βήμα είναι να συνδέσετε το Prometheus ως πηγή δεδομένων στο Grafana. Για τον σκοπό αυτού του εγχειριδίου, θα χρησιμοποιήσουμε το δωρεάν cloud-based grafana που επιτρέπει έως 5 πίνακες ελέγχου καθώς και τον αφιερωμένο [πίνακα ελέγχου Robonomics](https://grafana.com/grafana/dashboards/13015). Απλά μεταβείτε στο [grafana.com](https://grafana.com/), δημιουργήστε έναν νέο λογαριασμό και συνδεθείτε στη νεοδημιουργημένη παρουσία grafana σας.\n\nΣτην αρχή πρέπει να προσθέσουμε στο Grafana μια νέα _**Πηγή Δεδομένων**_ που στην περίπτωσή μας θα είναι ο διακομιστής Prometheus.\nΜεταβείτε στην Πηγή Δεδομένων:\n\n>![DataSource](../images/prometheus-grafana/grafana-6-2020-09-15-19-18-50-Window.png)\n\nΚάντε κλικ στο **_Προσθήκη πηγής δεδομένων_**\n\n>![DataSource](../images/prometheus-grafana/grafana-7-2020-09-15-19-18-50-Window.png)\n\nNext επιλέξτε _**Prometheus**_\n\n>![DataSource](../images/prometheus-grafana/grafana-8-2020-09-15-19-18-50-Window.png)\n\nΣτη νέα οθόνη, εισαγάγετε τη **_διεύθυνση IP του διακομιστή Prometheus με τη θύρα 9090_**\n\n> ![DataSource](../images/prometheus-grafana/grafana-9-2020-09-15-19-18-50-Window.png)\n\nΈπειτα, πατήστε _**Αποθήκευση & Δοκιμή**_ αν ακολουθήσατε όλα τα βήματα και πρέπει να είστε πράσινοι και έτοιμοι να προχωρήσετε στην εισαγωγή του πίνακα ελέγχου. Στην κύρια σελίδα, κάντε κλικ στο **+** και στη συνέχεια στην **Εισαγωγή**, όπως φαίνεται στην παρακάτω εικόνα:\n\n> ![Import dashboard](../images/prometheus-grafana/grafana-1-2020-09-15-19-18-50-Window.png)\n\nΣτη συνέχεια, θα πρέπει να δείτε τη σελίδα Εισαγωγής:\n\n> ![Import page](../images/prometheus-grafana/grafana-2-2020-09-15-19-18-50-Window.png)\n\nΣτο πεδίο _Διεύθυνση URL ή αναγνωριστικό πίνακα ελέγχου του Grafana.com_ γράψτε _**13015**_ (καθώς αυτό είναι το αναγνωριστικό του πίνακα ελέγχου Robonomic)\n\n> ![Import Robonomic dashboard](../images/prometheus-grafana/grafana-3-2020-09-15-19-18-50-Window.png)\n\nΜετά τη φόρτωση του εξωτερικού πίνακα ελέγχου, θα δείτε αυτήν την οθόνη:\n\n> ![XRT 13015 dashboard import](../images/prometheus-grafana/grafana-4-2020-09-15-19-18-50-Window.png)\n\nΤο τελευταίο βήμα είναι να επιλέξετε την προηγουμένως δημιουργημένη **_Πηγή Δεδομένων_** και να κάνετε κλικ στο _**Εισαγωγή**_\n\n> ![Prometheus as a DataSource](../images/prometheus-grafana/grafana-5-2020-09-15-19-18-50-Window.png)\n\nΑΥΤΟ ΕΙΝΑΙ! Σε αυτό το σημείο θα πρέπει να δείτε τον εισαγόμενο πίνακα ελέγχου. \n\n\n## Αναφορές\n\n* [Πώς να εγκαταστήσετε το Prometheus στο Ubuntu 16.04](https://www.digitalocean.com/community/tutorials/how-to-install-prometheus-on-ubuntu-16-04)\n* [Δημιουργία ενός πίνακα ελέγχου παρακολούθησης από το Prometheus + Grafana](https://medium.com/htc-research-engineering-blog/build-a-monitoring-dashboard-by-prometheus-grafana-741a7d949ec2)\n* [Υποστήριξη του Grafana για το Prometheus](https://prometheus.io/docs/visualization/grafana/)\n* [Παρακολούθηση μετρήσεων του Linux με τον node exporter](https://prometheus.io/docs/guides/node-exporter/)\n* [Ερωτήματα στο Prometheus](https://prometheus.io/docs/prometheus/latest/querying/basics/)\n* [Οπτικοποίηση μετρήσεων του κόμβου](https://substrate.dev/docs/en/tutorials/visualize-node-metrics/)\n* [Εξαγωγέας Prometheus για το Substrate](https://github.com/paritytech/substrate/tree/master/utils/prometheus)\n* [polkadot-dashboard](https://github.com/w3f/polkadot-dashboard)\n* [Μετρικές κόμβου Polkadot](https://grafana.com/grafana/dashboards/12425)\n* [Πίνακας ελέγχου Node Exporter για το Prometheus](https://grafana.com/grafana/dashboards/11074)\n* [Μετρικές ROBONOMICS (XRT) του Grafana](https://grafana.com/grafana/dashboards/13015)\n\n","tools":[],"fileInfo":{"path":"el/robonomics-prometheus-grafana.md","name":"robonomics-prometheus-grafana"}}},"context":{}}