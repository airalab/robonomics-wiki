{"hash":"3f5dbcf25038fb82d4541254c2b3842511271503","data":{"doc":{"id":"f27ff4c4d1a989dd776506da14e6ed29","title":"Δοκιμαστική σουίτα Substrate Cumulus Parachain για ανταλλαγή μηνυμάτων μεταξύ αλυσίδων","description":"","contributors":["ddulesov","boogerwooger","tubleronchik"],"headings":[],"subtitles":[{"depth":2,"value":"Προς τα πάνω","anchor":"#προς-τα-πάνω"},{"depth":2,"value":"Κατασκευή & Εκτέλεση","anchor":"#κατασκευή--εκτέλεση"},{"depth":2,"value":"Έλεγχος ότι η αρχική ρύθμιση λειτουργεί","anchor":"#έλεγχος-ότι-η-αρχική-ρύθμιση-λειτουργεί"},{"depth":3,"value":"Παράδειγμα:","anchor":"#παράδειγμα"},{"depth":3,"value":"Δοκιμή μετάδοσης μηνυμάτων UMP","anchor":"#δοκιμή-μετάδοσης-μηνυμάτων-ump"},{"depth":3,"value":"Δοκιμή πέρασματος μηνυμάτων HRMP","anchor":"#δοκιμή-πέρασματος-μηνυμάτων-hrmp"},{"depth":3,"value":"Περισσότερες επιλογές","anchor":"#περισσότερες-επιλογές"},{"depth":2,"value":"Τοπικό Testnet","anchor":"#τοπικό-testnet"},{"depth":3,"value":"Δημιουργία προσαρμοσμένου chain spec","anchor":"#δημιουργία-προσαρμοσμένου-chain-spec"},{"depth":2,"value":"Χάκεψε το parachain","anchor":"#χάκεψε-το-parachain"},{"depth":2,"value":"Learn More","anchor":"#learn-more"}],"content":"\n\nΟ κύριος στόχος αυτού του έργου είναι η απλοποίηση της ανάπτυξης του runtime των parachain, όταν χρησιμοποιούντι μηνύματα μεταξύ αλυσίδων. \nΕπιτρέπει την ανάπτυξη κώδικα runtime με ενσωματωμένες δοκιμές με υψηλό βαθμό επαναληψιμότητας και απλή χρήση.\nΑυτοματοποιεί την κατασκευή, την κατασκευή προκαθορισμένης διαμόρφωσης δικτύου (δηλαδή 1 αλυσίδα ρελέ + 2 parachains), τη δημιουργία καναλιών μεταξύ των parachains και την εκτέλεση δοκιμών μηνυμάτων, αποστολή μηνυμάτων, χρήση κλήσης στο runtime, όλα κατασκευασμένα και συνταγμένα σε Python.\n\nΤο XCM Testsuite χρησιμοποιείται για τη δοκιμή του κύκλου παραγωγής της Robobank - του συνόλου των Substrate pallets, που επιτρέπουν σε ρομπότ να εγγραφούν σε εξωτερικά parachains, να λαμβάνουν προπληρωμένες παραγγελίες, να τις εκτελούν και να λαμβάνουν πληρωμές χρησιμοποιώντας εξωτερικά tokens. Αυτό επιτρέπει στα ρομπότ να λειτουργούν εντός του δικτύου Robonomics με όλη την απαιτούμενη υποδομή, αλλά ταυτόχρονα να προσφέρουν τις υπηρεσίες τους σε οποιοδήποτε άλλο parachain.\n\nΈνα παράδειγμα βίντεο είναι διαθέσιμο στο [YouTube](https://www.youtube.com/watch?v=S_bZgsxngiM)\n\nΟι κύρια βήματα στο σενάριο επίδειξης είναι:\n- εκκίνηση αλυσίδας ρελέ και δύο parachains σε ένα πακέτο 6 διεργασιών\n- δημιουργία καναλιών μηνυμάτων XCM μεταξύ των parachains\n- εγγραφή ενός ρομπότ σε και τα δύο parachains\n- δημιουργία μιας παραγγελίας για αυτό το ρομπότ στο client parachain (κράτηση πληρωμής για την ολοκλήρωση της παραγγελίας)\n- αποστολή μηνύματος XCM στο Robonomics parachain\n- δημιουργία της καταγραφής της παραγγελίας \"καθρέφτη\" στο Robonomics parachain\n- το ρομπότ αποδέχεται την παραγγελία στο Robonomics parachain\n- αποστολή μηνύματος XCM για την αποδοχή της παραγγελίας πίσω στο client parachain\n- αποδοχή της παραγγελίας στο client parachain (κράτηση ποινής για έλλειψη ολοκλήρωσης της παραγγελίας μέχρι την προθεσμία της παραγγελίας)\n- το ρομπότ ολοκληρώνει την παραγγελία στο Robonomics parachain\n- αποστολή μηνύματος XCM για την ολοκλήρωση της παραγγελίας στο client parachain\n- εξόφληση όλων των πληρωμών (η πληρωμή του πελάτη μεταφέρεται στο ρομπότ, καθώς και η μη αξιοποίητη ποινή)\n- κλείσιμο της παραγγελίας1\n\n\n## Προς τα πάνω\nΑυτό το έργο είναι ένα fork του\n[Substrate Developer Hub Node Template](https://github.com/substrate-developer-hub/substrate-node-template).\nΠεριέχει κώδικα των runtime pallets που δοκιμάζονται.\nΌπως και στον αρχικό κώδικα των κόμβων, ο κώδικας των parachains βρίσκεται στους καταλόγους \"./pallets\", \"./runtime\", \"./node\".\n\nΔιαφορές με το αρχικό \"substrate-node-template\":\n- αυτός ο collator runtime έχει τον HRMP handler module και μπορεί να χειριστεί μηνύματα από αδελφούς parachains\n- έτοιμος δοκιμαστικός runtime για εσωτερικές δοκιμές XCM\n\n## Κατασκευή & Εκτέλεση\nΣυνιστάται (ιδιαίτερα) η εγκατάσταση: \n```\nUbuntu 20, 16 Gb RAM, 8 CPU, 120 Gb SSD\n```\n[ΣΗΜΕΙΩΣΗ] Η πρώτη δημιουργία μπορεί να πάρει πολύ χρόνο, έως και αρκετές ώρες σε μη βέλτιστες μηχανές.\n\n[ΣΗΜΕΙΩΣΗ] Το σενάριο λειτουργεί με τις ΣΤΑΘΕΡΕΣ εκδόσεις (commit hashes) του Polkadot(Rococo) στην αλυσίδα αναμετάδοσης και των παρααλυσίδων.\n\n[ΣΗΜΕΙΩΣΗ] Από προεπιλογή, το σενάριο δημιουργεί ξανά το ίδιο περιβάλλον κάθε φορά που ξεκινάει, αφαιρώντας όλες τις προηγούμενες καταστάσεις. Αυτή η συμπεριφορά μπορεί να αλλάξει στο \"config.sh\" χρησιμοποιώντας την παράμετρο \"PERSISTENT\".\n\n\nΕκτέλεση δημιουργίας και εγκατάστασης σεναρίου.  \n```bash\ngit clone https://github.com/airalab/xcm-robobank-prototype.git\ncd xcm-robobank-prototype\n./scripts/init.sh\n```\n\nΒασικές ενέργειες του σεναρίου \"init.sh\":\n - ανάγνωση ρυθμίσεων (αρχείο \"config.sh\" με αριθμό αναθεώρησης, αρχικά κλειδιά κόμβου και αναγνωριστικά, παράμετρος διατήρησης chaindata κ.λπ.)\n - εγκατάσταση πακέτων λειτουργικού συστήματος, Rust και Python\n - δημιουργία ξεχωριστών δυαδικών αρχείων για την αλυσίδα αναμετάδοσης και για τις δύο παρααλυσίδες\n    - τα δυαδικά αρχεία θα δημιουργηθούν στον υποφάκελο ./bin. \n - (προαιρετικό) αφαίρεση όλων των προηγούμενων δεδομένων αλυσίδας για όλες τις αλυσίδες\n    - απενεργοποιείται αν η \"PERSISTENT=1\" έχει οριστεί στο \"config.sh\"\n - εκτέλεση ως ξεχωριστές διεργασίες (με ξεχωριστά PIDs και I/O pipes):\n    - επαληθευτές της αλυσίδας αναμετάδοσης (δηλαδή 4 επαληθευτές που εκτελούν μια σταθερή αναθεώρηση Rococo)\n    - συλλέκτες για την παρααλυσίδα-100 (δηλαδή ένας μόνο συλλέκτης για την πρώτη παρααλυσίδα που αναπτύσσετε)\n    - συλλέκτες για την παρααλυσίδα-200 (δηλαδή ένας μόνο συλλέκτης για την δεύτερη παρααλυσίδα που αναπτύσσετε)\n - εκτύπωση όλων των σημείων έναρξης, θυρών στην κονσόλα, επιτρέποντάς σας να μελετήσετε οποιαδήποτε αλυσίδα χρησιμοποιώντας εφαρμογές προσκομιστή (explorer, DApp)\n - συνεχής εκτύπωση όλων των δεδομένων εξόδου όλων των αλυσίδων στην κονσόλα\n\n[ΠΡΟΕΙΔΟΠΟΙΗΣΗ] Μετά την εκκίνηση, περιμένετε μέχρι η δίκτυο να είναι ενεργό, βεβαιωθείτε ότι η ολοκλήρωση των μπλοκ έχει ξεκινήσει και ότι οι παρααλυσίδες έχουν καταχωρηθεί. Αυτές οι διαδικασίες θα πρέπει να απαιτούν περίπου 5 λεπτά (50 μπλοκ x 6 δευτερόλεπτα).\n\n## Έλεγχος ότι η αρχική ρύθμιση λειτουργεί \n\nΧρησιμοποιήστε το πρότυπο προσκομιστή Polkdot και τα δημιουργημένα σημεία έναρξης \"--ws-port\" για να συνδεθείτε με κάθε κόμβο.\nΑνοίξτε την [εφαρμογή Polkadot](https://polkadot.js.org/apps/?rpc=ws://localhost:9500/) για να παρακολουθήσετε τις αλυσίδες. \n\n### Παράδειγμα:\nΤοπικός υπολογιστής, 4 επαληθευτές αλυσίδας αναμετάδοσης, ένας συλλέκτης παρααλυσίδας-100, ένας συλλέκτης παρααλυσίδας-200:\n- [Relay validator 1](https://polkadot.js.org/apps/?rpc=ws://localhost:9500/)\n- [Relay validator 2](https://polkadot.js.org/apps/?rpc=ws://localhost:9501/)\n- [Relay validator 3](https://polkadot.js.org/apps/?rpc=ws://localhost:9502/)\n- [Relay validator 4](https://polkadot.js.org/apps/?rpc=ws://localhost:9503/)\n- [Parachain-100 collator](https://polkadot.js.org/apps/?rpc=ws://localhost:10054/)\n- [Parachain-200 collator](https://polkadot.js.org/apps/?rpc=ws://localhost:10055/)\n\n\nΑν όλα λειτουργούν και η συναίνεση ξεκίνησε, μπορούμε να προχωρήσουμε στην εκτέλεση των δοκιμαστικών μας περιπτώσεων (σε ένα νέο τερματικό).\n\n### Δοκιμή μετάδοσης μηνυμάτων UMP\n```bash\n./scripts/init.sh ump\n```\nΔημιουργεί ένα μήνυμα `Balance.transfer` στην `παρααλυσίδα-100` και το περνά στην αλυσίδα αναμετάδοσης.\nΌταν η αλυσίδα αναμετάδοσης λάβει το μήνυμα, θα μεταφέρει 15 νομίσματα από τον λογαριασμό `para 100` στον λογαριασμό Charlie.\n\n\n### Δοκιμή πέρασματος μηνυμάτων HRMP\n```bash\n./scripts/init.sh ump\n```\n\nΔημιουργεί ένα μήνυμα `Balance.transfer` στο `parachain-100` και το περνάει στο `sibling 200`.\nΠριν από αυτό, εφοδιάζει τον λογαριασμό `subl 100` με 1000 νομίσματα και δημιουρεί ένα κανάλι επικοινωνίας μεταξύ των parachains.\n```bash\n./scripts/init.sh hrmp\n```\nΤα επόμενα μηνύματα μπορούν να σταλούν εκτελώντας την υποεντολή `hrmpm`. Δεν δημιουργεί ένα κανάλι και γι' αυτό τρέχει πιο γρήγορα.\n```bash\n./scripts/init.sh hrmpm\n```\n\n### Περισσότερες επιλογές\n```bash\n./scripts/init.sh help\n```\n\n## Τοπικό Testnet\n\n### Δημιουργία προσαρμοσμένου chain spec\n```\n./bin/polkadot build-spec --chain rococo-local --disable-default-bootnode > rococo_local.json\n```\n\nΕπεξεργασία του rococo_local.json, αντικατάσταση των παραμέτρων ισορροπιών και αρχών με τις δικές σας.\n```json\n  \"keys\": [\n    [\n      \"\",\n      \"\",\n      {\n        \"grandpa\": \"\",\n        \"babe\": \"\",\n        \"im_online\": \"\",\n        \"para_validator\": \"\",\n        \"para_assignment\": \"\",\n        \"authority_discovery\": \"\"\n      }\n    ]\n```\n\nΔιεύθυνση Polkadot για το //Alice//stash (κρυπτογραφία sr25519).\n```bash\n$ polkadot key inspect-key --scheme sr25519 --network substrate //Alice//stash\n```\n\n```text\nSecret Key URI `//Alice//stash` is account:\nSecret seed:      \n\nPublic key (hex): \n\nAccount ID:       \n\nSS58 Address:     \n```\n\nΚλειδί συνεδρίας Polkadot grandpa για το //Alice (κρυπτογραφία ed25519).\n```bash\n$ polkadot key inspect-key --scheme ed25519 --network substrate //Alice\n```\n```text\nSecret Key URI `//Alice` is account:\nSecret seed:      \n\nPublic key (hex): \n\nAccount ID:       \n\nSS58 Address:     \n```\n\nΔιεύθυνση Polkadot για το //Alice (κρυπτογραφία sr25519).\n```\n$ polkadot key inspect-key --scheme sr25519 --network substrate //Alice\n```\n```text\nSecret Key URI `//Alice` is account:\nSecret seed:      \n\nPublic key (hex): \n\nAccount ID:       \n\nSS58 Address:     \n```\n\nΜετατροπή του rococo_local.json σε μορφή raw.\n```\n./bin/polkadot build-spec --chain rococo_local.json --raw --disable-default-bootnode > rococo_local.json\n```\nΓια να χρησιμοποιήσετε το νέο chain spec αντικαταστήστε το αρχείο rococo.json στον φάκελο ./config/ με αυτό το νέο και εκτελέστε ξανά την αλυσίδα.\n```bash\n./scripts/init.sh run\n```\nΜπορείτε να επεξεργαστείτε ελεύθερα τον κώδικα. Η παραπάνω εντολή θα ξαναχτίσει το έργο και θα ενημερώσει τον κόμβο συλλέκτη πριν ξεκινήσει.\nΤο Cumulus είναι λογισμικό προεκδόσεων που εξακολουθεί να βρίσκεται υπό έντονη ανάπτυξη.\nΧρησιμοποιούμε ένα συγκεκριμένο commit του polkadot [46c826f595021475fa5dbcd0987ed53f104e6e15  18 mar 2021](https://github.com/paritytech/polkadot/tree/46c826f595021475fa5dbcd0987ed53f104e6e15)\n\nΜπορείτε να χρησιμοποιήσετε πιο πρόσφατες εκδόσεις του λογισμικού. Για να το κάνετε αυτό, αλλάξτε το POLKADOT_COMMIT στο αρχείο ./scipt/config.sh\nστο πιο πρόσφατο commit του κλάδου `rococo-v1`, διαγράψτε το ./bin/polkadot και εκτελέστε \n```bash\n./scripts/init.sh run\n```\n\nΕνημέρωση των εξαρτήσεων του έργου συλλέκτη \n```bash\ncargo update\n./scripts/init.sh build\n```\nΟρισμένες εξαρτήσεις πιθανόν να απαιτούν νέα χαρακτηριστικά του εργαλείου rust. Αυτό το έργο βασίζεται στο rust `nightly-2021-01-26`\nΕνημέρωση της έκδοσης του εργαλείου rust στο αρχείο ./scripts/config.sh πριν την κατασκευή.\n\n## Χάκεψε το parachain\n[Προσθήκη εξωτερικής παλέτας](https://substrate.dev/docs/en/tutorials/add-a-pallet/) - πρέπει να είναι πιθανόν στο \"μάθετε περισσότερα\";\n## Learn More\n\nΑνατρέξτε στο ανώτερο [Substrate Developer Hub Node Template](https://github.com/substrate-developer-hub/substrate-node-template) για να μάθετε περισσότερα για τη δομή αυτού του έργου, τις δυνατότητες που ενσωματώνει και τον τρόπο με τον οποίο υλοποιούνται αυτές οι δυνατότητες. Μπορείτε να μάθετε περισσότερα για [Το Μονοπάτι του Μπλοκ Parachain](https://polkadot.network/the-path-of-a-parachain-block/) στο επίσημο ιστολόγιο του Polkadot. [Parity Cumulus Workshop](https://substrate.dev/cumulus-workshop/#/)\n","tools":[],"fileInfo":{"path":"el/xcm-robobank.md","name":"xcm-robobank"}}},"context":{}}