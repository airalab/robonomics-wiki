{"hash":"d8d38e2102dee81cfad47d12e5958176ba3b55ca","data":{"doc":{"id":"53c47558ed9c5c16434ffec13c3f8976","title":"Ρύθμιση και εγκατάσταση λογισμικού Gaka-Chu","description":"","contributors":["PaTara43"],"headings":[],"subtitles":[{"depth":2,"value":"Εγκατάσταση λογισμικού στο KRC4","anchor":"#εγκατάσταση-λογισμικού-στο-krc4"},{"depth":2,"value":"Εγκατάσταση λογισμικού στο NUC","anchor":"#εγκατάσταση-λογισμικού-στο-nuc"},{"depth":2,"value":"Συμπλήρωση σταθερών","anchor":"#συμπλήρωση-σταθερών"},{"depth":2,"value":"Βαθμονόμηση Gaka-Chu","anchor":"#βαθμονόμηση-gaka-chu"},{"depth":2,"value":"Δοκιμή της βαθμονόμησης Gaka-Chu","anchor":"#δοκιμή-της-βαθμονόμησης-gaka-chu"},{"depth":2,"value":"Δημιουργία τέχνης","anchor":"#δημιουργία-τέχνης"},{"depth":3,"value":"Διεπαφή Eki","anchor":"#διεπαφή-eki"},{"depth":3,"value":"RViz και MOVEit","anchor":"#rviz-και-moveit"},{"depth":3,"value":"Περιβάλλον","anchor":"#περιβάλλον"},{"depth":3,"value":"Επεξεργαστής εικόνων","anchor":"#επεξεργαστής-εικόνων"},{"depth":3,"value":"Ενότητα σχεδίασης τροχιών","anchor":"#ενότητα-σχεδίασης-τροχιών"},{"depth":2,"value":"Στείλτε στο ρομπότ μια εικόνα για να σχεδιάσει","anchor":"#στείλτε-στο-ρομπότ-μια-εικόνα-για-να-σχεδιάσει"}],"content":"\nhttps://www.youtube.com/watch?v=GxlYxaykqTU\n\n**Σε αυτό το άρθρο θα περάσουμε μερικά βήματα εγκατάστασης και εκκίνησης για να ρυθμίσουμε ένα ρομπότ-ζωγράφο. Απαιτήσεις:**\n- KUKA KR6 R900 sixx με KRC4 και SmartPad·\n- Intel NUC με εγκατεστημένο [ROS melodic](http://wiki.ros.org/melodic/Εγκατάστασηation/Ubuntu)·\n- Τραπέζι, χρώμα, πινέλο, νερό. \n\n## Εγκατάσταση λογισμικού στο KRC4\nΑπαιτείται διεπαφή EKI και στα δύο, KRC4 και NUC. Λεπτομερείς πληροφορίες για το πώς να το ρυθμίσετε στο KRC4 παρουσιάζονται [εδώ](https://github.com/AlexeiOvcharov/kuka_experimental/tree/a915bf4e932990379c84164713e7ae11a24a2a13/kuka_eki_hw_interface/krl). Εκκινήστε το στον ελεγκτή του ρομπότ.\n\n## Εγκατάσταση λογισμικού στο NUC\nΔημιουργήστε έναν χώρο εργασίας catkin:\n```\nmkdir -p ~/catkin_ws/src\ncd ~/catkin_ws/\ncatkin build\n```\nΛήψη πακέτων ROS. Όλα τα σενάρια αποθηκεύονται [εδώ](https://github.com/airalab/robot_painter/tree/test_branch). Κλωνοποιήστε το αποθετήριο:\n```\ncd src\ngit clone --branch test_branch https://github.com/airalab/robot_painter\ncd robot_painter\nrm -rf scenes\nmv * ../\ncd ..\nrmdir robot_painter\n```\nΜπορεί να χρειαστείτε μερικά αρχεία κεφαλίδων και βιβλιοθήκες για να λειτουργήσει σωστά. Κατεβάστε τα:\n```\ncd ~\ngit clone https://github.com/PaTara43/kuka_moveit_webots\ncd kuka_moveit_webots\nsudo mv -r headers/* usr/include/c++/7/\nsudo mv libs/* usr/local/lib/\ncd ~\nsvn checkout https://github.com/PX4/Matrix/trunk/matrix\nmv matrix -r /usr/include/c++/7/\nsudo apt-get install ros-melodic-brics-actuator\ncd ~/catkin_ws\ncatkin build\n```\nΠροσθέστε την εντολή πηγής στο αρχείο `.bashrc`:\n```\necho “source ~/catkin_ws/devel/setup.bash” >> ~/.bashrc\nsource ~/.bashrc\n```\nΜέχρι στιγμής, θα πρέπει να μπορείτε να κκινήσετε τα σενάρια. Εάν κάτι πάει στραβά, δοκιμάστε μερικές [διορθώσεις προβλημάτων](https://github.com/airalab/robot_painter/issues)\n\n## Συμπλήρωση σταθερών\nΚαταρχάς, το ρομπότ πρέπει να γνωρίζει τη θέση και τον προσανατολισμό του καμβά, καθώς και τη θέση του κουτιού με το χρώμα. Όλα αυτά καθορίζονται στο `fake_painter_enviroment_tf/src/tf_broadcaster.cpp`. Ας το ρίξουμε μια ματιά.\n```\n// Plane constants\nconst double A = -0.0641;\nconst double B = 0.0214;\nconst double C = 0.9977;\nconst double D = -0.2198;\n\n// Canvas transform\nconst double px = 0.52;\nconst double py = -0.24;\nconst double qx = -0.011;\nconst double qy = -0.032;\nconst double qz = 0.0;\nconst double qw = 0.999;\n```\nΑυτές είναι οι σταθερές εξισώσεων επιπέδου που καθορίζουν τη θέση του καμβά στον 3D χώρο. Πρέπει να ληφθούν κατά τη διάρκεια ενός διαδικασίας βαθμονόμησης που περιγράφεται παρακάτω. Στη συνέχεια ακολουθεί το χρώμα.\n```\ncolorTransform.transform.translation.x = 0.5;\ncolorTransform.transform.translation.y = 0.2;\ncolorTransform.transform.translation.z = 0.258;\n```\nΑυτές είναι οι συντεταγμένες του κουτιού με το χρώμα. Μπορούν επίσης να καθοριστούν κατά τη βαθμονόμηση. Οι διαστάσεις του καμβά καθορίζονται στο\n```\ncanvas.width = 0.5;\ncanvas.height = 0.4;\n```\nΑποθηκεύονται και άλλες σημαντικές σταερές στο `local_task_planner/src/Drawing.cpp`:\n```\nconst double COLOR_BOTLE_HEIGHT = 0.06;\nconst double COLOR_HEIGHT = 0.045;\nconst double HEIGHT_OFFSET = COLOR_BOTLE_HEIGHT - COLOR_HEIGHT + 0.02;\nconst double BRUSH_HEIGHT = 0.01;\nconst double BRUSH_WIDTH = 0.01;\n```\nΤα ονόματά τους λένε όλα, οπότε συμπληρώστε τα ανάλογα με την κατάσταση.\n\n## Βαθμονόμηση Gaka-Chu\nΗ ίδια η διαδικασία βαθμονόμησης είναι αρκετά απλή.\n\n1) Εκκίνηση διεπαφής EKI στο KRC4:\n\nΣυνδεθείτε σε λειτουργία 'AUT', ενεργοποιήστε τους οδηγούς και εκκινήστε το σενάριο `eki_hw_interface`\n\n2) Εκκίνηση διεπαφής EKI στο NUC\n```\nroslaunch kuka_eki_hw_interface test_hardware_interface.launch\n```\nΘα πρέπει να εμφανίζει ατελείωτα αρχεία καταγραφής.\n\n3) Εκκίνηση RViz\n```\nroslaunch kuka_moveit_config demo.launch\n```\nΘα πρέπει να δείτε το εξής:\n\n![KUKA in RViz](../images/kuka-real/kuka_rviz.png \"KUKA in RViz\")\n\nΔοκιμάστε να μετακινήσετε τον τερματικό εκτελεστή και κάντε κλικ στο 'Σχεδιασμός και Εκτέλεση'. Ο ρομπότ θα πρέπει να κινηθεί. Στο SmartPad πηγαίνετε σε **Display -> Actual position** και παρατηρήστε τις συντεταγμένες του τερματικού εκτελεστή. Τοποθετήστε ένα καμβά οριζόντια στη βάση του ρομπότ. Συνδέστε ένα πινέλο στον κάτοχο πινέλου και μετακινήστε το προσεκτικά μέχρι να ακουμπήσει ελάχιστα τον καμβά. Σε αυτή τη θέση, αποθηκεύστε τις συντεταγμένες του τερματικού εκτελεστή. Επαναλάβετε 12-15 φορές. Επίσης, αποθηκεύστε τις συντεταγμένες του κέντρου του καμβά και του κουτιού με την μπογιά.\nΌταν έχετε ένα σύνολο συντεταγμένων, χρησιμοποιήστε [αυτά](https://github.com/nakata5321/Matlab_scripts_gaka-chu) τα Matlab scripts για να επιλύσετε τις λείπουσες σταθερές και το quaternion. Επικολλήστε τα. Ανακατασκευάστε τον χώρο εργασίας σας με\n```\ncd ~/catkin_workspace\nrm -rf build logs devel\ncatkin build\n```\n\n## Δοκιμή της βαθμονόμησης Gaka-Chu\nΌταν έχει βαθμονομηθεί, η Gaka-Chu πρέπει να δοκιμαστεί σχεδιάζοντας τα όρια του καμβά. Για να τον κάνετε να το κάνει, εκτελέστε τα παρακάτω σε νέο τερματικό:\n```\nroslaunch kuka_eki_hw_interface test_hardware_interface.launch\nroslaunch kuka_moveit_config demo.launch\nrosrun fake_painter_enviroment_tf tf_broadcaster\nrosrun local_task_planner draw_workspace\n```\nΜετά από αυτό, θα πρέπει να δείτε ένα περίγραμμα του καμβά στο RViz:\n\n![KUKA in RViz canvas](../images/kuka-real/kuka_rviz_canvas.png \"KUKA in RViz canvas\")\n\nΠατήστε \"S\" στο τερματικό για να πραγματοποιήσετε τη δοκιμή. Ο τερματικός εκτελεστής του ρομπότ θα πρέπει να μετακινηθεί ακριβώς πάνω από τα όρια του καμβά και το πινέλο θα πρέπει να ακουμπάει απαλά τον καμβά κατά τη διάρκεια ολόκληρης της κίνησης. Αν δεν συμβαίνει αυτό, δοκιμάστε να ξαναβαθμονομήσετε. Αν το μοντέλο του καμβά είναι περιστραμμένο λάθος, μπορείτε να το περιστρέψετε αλλάζοντας το quaternion στο Matlab.\n\n## Δημιουργία τέχνης\nΧρειάζεστε 6 βασικά ενότητες για να λειτουργήσει όλο αυτό:\n- Διεπαφή EKI;\n- MOVEit + RViz;\n- Μετάδοση πλαισίων περιβάλλοντος;\n- Υπηρεσία μετατροπής εικόνας;\n- Ενότητα σχεδίασης τροχιών;\n- Εκκίνηση ενεργοποιητή.\n\nΑς τις εκκινήσουμε μία-μία.\n\n### Διεπαφή Eki\nΣτο KRC4 εκκινήστε το `eki_hw_interface`, στο NUC σε ένα νέο τερματικό κάντε:\n```\nroslaunch kuka_eki_hw_interface test_hardware_interface.launch\n```\n\n### RViz και MOVEit\nΧρειάζεστε έναν σχεδιαστή και μια προσομοίωση. Εκκινήστε τα με\n```\nroslaunch kuka_moveit_config demo.launch\n```\n\n### Περιβάλλον\nΠείτε στο ρομπότ πού βρίσκονται το κουτί με τη μπογιά και ο καμβάς. Σημειώστε ότι δεν είναι απαραίτητο να εκκινήσετε τον κόμβο `draw workspace`, ο `tf_broadcaster` μοιράζεται το μέγεθος του καμβά. Απλώς δεν το εμφανίζει στο RViz.\n```\nrosrun fake_painter_enviroment_tf tf_broadcaster\n```\n\n### Επεξεργαστής εικόνων\nΌλες οι εισερχόμενες εικόνες πρέπει να επεξεργαστούν. Εκκινήστε την υπηρεσία.\n```\nrosrun picture_preprocessing TextConverter.py\n```\nΌταν λαμβάνει την κλήση, επεξεργάζεται μια εικόνα με ένα φίλτρο HP και δημιουργεί ένα αρχείο rosbag με τις τροχιές.\n\n### Ενότητα σχεδίασης τροχιών\nΤο κυριότερο σενάριο εδώ είναι ο ίδιος ο σχεδιασής τροχιών. Αναμένει την εικόνα, καλεί την υπηρεσία TextConverter και σχεδιάζει τη ζωγραφική.\n```\nrosrun local_task_planner trajectory_drawing\n```\n\n## Στείλτε στο ρομπότ μια εικόνα για να σχεδιάσει\nΤο ρομπότ ακούει ένα συγκεκριμένο ROS-θέμα όπου πρέπει να περάσετε τη διαδρομή προς μια επιθυμητή εικόνα. Η εικόνα πρέπει να είναι τετράγωνη (πλάτος ίσο με ύψος) και να αποτελείται από γραμμές. Στείλτε τη διαδρομή:\n```\nrostopic pub /run std_msgs/String \"data: '<path_to_picture>'\"\n```\nΜετά από αυτό, εμφανίζονται δύο παράθυρα που δείχνουν τα περίγραμματα και τις τροχιές. Κλείστε τα και δείτε τον Gaka-Chu να σχεδιάζει. Να είστε προσεκτικοί για την ασφάλεια και να είστε πάντα έτοιμοι να πατήσετε το κουμπί έκτακτης ανάγκης.\nΌταν ο Gaka-Chu τελειώσει την τέχνη του, μπορείτε να στείλετε μια άλλη διαδρομή για εικόνα και ο ζωγράφος επαναλαμβάνει ολόκληρη τη διαδικασία.\n","tools":[],"fileInfo":{"path":"el/gaka-chu.md","name":"gaka-chu"}}},"context":{}}