{"hash":"d3d0c5839881173ea5ce58941786b122f010825e","data":{"doc":{"id":"bafaad095926e0754f53180a8867d92c","title":"إعداد Gaka-Chu وتثبيت البرامج","description":"","contributors":["PaTara43"],"headings":[],"subtitles":[{"depth":2,"value":"تثبيت البرامج على KRC4","anchor":"#تثبيت-البرامج-على-krc4"},{"depth":2,"value":"تثبيت البرامج على NUC","anchor":"#تثبيت-البرامج-على-nuc"},{"depth":2,"value":"ملء الثوابت","anchor":"#ملء-الثوابت"},{"depth":2,"value":"معايرة Gaka-Chu","anchor":"#معايرة-gaka-chu"},{"depth":2,"value":"اختبار معايرة Gaka-Chu","anchor":"#اختبار-معايرة-gaka-chu"},{"depth":2,"value":"صنع فن","anchor":"#صنع-فن"},{"depth":3,"value":"واجهة Eki","anchor":"#واجهة-eki"},{"depth":3,"value":"RViz و MOVEit","anchor":"#rviz-و-moveit"},{"depth":3,"value":"البيئة","anchor":"#البيئة"},{"depth":3,"value":"معالج الصور","anchor":"#معالج-الصور"},{"depth":3,"value":"رسام المسارات","anchor":"#رسام-المسارات"},{"depth":2,"value":"أرسل للروبوت صورة للرسم","anchor":"#أرسل-للروبوت-صورة-للرسم"}],"content":"\nhttps://www.youtube.com/watch?v=GxlYxaykqTU\n\n** في هذه المقالة سنقوم بشرح بعض خطوات التثبيت والتشغيل لإعداد روبوت الرسام. المتطلبات:**\n- KUKA KR6 R900 sixx مع KRC4 و SmartPad؛\n- Intel NUC مع [ROS melodic](http://wiki.ros.org/melodic/تثبيتation/Ubuntu) مثبت؛\n- طاولة ودهان وفرشاة وماء.\n\n## تثبيت البرامج على KRC4\nمطلوب واجهة EKI على كل من KRC4 و NUC. يتم تقديم معلومات مفصلة حول كيفية إعدادها على KRC4 [هنا](https://github.com/AlexeiOvcharov/kuka_experimental/tree/a915bf4e932990379c84164713e7ae11a24a2a13/kuka_eki_hw_interface/krl). قم بتشغيلها على تحكم الروبوت.\n\n## تثبيت البرامج على NUC\nإنشاء مساحة عمل catkin:\n```\nmkdir -p ~/catkin_ws/src\ncd ~/catkin_ws/\ncatkin build\n```\nتنزيل حزم ROS. يتم تخزين جميع النصوص [هنا](https://github.com/airalab/robot_painter/tree/test_branch). استنساخ المستودع:\n```\ncd src\ngit clone --branch test_branch https://github.com/airalab/robot_painter\ncd robot_painter\nrm -rf scenes\nmv * ../\ncd ..\nrmdir robot_painter\n```\nقد تحتاج إلى بعض ملفات الرأس والمكتبات لجعل كل شيء يعمل بشكل صحيح. قم بتنزيلها:\n```\ncd ~\ngit clone https://github.com/PaTara43/kuka_moveit_webots\ncd kuka_moveit_webots\nsudo mv -r headers/* usr/include/c++/7/\nsudo mv libs/* usr/local/lib/\ncd ~\nsvn checkout https://github.com/PX4/Matrix/trunk/matrix\nmv matrix -r /usr/include/c++/7/\nsudo apt-get install ros-melodic-brics-actuator\ncd ~/catkin_ws\ncatkin build\n```\nأضف أمر المصدر إلى ملف `.bashrc`:\n```\necho “source ~/catkin_ws/devel/setup.bash” >> ~/.bashrc\nsource ~/.bashrc\n```\nحتى الآن. يجب أن تكون قادرًا على تشغيل النصوص. إذا حدث خطأ ما ، جرب بعض [إجراءات الاستكشاف والإصلاح](https://github.com/airalab/robot_painter/issues)\n\n## ملء الثوابت\nأولاً وقبل كل شيء ، يحتاج الروبوت إلى معرفة موقع واتجاه القماش وكذلك موقع علبة الدهان. يتم تحديد كل ذلك في `fake_painter_enviroment_tf/src/tf_broadcaster.cpp`. دعنا نلقي نظرة عليه.\n```\n// Plane constants\nconst double A = -0.0641;\nconst double B = 0.0214;\nconst double C = 0.9977;\nconst double D = -0.2198;\n\n// Canvas transform\nconst double px = 0.52;\nconst double py = -0.24;\nconst double qx = -0.011;\nconst double qy = -0.032;\nconst double qz = 0.0;\nconst double qw = 0.999;\n```\nهذه هي ثوابت معادلة السطح التي تحدد موقع القماش في الفضاء ثلاثي الأبعاد. يتم الحصول عليها خلال عملية معايرة موضحة أدناه. يأتي بعدها الدهان.\n```\ncolorTransform.transform.translation.x = 0.5;\ncolorTransform.transform.translation.y = 0.2;\ncolorTransform.transform.translation.z = 0.258;\n```\nهذه هي إحداثيات علبة الدهان. يمكن أيضًا تحديدها أثناء عملية المعايرة. يتم تحديد حجم القماش في\n```\ncanvas.width = 0.5;\ncanvas.height = 0.4;\n```\nتخزين الثوابت المهمة الأخرى في `local_task_planner/src/Drawing.cpp`:\n```\nconst double COLOR_BOTLE_HEIGHT = 0.06;\nconst double COLOR_HEIGHT = 0.045;\nconst double HEIGHT_OFFSET = COLOR_BOTLE_HEIGHT - COLOR_HEIGHT + 0.02;\nconst double BRUSH_HEIGHT = 0.01;\nconst double BRUSH_WIDTH = 0.01;\n```\nأسماؤهم تقول كل شيء ، لذا قم بملئها وفقًا للحالة.\n\n## معايرة Gaka-Chu\nعملية المعايرة نفسها بسيطة جدًا.\n\n1) قم بتشغيل واجهة EKI على KRC4:\n\nقم بتسجيل الدخول في وضع 'AUT' ، وقم بتشغيل السائقين وتشغيل النص `eki_hw_interface`\n\n2) قم بتشغيل واجهة EKI على NUC\n```\nroslaunch kuka_eki_hw_interface test_hardware_interface.launch\n```\nيجب أن يظهر سجلات لا نهائية.\n\n3) قم بتشغيل RViz\n```\nroslaunch kuka_moveit_config demo.launch\n```\nيجب أن ترى ما يلي:\n\n![KUKA in RViz](../images/kuka-real/kuka_rviz.png \"KUKA in RViz\")\n\nحاول تحريك نهاية المؤثر والنقر على 'Plan and Execute'. يجب أن يتحرك الروبوت. انتقل إلى SmartPad وانتقل إلى **Display -> Actual position** وقم بمرقبة إحداثيات نهاية المؤثر. ضع قماشًا أفقيًا على قاعدة الروبوت. قم بتوصيل فرشاة في حامل الفرشاة وقم بتحريكها بعناية حتى تلامس القماش بالكاد. في هذا الموضع ، قم بحفظ إحداثيات نهاية المؤثر. كرر ذلك 12-15 مرة. قم أيضًا بحفظ إحداثيات مركز القماش وعلبة الدهان.\nعندما تحصل على مجموعة من الإحداثيات ، استخدم [هذه](https://github.com/nakata5321/Matlab_scripts_gaka-chu) نصوص Matlab لحل الثوابت المفقودة والرباعي. الصقهم. قم بإعادة بناء مساحة العمل الخاصة بك باستخدام\n```\ncd ~/catkin_workspace\nrm -rf build logs devel\ncatkin build\n```\n\n## اختبار معايرة Gaka-Chu\nعندما يتم المعايرة ، يجب اختبار Gaka-Chu عن طريق رسم حدود القماش. لجعله يفعل ذلك ، قم بتنفيذ كل منها في نافذة الطرفية الجديدة:\n```\nroslaunch kuka_eki_hw_interface test_hardware_interface.launch\nroslaunch kuka_moveit_config demo.launch\nrosrun fake_painter_enviroment_tf tf_broadcaster\nrosrun local_task_planner draw_workspace\n```\nبعد ذلك ، يجب أن ترى حدود القماش في RViz:\n\n![KUKA in RViz canvas](../images/kuka-real/kuka_rviz_canvas.png \"KUKA in RViz canvas\")\n\nفي الطرفية ، اضغط على \"S\" لأداء الاختبار. يجب أن يتحرك نهاية المؤثر للروبوت فوق حدود القماش ويجب أن تلامس الفرشاة القماش بلطف خلال الحركة بأكملها. إذا لم يحدث ذلك ، جرب إعادة المعايرة. إذا كانت نموذج القماش مدارًا بشكل خاطئ ، يمكنك تدويره عن طريق تغيير الرباعي في Matlab.\n\n## صنع فن\nتحتاج إلى 6 وحدات أساسية لجعل كل شيء يعمل:\n- واجهة EKI؛\n- MOVEit + RViz;\n- بث إطارات البيئة؛\n- خدمة تحويل الصورة؛\n- وحدة رسم المسارات؛\n- بدء المؤشر.\n\nلنشغلهم واحدًا تلو الآخر.\n\n### واجهة Eki\nعلى KRC4 ، قم بتشغيل `eki_hw_interface` ، على NUC في نافذة الطرفية الجديدة قم بالتالي:\n```\nroslaunch kuka_eki_hw_interface test_hardware_interface.launch\n```\n\n### RViz و MOVEit\nتحتاج إلى مخطط ومحاكاة. قم بتشغيلهما باستخدام\n```\nroslaunch kuka_moveit_config demo.launch\n```\n\n### البيئة\nأخبر الروبوت بموقع علبة الدهان والقماش. لاحظ أنه ليس من الضروري تشغيل `draw workspace` node ، حيث يشترك `tf_broadcaster` في حجم القماش. فقط لا يظهر ذلك في RViz.\n```\nrosrun fake_painter_enviroment_tf tf_broadcaster\n```\n\n### معالج الصور\nيجب معالجة جميع الصور الواردة. قم بتشغيل الخدمة.\n```\nrosrun picture_preprocessing TextConverter.py\n```\nعندما يتلقى الاتصال ، يقوم بمعالجة صورة بفلتر HP وإنشاء ملف rosbag مع المسارات.\n\n### رسام المسارات\nالبرنامج النصي الأكثر أهمية هنا هو رسام المسارات نفسه. ينتظر الصورة ، ويستدعي خدمة TextConverter ويقوم برسم اللوحة.\n```\nrosrun local_task_planner trajectory_drawing\n```\n\n## أرسل للروبوت صورة للرسم\nيستمع الروبوت إلى موضوع ROS محدد حيث تحتاج إلى تمرير مسار لصورة مرغوبة. يجب أن تكون الصورة مربعة (العرض يساوي الارتفاع) ومصنوعة من خطوط. أرسل المسار:\n```\nrostopic pub /run std_msgs/String \"data: '<path_to_picture>'\"\n```\nبعد ذلك. يظهر نافذتان تعرضان الحدود والمسارات. أغلقهما وانظر إلى رسم Gaka-Chu. كن حذرًا وكن دائمًا على استعداد للضغط على زر الإيقاف الطارئ.\nعندما ينتهي Gaka-Chu من فنه ، يمكنك إرسال مسار آخر للصورة ويكرر الرسام العملية بأكملها.\n","tools":[],"fileInfo":{"path":"ar/gaka-chu.md","name":"gaka-chu"}}},"context":{}}