{"hash":"0196e6eaf77d64aeb5e8bcaa4d983797efef2fe5","data":{"doc":{"id":"2e3aea5ce7941120a677e21a85e4c5a6","title":"مجموعة اختبارات Substrate Cumulus Parachain للرسائل بين السلاسل الجانبية","description":"","contributors":["ddulesov","boogerwooger","tubleronchik"],"headings":[],"subtitles":[{"depth":2,"value":"المصدر","anchor":"#المصدر"},{"depth":2,"value":"بناء وتشغيل","anchor":"#بناء-وتشغيل"},{"depth":2,"value":"التحقق من أن الإعداد الأولي يعمل","anchor":"#التحقق-من-أن-الإعداد-الأولي-يعمل"},{"depth":3,"value":"مثال:","anchor":"#مثال"},{"depth":3,"value":"اختبار تمرير الرسائل UMP","anchor":"#اختبار-تمرير-الرسائل-ump"},{"depth":3,"value":"اختبار تمرير الرسائل HRMP","anchor":"#اختبار-تمرير-الرسائل-hrmp"},{"depth":3,"value":"المزيد من الخيارات","anchor":"#المزيد-من-الخيارات"},{"depth":2,"value":"شبكة اختبار محلية","anchor":"#شبكة-اختبار-محلية"},{"depth":3,"value":"إنشاء مواصفات سلسلة مخصصة","anchor":"#إنشاء-مواصفات-سلسلة-مخصصة"},{"depth":2,"value":"اختراق الباراشين","anchor":"#اختراق-الباراشين"},{"depth":2,"value":"Learn More","anchor":"#learn-more"}],"content":"\n\nالهدف الرئيسي لهذا المشروع هو تبسيط تطوير وقت التشغيل الخاص بالسلاسل الجانبية عند استخدام الرسائل بين السلاسل الجانبية. \nيتيح تطوير رمز التشغيل مع اختبارات الدمج ذات درجة عالية من التكرارية وسهولة الاستخدام.\nيقوم بتلقائي بناء وإعداد تكوين الشبكة المحددة مسبقًا (أي سلسلة واحدة للتوجيه + سلسلتان جانبيتان) ، وإعداد قنوات الإرسال بين السلاسل الجانبية وتشغيل اختبارات الرسائل ، وإرسال الرسائل ، باستخدام استدعاء لوقت التشغيل ، كل ذلك مُنشأ ومُركب بلغة Python.\n\nيتم استخدام XCM Testsuite لاختبار دورة الإنتاج لـ Robobank - مجموعة من الوحدات الفرعية ، التي تسمح للروبوتات بالتسجيل في سلاسل جانبية خارجية ، واستلام الطلبات المدفوعة مسبقًا ، وتنفيذها واستلام المدفوعات باستخدام الرموز الخارجية. يتيح ذلك للروبوتات العمل داخل شبكة Robonomics مع كل البنية التحتية المطلوبة ، ولكن في الوقت نفسه ، تقدم خدماتها على أي سلسلة جانبية أخرى.\n\nمتوفر مقطع فيديو توضيحي على [YouTube](https://www.youtube.com/watch؟v=S_bZgsxngiM)\n\nالخطوات الرئيسية في سيناريو العرض التوضيحي هي:\n- تشغيل سلسلة توجيه وسلسلتين جانبيتين في حزمة من 6 عمليات\n- إعداد قنوات الرسائل XCM بين السلاسل الجانبية\n- تسجيل روبوت في كلتا السلاسل الجانبية\n- إنشاء طلب لهذا الروبوت في سلسلة العميل (احتياطي الدفع لإكمال الطلب)\n- إرسال رسالة XCM إلى سلسلة Robonomics\n- إنشاء سجل الطلب \"المعكوس\" على سلسلة Robonomics\n- يقبل الروبوت الطلب على سلسلة Robonomics\n- إرسال رسالة XCM حول قبول الطلب إلى سلسلة العميل\n- قبول الطلب على سلسلة العميل (احتياطي رسوم الجزاء عن عدم إكمال الطلب حتى الموعد النهائي للطلب)\n- يكمل الروبوت الطلب على سلسلة Robonomics\n- إرسال رسالة XCM حول إكمال الطلب إلى سلسلة العميل\n- تسوية جميع المدفوعات (يتم نقل دفعة العميل إلى الروبوت ، بالإضافة إلى رسوم الجزاء غير المستخدمة)\n- إغلاق الطلب1\n\n\n## المصدر\nهذا المشروع هو نسخة مشتقة من\n[Substrate Developer Hub Node Template](https://github.com/substrate-developer-hub/substrate-node-template).\nيحتوي على رمز الوقت التشغيل الذي يتم اختباره.\nكما في رمز العقدة الأصلي للسلاسل الجانبية في الدليل \"./pallets\" ، \"./runtime\" ، \"./node\".\n\nالاختلافات مع \"substrate-node-template\" الأصلي:\n- هذا الوقت التشغيل للمجمع لديه وحدة معالجة HRMP ويمكنه التعامل مع الرسائل من السلاسل الجانبية الشقيقة\n- وحدة اختبار الوقت التشغيل الوهمية جاهزة للاختبارات الداخلية لـ XCM\n\n## بناء وتشغيل\nالإعداد الموصى به (بشدة): \n```\nUbuntu 20, 16 Gb RAM, 8 CPU, 120 Gb SSD\n```\n[ملاحظة] يمكن أن يستغرق البناء الأول الكثير من الوقت ، حتى عدة ساعات على الأجهزة غير المثلى.\n\n[ملاحظة] يعمل البرنامج النصي مع الإصدارات الثابتة (تجزئة الهاشات) من Polkadot (Rococo) في سلسلة التوجيه والسلاسل الجانبية.\n\n[ملاحظة] بشكل افتراضي ، يقوم البرنامج النصي بإعادة إنشاء نفس البيئة في كل مرة يتم فيها تشغيله ، عن طريق إزالة جميع الحالات السابقة. يمكن تغيير هذا السلوك في \"config.sh\" باستخدام \"PERSISTENT\" param.\n\n\nتشغيل بناء وبرنامج الإعداد.  \n```bash\ngit clone https://github.com/airalab/xcm-robobank-prototype.git\ncd xcm-robobank-prototype\n./scripts/init.sh\n```\n\nالإجراءات الأساسية لبرنامج \"init.sh\":\n - قراءة التكوين (ملف \"config.sh\" مع رقم التنقيح ، ومفاتيح العقدة الأولية والمعرفات ، ومعلمة استمرارية بيانات السلسلة ، إلخ.)\n - إعداد حزم النظام الأساسية و Rust و Python\n - بناء برامج ثنائية منفصلة لسلسلة التوجيه وأيضًا لكل من السلاسل الجانبية\n    - سيتم إنشاء البرامج الثنائية في الدليل ./bin. \n - (اختياري) إزالة جميع بيانات السلسلة السابقة لجميع السلاسل\n    - معطل إذا تم تعيين \"PERSISTENT=1\" في \"config.sh\"\n - يعمل كعمليات منفصلة (بأرقام معرفات العمليات وأنابيب الإدخال / الإخراج المنفصلة):\n    - المحققون في سلسلة التوجيه (أي 4 محققين لتشغيل تنقيح Rococo المستقر)\n    - مجمعو السلاسل الجانبية للسلسلة 100 (أي مجمع واحد لللسلة الجانبية الأولى التي تقوم بتطويرها)\n    - مجمعو السلاسل الجانبية للسلسلة 200 (أي مجمع واحد للسلسلة الجانبية الثانية التي تقوم بتطويرها)\n - يطبع جميع نقاط النهاية والمنافذ إلى وحدة التحكم ، مما يتيح لك دراسة أي سلسلة باستخدام تطبيقات الواجهة الأمامية (مستكشف ، DApp)\n - استمر في طباعة جميع بيانات الإخراج لجميع السلاسل إلى وحدة التحكم\n\n[تحذير] بعد التشغيل ، انتظر حتى يتم تشغيل الشبكة ، وتأكد من بدء تنفيذ الكتلة ، وأن السلاسل الجانبية مسجلة. يجب أن تستغرق هذه العمليات حوالي 5 دقائق (50 كتلة × 6 ثوانٍ).\n\n## التحقق من أن الإعداد الأولي يعمل \n\nاستخدم واجهة المستخدم الأمامية القياسية لـ Polkdot ونقاط النهاية المولدة \"--ws-port\" للاتصال بكل عقدة.\nافتح [تطبيق Polkadot](https://polkadot.js.org/apps/?rpc=ws://localhost:9500/) لمراقبة السلاسل. \n\n### مثال:\nLocalhost ، 4 محققين لسلسلة التوجيه ، مجمع واحد للسلسلة الجانبية 100 ، مجمع واحد للسلسلة الجانبية 200:\n- [Relay validator 1](https://polkadot.js.org/apps/?rpc=ws://localhost:9500/)\n- [Relay validator 2](https://polkadot.js.org/apps/?rpc=ws://localhost:9501/)\n- [Relay validator 3](https://polkadot.js.org/apps/?rpc=ws://localhost:9502/)\n- [Relay validator 4](https://polkadot.js.org/apps/?rpc=ws://localhost:9503/)\n- [Parachain-100 collator](https://polkadot.js.org/apps/?rpc=ws://localhost:10054/)\n- [Parachain-200 collator](https://polkadot.js.org/apps/?rpc=ws://localhost:10055/)\n\n\nإذا عمل كل شيء، وبدأ التوافق، يمكننا المضي قدمًا في تشغيل حالات الاختبار الخاصة بنا (في نافذة الأوامر الجديدة).\n\n### اختبار تمرير الرسائل UMP\n```bash\n./scripts/init.sh ump\n```\nيقوم بإنشاء رسالة `Balance.transfer` في `parachain-100` ويمرها إلى سلسلة الوساطة.\nعندما تستلم سلسلة الوساطة الرسالة، ستقوم بتحويل 15 رمزًا من حساب `para 100` إلى حساب Charlie.\n\n\n### اختبار تمرير الرسائل HRMP\n```bash\n./scripts/init.sh ump\n```\n\nيقوم بإنشاء رسالة `Balance.transfer` في `parachain-100` ويمررها إلى `sibling 200`.\nقبل ذلك، يمنح حساب `subl 100` 1000 رمز وينشئ قناة اتصال بين الباراشينات.\n```bash\n./scripts/init.sh hrmp\n```\nيمكن إرسال رسائل أخرى عن طريق تشغيل الأمر الفرعي `hrmpm`. لا يقوم بإنشاء قناة وبالتالي يعمل بشكل أسرع.\n```bash\n./scripts/init.sh hrmpm\n```\n\n### المزيد من الخيارات\n```bash\n./scripts/init.sh help\n```\n\n## شبكة اختبار محلية\n\n### إنشاء مواصفات سلسلة مخصصة\n```\n./bin/polkadot build-spec --chain rococo-local --disable-default-bootnode > rococo_local.json\n```\n\nتحرير rococo_local.json، واستبدال معلمات الأرصدة والسلطات بالخاصة بك.\n```json\n  \"keys\": [\n    [\n      \"\",\n      \"\",\n      {\n        \"grandpa\": \"\",\n        \"babe\": \"\",\n        \"im_online\": \"\",\n        \"para_validator\": \"\",\n        \"para_assignment\": \"\",\n        \"authority_discovery\": \"\"\n      }\n    ]\n```\n\nعنوان Polkadot لـ //Alice//stash (تشفير sr25519).\n```bash\n$ polkadot key inspect-key --scheme sr25519 --network substrate //Alice//stash\n```\n\n```text\nSecret Key URI `//Alice//stash` is account:\nSecret seed:      \n\nPublic key (hex): \n\nAccount ID:       \n\nSS58 Address:     \n```\n\nمفتاح جلسة Polkadot grandpa لـ //Alice (تشفير ed25519).\n```bash\n$ polkadot key inspect-key --scheme ed25519 --network substrate //Alice\n```\n```text\nSecret Key URI `//Alice` is account:\nSecret seed:      \n\nPublic key (hex): \n\nAccount ID:       \n\nSS58 Address:     \n```\n\nعنوان Polkadot لـ //Alice (تشفير sr25519).\n```\n$ polkadot key inspect-key --scheme sr25519 --network substrate //Alice\n```\n```text\nSecret Key URI `//Alice` is account:\nSecret seed:      \n\nPublic key (hex): \n\nAccount ID:       \n\nSS58 Address:     \n```\n\nتحويل rococo_local.json إلى التنسيق الخام.\n```\n./bin/polkadot build-spec --chain rococo_local.json --raw --disable-default-bootnode > rococo_local.json\n```\nلاستخدام مواصفات سلسلة جديدة، استبدل ملف rococo.json في مجلد ./config/ بهذا الجديد وأعد تشغيل السلسلة.\n```bash\n./scripts/init.sh run\n```\nيمكنك تحرير الشفرة بحرية. سيقوم الأمر أعلاه بإعادة بناء المشروع وتحديث عقدة المجمع قبل البدء.\nCumulus هو برنامج قبل الإصدار لا يزال قيد التطوير الشاق.\nنحن نستخدم التزامًا محددًا من polkadot [46c826f595021475fa5dbcd0987ed53f104e6e15 18 مارس 2021](https://github.com/paritytech/polkadot/tree/46c826f595021475fa5dbcd0987ed53f104e6e15)\n\nيمكنك استخدام إصدارات أحدث من البرنامج. للقيام بذلك، قم بتغيير POLKADOT_COMMIT في ./scipt/config.sh\nإلى أحدث التزام في فرع `rococo-v1`، احذف ./bin/polkadot، وقم بتشغيل \n```bash\n./scripts/init.sh run\n```\n\nتحديث تبعيات مشروع المجمع \n```bash\ncargo update\n./scripts/init.sh build\n```\nقد تتطلب بعض التبعيات ميزات جديدة لأداة البرمجة Rust. يستند هذا المشروع إلى Rust `nightly-2021-01-26`\nقم بتحديث إصدار أداة برمجة Rust في ./scripts/config.sh قبل البناء.\n\n## اختراق الباراشين\n[إضافة لوحة خارجية](https://substrate.dev/docs/en/tutorials/add-a-pallet/) - يجب أن تكون في \"تعلم المزيد\" ربما؟\n## Learn More\n\nراجع [قالب العقدة في Substrate Developer Hub Node](https://github.com/substrate-developer-hub/substrate-node-template) لمعرفة المزيد عن هيكل هذا المشروع والقدرات التي يحتوي عليها والطريقة التي يتم بها تنفيذ تلك القدرات. يمكنك معرفة المزيد عن [مسار كتلة الباراشين](https://polkadot.network/the-path-of-a-parachain-block/) في مدونة Polkadot الرسمية. [ورشة عمل Parity Cumulus](https://substrate.dev/cumulus-workshop/#/)\n","tools":[],"fileInfo":{"path":"ar/xcm-robobank.md","name":"xcm-robobank"}}},"context":{}}