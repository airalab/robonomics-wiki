{"hash":"27d6626b76dcb92dd3ddfe09b4010e2c0ab01932","data":{"doc":{"id":"4b8c5fd321a9b97974185f9869659df0","title":"توصيل الاستشعار","description":"","contributors":["LoSk-p","makyul"],"headings":[],"subtitles":[{"depth":2,"value":"المتطلبات","anchor":"#المتطلبات"},{"depth":2,"value":"عصا Zigbee","anchor":"#عصا-zigbee"},{"depth":2,"value":"التثبيت","anchor":"#التثبيت"},{"depth":2,"value":"التكوين","anchor":"#التكوين"},{"depth":2,"value":"توصيل المقبس","anchor":"#توصيل-المقبس"},{"depth":2,"value":"بعد الزوية","anchor":"#بعد-الزوية"},{"depth":2,"value":"التشغيل","anchor":"#التشغيل"}],"content":"\nمثال على العمل موجود في الفيديو:\n\nhttps://youtu.be/jsaFCVAx2sA\n\n## المتطلبات\n\n* [Aqara Smart Plug](https://aqara.ru/product/aqara-smart-plug/?yclid=462434430312045270)\n* Raspberry Pi\n* Zigbee adapter [JetHome USB JetStick Z2](https://jhome.ru/catalog/parts/PCBA/293/) (أو واحدة من [مدعومة](https://www.zigbee2mqtt.io/information/supported_adapters.html))\n\nالخدمة تعمل على Raspberry Pi وتتصل بالمقبس الذكي عبر بروتوكول zigbee.\n\n## عصا Zigbee\n\nIf you have JetHome USB JetStick Z2 it already has necessary firmware so you don't need to flash it. But if you have another adapter firstly you need to flash it with zigbee2MQTT software. You can find instructions for you device [هنا](https://www.zigbee2mqtt.io/information/supported_adapters.html).\n\nقم بتوصيل المحول وتحقق من عنوان المحول (قد يكون أيضًا `/dev/ttyUSB1`):\n```bash\n$ ls -l /dev/ttyUSB0\ncrw-rw---- 1 root dialout 166, 0 May 16 19:15 /dev/ttyUSB0 \n```\n\nقد تحتاج إلى الوصول إلى منفذ USB أولاً. أضف مستخدمك إلى مجموعة `dialout` (يعمل في أوبونتو، ولكن اسم المجموعة قد يكون مختلفًا في نظام التشغيل الآخر).\nبالنسبة لأوبونتو:\n```bash\nsudo usermod -a -G dialout $USER\n```\nبالنسبة لـ arch:\n```bash\nsudo usermod -a -G uucp $USER\n```\nثم قم بتسجيل الخروج وتسجيل الدخول أو إعادة تشغيل الكمبيوتر.\n\n## التثبيت\n\nاستنسخ المستودع:\n\n```\ngit clone https://github.com/makyul/robonomics-carbon-footprint.git\ncd robonomics-carbon-footprint\n```\n\n## التكوين\n\nانتقل إلى `data/configuration.yaml` وقم بتعيين `permit_join: true`:\n\n```\n# Home Assistant integration (MQTT discovery)\nhomeassistant: false\n\n# allow new devices to join\npermit_join: true\n\n# MQTT settings\nmqtt:\n  # MQTT base topic for zigbee2mqtt MQTT messages\n  base_topic: zigbee2mqtt\n  # MQTT server URL\n  server: 'mqtt://172.17.0.1'\n  # MQTT server authentication, uncomment if required:\n  # user: my_user\n  # password: my_password\n\n# Serial settings\nserial:\n  # Location of CC2531 USB sniffer\n  port: /dev/ttyUSB0\n```\nقد ترغب أيضًا في ملء الحقلين \"الخادم\" و\"المنفذ\" بالمعلومات المقابلة. في حقل \"الخادم\"، استخدم عنوان IP الخاص بجسر \"docker0\" لتأسيس الاتصال:\n\n```bash\n$ ip a                                                 127\n1: lo: <LOOPBACK,UP,LOWER_UP> mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000\n    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00\n\n...\n\n5: docker0: <NO-CARRIER,BROADCAST,MULTICAST,UP> mtu 1500 qdisc noqueue state DOWN group default \n    link/ether 02:42:0d:ff:5f:a3 brd ff:ff:ff:ff:ff:ff\n    inet 172.17.0.1/16 brd 172.17.255.255 scope global docker0\n       valid_lft forever preferred_lft forever\n    inet6 fe80::42:dff:feff:5fa3/64 scope link \n       valid_lft forever preferred_lft forever\n```\nهنا عنوانك هو `172.17.0.1`.\n\nثم قم بإنشاء ملف config/config.yaml بالمعلومات التالية وقم بتعيين موقعك (يمكنك الاطلاع على https://countrycode.org/ للحصول على رمز ISO المكون من 3 أحرف):\n\n```\nlocation: RUS\nservice_address: 4GdHeLbmio2noKCQM5mfxswXfPoW2PcbpYKKkM4NQiqSqJMd\ntwin_id: 5\nsending_timeout: 3600\nbroker_address: \"172.17.0.1\"\nbroker_port: 1883\n```\n\n## توصيل المقبس\n\nالتشغيل الأول:\n\n```\ndocker-compose up     \n```\n\nللتبديل إلى وضع الزوجية على المقبس، اضغط على زر الطاقة لبضع ثوان حتى يبدأ الضوء في الوميض باللون الأزرق بسرعة. \n\nفي السجلات يجب أن ترى الآن أن المقبس الخاص بك بدأ بنشر إلى mqtt. \n\n\n## بعد الزوية\n\nإذا كنت لا تسمح للأجهزة الأخرى بالاقتران بجهازك، فيجب عليك الآن الانتقال إلى \"data/configuration.yaml\" وتعيين \"permit_join: false\". أعد تشغيل الخدمة (استخدم `Ctrl+C` و\n\n```bash\ndocker-compose up     \n```\nمرة أخرى لتقديم التغييرات).\n\n## التشغيل\nعند بدء التشغيل الأول سيتم إنشاء حساب للمقبس. \n> إذا كان لديك بالفعل حساب يجب عليك إضافة بذرته إلى ملف `config.config.yaml` في قسم `device_seed`:\n>\n> ```\n> location: RUS\n> service_address: 4GdHeLbmio2noKCQM5mfxswXfPoW2PcbpYKKkM4NQiqSqJMd\n> twin_id: 5\n> sending_timeout: 3600\n> broker_address: \"172.17.0.1\"\n> broker_port: 1883\n> device_seed: <device_seed>\n>```\n\nبعد إنشاء الحساب سترى العنوان في السجلات (سيتم إضافة البذرة إلى `config/config.yaml`):\n```\nplug               | Generated account with address: 4GuP82BMAgrbtU8GhnKhgzP827sJEaBXeMX38pZZKPSpcWeT\n```\nتحتاج إلى نقل بعض الرموز إلى هذا الحساب لرسوم المعاملات، يمكنك القيام بذلك على [Robonomics Portal](https://polkadot.js.org/apps/?rpc=wss%3A%2F%2Fkusama.rpc.robonomics.network%2F#/accounts). \n\nسيعرف الخدمة أن لديك رموز كافية، في السجلات سترى:\n```\nplug               | Balance is OK\n```\nسيعرف الخدمة رسائل mqtt من المقبس واستخدام الطاقة بأمان. كل ساعة (يمكنك تغيير الوقت المحدد في `config/config.yaml` في قسم `sending_timeout`، الوقت المحدد بالثواني) ستقوم بإنشاء سجل بيانات يحتوي على المعلومات التالية:\n```\n{'geo': 'RUS', 'power_usage': 1.021237391233444, 'timestamp': 1644494860.5860083}\n```\n","tools":[],"fileInfo":{"path":"ar/carbon-footprint-sensor.md","name":"carbon-footprint-sensor"}}},"context":{}}