{"hash":"53abe0fd1aeba0a6e1f75f3e7657baa86d8f7363","data":{"doc":{"id":"0ed2183d90b77b92e81dc23a8a731c6e","title":"Robonomics + Prometheus + Grafana","description":"","contributors":["Vourhey"],"headings":[],"subtitles":[{"depth":2,"value":"مقدمة","anchor":"#مقدمة"},{"depth":2,"value":"الشروط المسبقة","anchor":"#الشروط-المسبقة"},{"depth":2,"value":"الخطوة 1 - إنشاء حسابات المستخدمين","anchor":"#الخطوة-1---إنشاء-حسابات-المستخدمين"},{"depth":2,"value":"الخطوة 2 - تنزيل برنامج Prometheus","anchor":"#الخطوة-2---تنزيل-برنامج-prometheus"},{"depth":2,"value":"الخطوة 3 - تكوين Prometheus","anchor":"#الخطوة-3---تكوين-prometheus"},{"depth":2,"value":"الخطوة 4 - تشغيل Prometheus","anchor":"#الخطوة-4---تشغيل-prometheus"},{"depth":2,"value":"الخطوة 5 - تنزيل Node Exporter","anchor":"#الخطوة-5---تنزيل-node-exporter"},{"depth":2,"value":"الخطوة 6 - تشغيل Node Exporter","anchor":"#الخطوة-6---تشغيل-node-exporter"},{"depth":2,"value":"الخطوة 7 - تكوين Prometheus لجمع مقاييس Node Exporter","anchor":"#الخطوة-7---تكوين-prometheus-لجمع-مقاييس-node-exporter"},{"depth":2,"value":"الخطوة 8 - إضافة Robonomic build في node_exporter","anchor":"#الخطوة-8---إضافة-robonomic-build-في-node_exporter"},{"depth":2,"value":"الخطوة 9 - إعداد Grafana","anchor":"#الخطوة-9---إعداد-grafana"},{"depth":2,"value":"المراجع","anchor":"#المراجع"}],"content":"\n**تم توفير التعليمات التالية بواسطة [Hubo Bubo](https://github.com/hubobubo)**\n\n**المقال الأصلي موجود [هنا](https://github.com/hubobubo/robonomics/wiki/Robonomics-(XRT)-metrics-using-Prometheus-and-Grafana)**\n\n## مقدمة\nلمراقبة وصيانة أفضل للعقد الوبونوميكس ، من الجيد إعداد مراقبة استنادًا إلى خادم بروميثيوس وجرافانا. ستوضح هذه الوثيقة كيفية تكوين كل منهما لمراقبة العقد الخاص بك بشكل كامل.\n\n##  الشروط المسبقة\n* [إعداد الخادم باستخدام Ubuntu 18.04](https://www.digitalocean.com/community/tutorials/initial-server-setup-with-ubuntu-18-04) \n* [تم تثبيت مجمع Robonomics parachain](https://blog.aira.life/installing-and-running-the-robonomics-validator-in-the-polkadot-network-487ad4c1a567)\n* تأكد من أن robonomics.service يعمل على جهازك ويمكن الوصول إلى المنفذ 9615 \n\n## الخطوة 1 - إنشاء حسابات المستخدمين\n\nلأغراض الأمان ، سنبدأ بإنشاء حسابين جديدين للمستخدمين ، prometheus و node_exporter. قم بإنشاء هاتين الحسابين ، واستخدم الخيارات _--no-create-home_ و _--shell /bin/false_ حتى لا يتمكن هؤلاء المستخدمين من تسجيل الدخول إلى الخادم.\n```\nsudo useradd --no-create-home --shell /bin/false prometheus\nsudo useradd --no-create-home --shell /bin/false node_exporter\n```\n\nقبل تنزيل برامج Prometheus ، قم بإنشاء الدلائل اللازمة لتخزين ملفات وبيانات Prometheus. وفقًا لتقاليد Linux القياسية ، سنقوم بإنشاء دليل في _/etc_ لملفات تكوين Prometheus ودليل في _/var/lib_ لبياناته.\n```\nsudo mkdir /etc/prometheus\nsudo mkdir /var/lib/prometheus\n```\nالآن ، قم بتعيين مالكية المستخدم والمجموعة على الدلائل الجديدة للمستخدم prometheus.\n```\nsudo chown prometheus:prometheus /etc/prometheus\nsudo chown prometheus:prometheus /var/lib/prometheus\n```\n## الخطوة 2 - تنزيل برنامج Prometheus\n\nأولاً ، قم بتنزيل وفك حزمة الإصدار الثابت الحالي من Prometheus في دليل المستخدم الخاص بك. يمكنك العثور على أحدث البرامج الثنائية على [صفحة تنزيل Prometheus.](https://prometheus.io/download/)\n\n```\nwget https://github.com/prometheus/prometheus/releases/download/v2.21.0/prometheus-2.21.0.linux-amd64.tar.gz\n\n```\nالآن ، قم بفك الأرشيف المحمل.\n\n```\ntar xvf prometheus-2.21.0.linux-amd64.tar.gz\n\n```\nسيتم إنشاء دليل يسمى prometheus-2.21.0.linux-amd64 يحتوي على ملفين ثنائيين (prometheus و promtool) ، ودلائل _consoles_ و _console_libraries_ التي تحتوي على ملفات واجهة الويب ، وترخيصًا ، وإشعارًا ، وعدة ملفات مثالية.\n\nانسخ الملفين الثنائيين إلى الدليل _/usr/local/bin_.\n\n```\nsudo cp prometheus-2.21.0.linux-amd64/prometheus /usr/local/bin/\nsudo cp prometheus-2.21.0.linux-amd64/promtool /usr/local/bin/\n\n```\nقم بتعيين مالكية المستخدم والمجموعة على الملفين الثنائيين للمستخدم prometheus الذي تم إنشاؤه في الخطوة 1.\n\n```\nsudo chown prometheus:prometheus /usr/local/bin/prometheus\nsudo chown prometheus:prometheus /usr/local/bin/promtool\n\n```\nانسخ الدلائل consoles و _console_libraries_ إلى _/etc/prometheus_.\n\n```\nsudo cp -r prometheus-2.21.0.linux-amd64/consoles /etc/prometheus\nsudo cp -r prometheus-2.21.0.linux-amd64/console_libraries /etc/prometheus\n\n```\nق بتعيين مالكية المستخدم والمجموعة على الدلائل للمستخدم prometheus. باستخدام العلامة -R سيضمن أن يتم تعيين المالكية على الملفات داخل الدليل أيضًا.\n\n```\nsudo chown -R prometheus:prometheus /etc/prometheus/consoles\nsudo chown -R prometheus:prometheus /etc/prometheus/console_libraries\n\n```\nالآن بعد تثبيت Prometheus ، سنقوم بإنشاء ملفات التكوين والخدمة الخاصة به في استعداد لتشغيله للمرة الأولى.\n\n## الخطوة 3 - تكوين Prometheus\n\nفي الدليل _/etc/prometheus_ ، استخدم nano أو محرر النص المفضل لديك لإنشاء ملف تكوين يسمى _prometheus.yml_.\n\n```\nsudo nano /etc/prometheus/prometheus.yml\n\n```\nفي الإعدادات العامة ، قم بتعريف الفاصل الزمني الافتراضي لجمع المقاييس. يجب أن يعمل Prometheus بهذه الإعدادات على كل مصدر بيانات ما لم تكون إعدادات المصدر الفردي تلغي الإعدادات العامة.\n\n```\nglobal:\n  scrape_interval: 15s\n\n```\nقيمة الفاصل الزمني للجمع هذه تخبر Prometheus بجمع المقاييس من المصدر بيانات كل 15 ثانية ، وهو وقت كافٍ لمعظم المصدرين.\nالآن ، أضف Prometheus نفسه إلى قائمة المصدرين للجمع من خلال التوجيهة التالية لـ scrape_configs:\n\n```\n...\nscrape_configs:\n  - job_name: 'prometheus'\n    scrape_interval: 5s\n    static_configs:\n      - targets: ['localhost:9090']\n```\nيستخدم Prometheus _job_name_ لوصف المصدرين في الاستعلامات وعلى الرسوم البيانية ، لذا تأكد من اختيار شيء وصفي هنا.\n\nوبما أن Prometheus يصدر بيانات مهمة عن نفسه يمكنك استخدامها لمراقبة الأداء وتصحيح الأخطاء ، فقد قمنا بتجاوز التوجيهة العامة للفاصل الزمني للجمع من 15 ثانية إلى 5 ثوانٍ للحصول على تحديثات أكثر تواترًا.\n\nأخيرًا ، يستخدم Prometheus التوجيهات _static_configs_ و _targets_ لتحديد مواقع تشغيل المصدرين. نظرًا لأن هذا المصدر يعمل على نفس الخادم الذي يعمل عليه Prometheus نفسه ، يمكننا استخدام localhost بدلاً من عنوان IP مع المنفذ الافتراضي 9090.\n\nيجب أن يبدو ملف التكوين الخاص بك الآن على هذا النحو:\n\n```\nglobal:\n  scrape_interval: 15s\n\nscrape_configs:\n  - job_name: 'prometheus'\n    scrape_interval: 5s\n    static_configs:\n      - targets: ['localhost:9090']\n```\nاحفظ الملف وأغلق محرر النص الخاص بك.\n\nالآن ، قم بتعيين مالكية المستخدم والمجموعة على ملف التكوين للمستخدم prometheus الذي تم إنشاؤه في الخطوة 1.\n\n```\nsudo chown prometheus:prometheus /etc/prometheus/prometheus.yml\n\n```\nمع الانتهاء من التكوين ، نحن جاهزون لاختبار Prometheus عن طريق تشغيله للمرة الأولى.\n\n## الخطوة 4 - تشغيل Prometheus\n\nقم بتشغيل Prometheus كمستخدم _prometheus_ ، وقدم المسار إلى كل من ملف التكوين ودليل البيانات.\n\n```\nsudo -u prometheus /usr/local/bin/prometheus \\\n    --config.file /etc/prometheus/prometheus.yml \\\n    --storage.tsdb.path /var/lib/prometheus/ \\\n    --web.console.templates=/etc/prometheus/consoles \\\n    --web.console.libraries=/etc/prometheus/console_libraries\n```\n\nيحتوي الإخراج على معلومات حول تقدم تحميل Prometheus وملف التكوين والخدمات ذات الصلة. كما يؤكد أن Prometheus يستمع على المنفذ _9090_.\n\n```\n_log output_\nSep 14 17:55:53 robonomics systemd[1]: Started Prometheus.\nSep 14 17:55:53 robonomics prometheus[29488]: level=info ts=2020-09-14T15:55:53.347Z caller=main.go:310 msg=\"No time or size retention was set so using the default time retention\" duration=15d\nSep 14 17:55:53 robonomics prometheus[29488]: level=info ts=2020-09-14T15:55:53.350Z caller=main.go:346 msg=\"Starting Prometheus\" version=\"(version=2.21.0, branch=HEAD, revision=e83ef207b6c2398919b69cd87d2693cfc2fb4127)\"\nSep 14 17:55:53 robonomics prometheus[29488]: level=info ts=2020-09-14T15:55:53.351Z caller=main.go:347 build_context=\"(go=go1.15.2, user=root@a4d9bea8479e, date=20200911-11:35:02)\"\nSep 14 17:55:53 robonomics prometheus[29488]: level=info ts=2020-09-14T15:55:53.351Z caller=main.go:348 host_details=\"(Linux 4.15.0-112-generic #113-Ubuntu SMP Thu Jul 9 23:41:39 UTC 2020 x86_64 robonomics (none))\"\nSep 14 17:55:53 robonomics prometheus[29488]: level=info ts=2020-09-14T15:55:53.351Z caller=main.go:349 fd_limits=\"(soft=1024, hard=4096)\"\nSep 14 17:55:53 robonomics prometheus[29488]: level=info ts=2020-09-14T15:55:53.351Z caller=main.go:350 vm_limits=\"(soft=unlimited, hard=unlimited)\"\nSep 14 17:55:53 robonomics prometheus[29488]: level=info ts=2020-09-14T15:55:53.357Z caller=main.go:701 msg=\"Starting TSDB ...\"\nSep 14 17:55:53 robonomics prometheus[29488]: level=info ts=2020-09-14T15:55:53.368Z caller=web.go:523 component=web msg=\"Start listening for connections\" address=0.0.0.0:9090\nSep 14 17:55:53 robonomics prometheus[29488]: level=info ts=2020-09-14T15:55:53.372Z caller=head.go:644 component=tsdb msg=\"Replaying on-disk memory mappable chunks if any\"\nSep 14 17:55:53 robonomics prometheus[29488]: level=info ts=2020-09-14T15:55:53.373Z caller=head.go:658 component=tsdb msg=\"On-disk memory mappable chunks replay completed\" duration=12.659µs\nSep 14 17:55:53 robonomics prometheus[29488]: level=info ts=2020-09-14T15:55:53.373Z caller=head.go:664 component=tsdb msg=\"Replaying WAL, this may take a while\"\nSep 14 17:55:53 robonomics prometheus[29488]: level=info ts=2020-09-14T15:55:53.380Z caller=head.go:716 component=tsdb msg=\"WAL segment loaded\" segment=0 maxSegment=1\nSep 14 17:55:53 robonomics prometheus[29488]: level=info ts=2020-09-14T15:55:53.381Z caller=head.go:716 component=tsdb msg=\"WAL segment loaded\" segment=1 maxSegment=1\nSep 14 17:55:53 robonomics prometheus[29488]: level=info ts=2020-09-14T15:55:53.381Z caller=head.go:719 component=tsdb msg=\"WAL replay completed\" checkpoint_replay_duration=48.125µs wal_replay_duration=8.253748ms total_replay_duration=8.343335ms\nSep 14 17:55:53 robonomics prometheus[29488]: level=info ts=2020-09-14T15:55:53.383Z caller=main.go:721 fs_type=EXT4_SUPER_MAGIC\nSep 14 17:55:53 robonomics prometheus[29488]: level=info ts=2020-09-14T15:55:53.384Z caller=main.go:724 msg=\"TSDB started\"\nSep 14 17:55:53 robonomics prometheus[29488]: level=info ts=2020-09-14T15:55:53.384Z caller=main.go:850 msg=\"Loading configuration file\" filename=/etc/prometheus/prometheus.yml\nSep 14 17:55:53 robonomics prometheus[29488]: level=info ts=2020-09-14T15:55:53.384Z caller=main.go:881 msg=\"Completed loading of configuration file\" filename=/etc/prometheus/prometheus.yml totalDuration=908.135µs remote_storage=6.693µs web_handler=819ns query_engine=1.383µs scrape=400.232µs scrape_sd=41.679µs notify=1.1µs notify_sd=1.847µs rules=1.522µs\nSep 14 17:55:53 robonomics prometheus[29488]: level=info ts=2020-09-14T15:55:53.384Z caller=main.go:673 msg=\"Server is ready to receive web requests.\"\n```\nإذا حصلت على رسالة خطأ، تحقق مرتين من استخدامك لصيغة YAML في ملف التكوين الخاص بك ثم اتبع التعليمات المعروضة على الشاشة لحل المشكلة.\n\nالآن، أوقف Prometheus عن طريق الضغط على _CTRL+C_، ثم افتح ملف خدمة _systemd_ جديد.\n\n```\nsudo nano /etc/systemd/system/prometheus.service\n\n```\nيخبر ملف الخدمة _systemd_ بتشغيل Prometheus كمستخدم prometheus، مع ملف التكوين الموجود في الدليل _/etc/prometheus/prometheus.yml_ وتخزين البيانات في الدليل _/var/lib/prometheus_. قم بنسخ المحتوى التالي إلى الملف:\n\n```\n[Unit]\nDescription=Prometheus\nWants=network-online.target\nAfter=network-online.target\n\n[Service]\nUser=prometheus\nGroup=prometheus\nType=simple\nExecStart=/usr/local/bin/prometheus \\\n    --config.file /etc/prometheus/prometheus.yml \\\n    --storage.tsdb.path /var/lib/prometheus/ \\\n    --web.console.templates=/etc/prometheus/consoles \\\n    --web.console.libraries=/etc/prometheus/console_libraries\n\n[Install]\nWantedBy=multi-user.target\n```\n\nأخيرًا، احفظ الملف وأغلق محرر النص الخاص بك. لاستخدام الخدمة الجديدة التي تم إنشاؤها، قم بإعادة تحميل systemd.\n\n```\nsudo systemctl daemon-reload\n\n```\nيمكنك الآن تشغيل Prometheus باستخدام الأمر التالي:\n\n```\nsudo systemctl start prometheus\n\n```\nللتأكد من تشغيل Prometheus، تحقق من حالة الخدمة.\n\n```\nsudo systemctl status prometheus\n\n```\nيخبرك الإخراج بحالة Prometheus ومعرف العملية الرئيسية (PID) واستخدام الذاكرة والمزيد.\n\nإذا لم تكن حالة الخدمة نشطة، اتبع التعليمات المعروضة على الشاشة وأعد تتبع الخطوات السابقة لحل المشكلة قبل متابعة البرنامج التعليمي.\n\n```\n* prometheus.service - Prometheus\n   Loaded: loaded (/etc/systemd/system/prometheus.service; enabled; vendor preset: enabled)\n   Active: active (running) since Mon 2020-09-14 17:59:48 CEST; 24h ago\n Main PID: 29650 (prometheus)\n    Tasks: 9 (limit: 4915)\n   CGroup: /system.slice/prometheus.service\n           `-29650 /usr/local/bin/prometheus --config.file /etc/prometheus/prometheus.yml --storage.tsdb.path /var/lib/prometheus/ --web.console.templates=/etc/prometheus/consoles --web.console.libraries=/etc/prometheus/console_libraries\n```\n\nعندما تكون جاهزًا للمتابعة، اضغط على _Q_ لإنهاء الأمر الحالي. أخيرًا، قم بتمكين الخدمة للبدء عند التمهيد.\n\n```\nsudo systemctl enable prometheus\n\n```\n\nالآن بعد أن تم تشغيل Prometheus ويعمل، يمكننا تثبيت مصدر بيانات إضافي لإنشاء مقاييس حول موارد الخادم الخاص بنا.\n\n## الخطوة 5 - تنزيل Node Exporter\n\nلتوسيع Prometheus ليشمل مقاييس حول نفسه فقط، سنقوم بتثبيت مصدر بيانات إضافي يسمى Node Exporter. يوفر Node Exporter معلومات مفصلة حول النظام، بما في ذلك استخدام وحدة المعالجة المركزية والقرص والذاكرة. قم بتنزيل الإصدار الثابت الحالي من Node Exporter إلى دليل المستخدم الخاص بك. يمكنك العثور على أحدث الثنائيات على [صفحة تنزيل Prometheus.](https://prometheus.io/download/)\n\n```\nwget https://github.com/prometheus/node_exporter/releases/download/v1.0.1/node_exporter-1.0.1.linux-amd64.tar.gz\n\n```\nالآن قم بفك ضغط الأرشيف الذي تم تنزيله.\n\n```\ntar xvf node_exporter-1.0.1.linux-amd64.tar.gz\n\n```\nسيتم إنشاء دليل يسمى _node_exporter-1.0.1.linux-amd64_ يحتوي على ملف ثنائي يسمى _node_exporter_، وترخيص، وإشعار.\n\nانسخ الملف الثنائي إلى الدليل _/usr/local/bin_ وقم بتعيين مالكية المستخدم والمجموعة للمستخدم node_exporter الذي قمت بإنشائه في الخطوة 1.\n\n```\nsudo cp node_exporter-1.0.1.linux-amd64/node_exporter /usr/local/bin\nsudo chown node_exporter:node_exporter /usr/local/bin/node_exporter\n\n```\nالآن بعد تثبيت Node Exporter، دعنا نقم بتجربته عن طريق تشغيله قبل إنشاء ملف خدمة له حتى يبدأ عند التمهيد.\n\n## الخطوة 6 - تشغيل Node Exporter\n\nإجراءات تشغيل Node Exporter مشابهة لتلك المتبعة لتشغيل Prometheus نفسه. ابدأ بإنشاء ملف خدمة Systemd لـ Node Exporter.\n\n```\nsudo nano /etc/systemd/system/node_exporter.service\n\n```\nانسخ المحتوى التالي إلى ملف الخدمة:\n\n```\n[Unit]\nDescription=Node Exporter\nWants=network-online.target\nAfter=network-online.target\n\n[Service]\nUser=node_exporter\nGroup=node_exporter\nType=simple\nExecStart=/usr/local/bin/node_exporter --collector.systemd\n\n[Install]\nWantedBy=multi-user.target\n```\n\nاحفظ الملف وأغلق محرر النص الخاص بك. أخيرًا، قم بإعادة تحميل systemd لاستخدام الخدمة الجديدة التي تم إنشاؤها.\n\n```\nsudo systemctl daemon-reload\n\n```\nيمكنك الآن تشغيل Node Exporter باستخدام الأمر التالي:\n\n```\nsudo systemctl start node_exporter\n\n```\nتحقق من تشغيل Node Exporter بشكل صحيح باستخدام الأمر status.\n\n```\nsudo systemctl status node_exporter\n\n```\nمثلما كان الحال من قبل، يخبرك هذا الإخراج بحالة Node Exporter ومعرف العملية الرئيسية (PID) واستخدام الذاكرة والمزيد. إذا لم تكن حالة الخدمة نشطة، اتبع التعليمات المعروضة على الشاشة وأعد تتبع الخطوات السابقة لحل المشكلة قبل المتابعة.\n\n```\n_Output_\n* node_exporter.service - Node Exporter\n   Loaded: loaded (/etc/systemd/system/node_exporter.service; enabled; vendor preset: enabled)\n   Active: active (running) since Mon 2020-09-14 17:58:25 CEST; 1 day 1h ago\n Main PID: 29612 (node_exporter)\n    Tasks: 7 (limit: 4915)\n   CGroup: /system.slice/node_exporter.service\n           `-29612 /usr/local/bin/node_exporter --collector.systemd\n```\nأخيرًا، قم بتمكين Node Exporter للبدء عند التمهيد.\n\n```\nsudo systemctl enable node_exporter\n\n```\nبعد تكوين Node Exporter بالكامل وتشغيله كما هو متوقع، سنخبر Prometheus ببدء جمع المقاييس الجديدة.\n\n## الخطوة 7 - تكوين Prometheus لجمع مقاييس Node Exporter\n\nنظرًا لأن Prometheus يجمع فقط المصدرين التي تم تعريفها في جزء scrape_configs من ملف التكوين الخاص به، سنحتاج إلى إضافة إدخال جديد لـ Node Exporter، تمامًا كما فعلنا لـ Prometheus نفسه. افتح ملف التكوين.\n\n```\nsudo nano /etc/prometheus/prometheus.yml\n\n```\nفي نهاية كتلة scrape_configs، أضف إدخالًا جديدًا يسمى node_exporter.\n\n```\n...\n  - job_name: 'node_exporter'\n    scrape_interval: 5s\n    static_configs:\n      - targets: ['localhost:9100']\n```\nنظرًا لأن هذا المصدر يعمل أيضًا على نفس الخادم الذي يعمل عليه Prometheus نفسه، يمكننا استخدام localhost بدلاً من عنوان IP مرة أخرى مع منفذ Node Exporter الافتراضي، 9100. يجب أن يبدو ملف التكوين الخاص بك كالتالي:\n\n```\nglobal:\n  scrape_interval: 15s\n\nscrape_configs:\n  - job_name: 'prometheus'\n    scrape_interval: 5s\n    static_configs:\n      - targets: ['localhost:9090']\n  - job_name: 'node_exporter'\n    scrape_interval: 5s\n    static_configs:\n      - targets: ['localhost:9100']\n```\nاحفظ الملف وأغلق محرر النص الخاص بك عندما تكون جاهزًا للمتابعة. أخيرًا، أعد تشغيل Prometheus لتطبيق التغييرات.\n\n```\nsudo systemctl restart prometheus\n\n```\nمرة أخرى، تحقق من أن كل شيء يعمل بشكل صحيح باستخدام الأمر status.\n\n```\nsudo systemctl status prometheus\n\n```\nإذا لم يتم تعيين حالة الخدمة على نشطة، اتبع التعليمات المعروضة على الشاشة وأعد تتبع الخطوات السابقة قبل المتابعة.\n\n```\nOutput\n* prometheus.service - Prometheus\n   Loaded: loaded (/etc/systemd/system/prometheus.service; enabled; vendor preset: enabled)\n   Active: active (running) since Tue 2020-09-15 19:06:56 CEST; 2s ago\n Main PID: 19725 (prometheus)\n    Tasks: 8 (limit: 4915)\n   CGroup: /system.slice/prometheus.service\n           `-19725 /usr/local/bin/prometheus --config.file /etc/prometheus/prometheus.yml --storage.tsdb.path /var/lib/prometheus/ --web.console.templates=/etc/prometheus/consoles --web.console.libraries=/etc/prometheus/console_libraries\n```\n\nالآن لدينا Prometheus و Node Exporter مثبتان ومكونان ويعملان.\n\n## الخطوة 8 - إضافة Robonomic build في node_exporter\n\nبعد تثبيت Prometheus و node_exporter بنجاح، سيتعين علينا استخدام مصدر بيانات Prometheus المضمن في كل مشروع substrate. لتحقيق ذلك، يجب علينا إضافة إدخال إضافي إلى _/etc/prometheus/prometheus.yml_. \nافتح ملف التكوين.\n\n```\nsudo nano /etc/prometheus/prometheus.yml\n\n```\nفي نهاية كتلة scrape_configs، أضف إدخالًا جديدًا يسمى robonomic_exporter.\n\n``` \n  - job_name: 'robonomics_exporter'\n    scrape_interval: 5s\n    static_configs:\n      - targets: ['localhost:9615']\n```\nاحفظ الملف وأغلق محرر النص. يجب أن يبدو ملف التكوين الخاص بك كما يلي:\n\n```\nglobal:\n  scrape_interval: 15s\n\nscrape_configs:\n  - job_name: 'prometheus'\n    scrape_interval: 5s\n    static_configs:\n      - targets: ['localhost:9090']\n  - job_name: 'node_exporter'\n    scrape_interval: 5s\n    static_configs:\n      - targets: ['localhost:9100']\n  - job_name: 'robonomics_exporter'\n    scrape_interval: 5s\n    static_configs:\n      - targets: ['localhost:9615']\n```\n\nأخيرًا ، قم بإعادة تشغيل بروميثيوس لتطبيق التغييرات.\n\n```\nsudo systemctl restart prometheus\n\n```\nمرة أخرى، تحقق من أن كل شيء يعمل بشكل صحيح باستخدام أمر الحالة.\n\n```\nsudo systemctl status prometheus\n\n```\nالآن لدينا بروميثيوس ومصدر العقدة ومصدر Robonomic مثبتة ومونة وجارية. الآن انتقل إلى Grafana\n\n## الخطوة 9 - إعداد Grafana\n\nآخر خطوة هي ربط بروميثيوس كمصدر بيانات في Grafana. لأغراض هذا البرنامج التعليمي ، سنستخدم Grafana المستندة إلى السحابة المجانية التي تسمح بوجود ما يصل إلى 5 لوحات تحكم بالإضافة إلى لوحة Robonomics المخصصة. انتقل ببساطة إلى grafana.com ، قم بإنشاء حساب جديد وقم بتسجيل الدخول إلى حالة Grafana الجديدة الخاصة بك.\n\nفي البداية ، يجب علينا إضافة مصدر بيانات جديد إلى Grafana والذي سيكون في حالتنا خادم Prometheus.\nانتقل إلى مصدر البيانات:\n\n>![DataSource](../images/prometheus-grafana/grafana-6-2020-09-15-19-18-50-Window.png)\n\nثم انقر على إضافة مصدر بيانات\n\n>![DataSource](../images/prometheus-grafana/grafana-7-2020-09-15-19-18-50-Window.png)\n\nحدد بروميثيوس\n\n>![DataSource](../images/prometheus-grafana/grafana-8-2020-09-15-19-18-50-Window.png)\n\nفي الشاشة الجديدة ، ضع عنوان IP الخاص بخادم Prometheus مع منفذ 9090\n\n> ![DataSource](../images/prometheus-grafana/grafana-9-2020-09-15-19-18-50-Window.png)\n\nبعد ذلك ، احفظ واختبر إذا قمت بجميع الخطوات يجب أن تكون النتيجة خضراء وجاهزة للاستيراد. في الموقع الرئيسي ، انقر على + ثم استيراد كما هو موضح في الصورة أدناه:\n\n> ![Import dashboard](../images/prometheus-grafana/grafana-1-2020-09-15-19-18-50-Window.png)\n\nثم يجب أن ترى صفحة الاستيراد:\n\n> ![Import page](../images/prometheus-grafana/grafana-2-2020-09-15-19-18-50-Window.png)\n\nفي عنوان URL أو معرف لوحة القيادة في Grafana.com ، اكتب 13015 (حيث يعد هذا هو معرف لوحة Robonomic)\n\n> ![Import Robonomic dashboard](../images/prometheus-grafana/grafana-3-2020-09-15-19-18-50-Window.png)\n\nبعد تحميل لوحة القيادة الخارجية ، ستحصل على هذه الشاشة:\n\n> ![XRT 13015 dashboard import](../images/prometheus-grafana/grafana-4-2020-09-15-19-18-50-Window.png)\n\nآخر خطوة هي اختيار مصدر البيانات الذي تم إنشاؤه مسبقًا والنقر فوق استيراد\n\n> ![Prometheus as a DataSource](../images/prometheus-grafana/grafana-5-2020-09-15-19-18-50-Window.png)\n\nهذا كل شيء! في هذه النقطة ، يجب أن ترى لوحة القيادة المستوردة. \n\n\n## المراجع\n\n* [كيفية تثبيت بروميثيوس على أوبونتو 16.04](https://www.digitalocean.com/community/tutorials/how-to-install-prometheus-on-ubuntu-16-04)\n* [إنشاء لوحة مراقبة بواسطة بروميثيوس + Grafana](https://medium.com/htc-research-engineering-blog/build-a-monitoring-dashboard-by-prometheus-grafana-741a7d949ec2)\n* [دعم Grafana لـ Prometheus](https://prometheus.io/docs/visualization/grafana/)\n* [رصد مقاييس مضيف Linux باستخدام مصدر العقدة](https://prometheus.io/docs/guides/node-exporter/)\n* [استعلام بروميثيوس](https://prometheus.io/docs/prometheus/latest/querying/basics/)\n* [تصور مقاييس العقدة](https://substrate.dev/docs/en/tutorials/visualize-node-metrics/)\n* [مصدر بروميثيوس للعقدة](https://github.com/paritytech/substrate/tree/master/utils/prometheus)\n* [لوحة القيادة polkadot](https://github.com/w3f/polkadot-dashboard)\n* [مقياس العقدة Polkadot](https://grafana.com/grafana/dashboards/12425)\n* [لوحة القيادة Node Exporter لـ Prometheus](https://grafana.com/grafana/dashboards/11074)\n* [مقاييس Grafana ROBONOMICS (XRT)](https://grafana.com/grafana/dashboards/13015)\n\n","tools":[],"fileInfo":{"path":"ar/robonomics-prometheus-grafana.md","name":"robonomics-prometheus-grafana"}}},"context":{}}