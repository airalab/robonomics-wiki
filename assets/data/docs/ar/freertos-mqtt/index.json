{"hash":"6ddc85c70d1e4001f71d1257dbf7abdecc0e208d","data":{"doc":{"id":"ea3078de5824457a152af204d46f9a82","title":"توصيل جهاز Amazon FreeRTOS بـ Robonomics عبر MQTT","description":"","contributors":["khssnv"],"headings":[],"subtitles":[{"depth":2,"value":"إعداد الأجهزة","anchor":"#إعداد-الأجهزة"},{"depth":2,"value":"تدفق البيانات","anchor":"#تدفق-البيانات"},{"depth":2,"value":"البرامج الثابتة","anchor":"#البرامج-الثابتة"},{"depth":3,"value":"Wi-Fi التكوين","anchor":"#wi-fi-التكوين"},{"depth":3,"value":"تكوين نقطة النهاية MQTT","anchor":"#تكوين-نقطة-النهاية-mqtt"},{"depth":2,"value":"من MQTT إلى Robonomics","anchor":"#من-mqtt-إلى-robonomics"},{"depth":2,"value":"الموارد الأصلية المستخدمة","anchor":"#الموارد-الأصلية-المستخدمة"}],"content":"\nإليك العرض التوضيحي لكيفية توصيل الميكروكنترولر الذي يعمل بنظام [Amazon Web Services FreeRTOS](https://aws.amazon.com/freertos/) بشبكة Robonomics عبر MQTT. يرجى التحقق من [هذا المستودع](http://github.com/khssnv/freertos_mqtt_robonomics_example) للحصول على مصدر المشروع.\n\nنحن نستخدم [ESP32 DevKitC](https://devices.amazonaws.com/detail/a3G0L00000AANtjUAH/ESP32-WROOM-32-DevKitC/) مع توزيعة FreeRTOS وتنفيذ MQTT المقدمة من [Espressif IoT Development Framework](https://github.com/espressif/esp-idf) حيث تعد Espressif بائعًا للميكروكنترولر المستخدم.\n\nهناك أيضًا مستشعر [PMS-3003](http://www.plantower.com/en/content/?107.html) لأغراض التوضيح. يقيس المستشعر وجود المواد الجسيمية في الهواء ويمكن للشخص استخدامه لتقدير جودة الهواء.\n\nجودة الهواء ليست موضوع المقالة، يمكنك العثور على المزيد حولها على موقع منظمة الصحة العالمية: [تلوث الهواء البيئي (في الهواء الطلق)](https://www.who.int/news-room/fact-sheets/detail/ambient-(outdoor)-air-quality-and-health). هدف النظام هو نشر قياسات المستشعر إلى شبكة Robonomics التابعة لـ Airalab.\n\n## إعداد الأجهزة\n\nنقوم بتوصيل PMS3003 TXD PIN5 بـ ESP32 DevKitC IO17 لنقل القياسات عبر UART.\nكما يتطلب كلا الجهازين طاقة وأرضية مشتركة.\n\n![Wiring Diagram](../images/freertos-mqtt/wiring.png)\n\n## تدفق البيانات\n\nمن أجل تسليم قياسات المستشعر إلى شبكة Robonomics، هدفنا على مستوى البرامج الثابتة هو الحصول على البيانات من المستشعر عن طريق بروتوكول الاتصال المضمن الذي يدعمه (UART في حالتنا) وتمريرها إلى مثيل AIRA عن طريق MQTT / TCP.\n\n![Sending](../images/freertos-mqtt/send.svg)\n\nفي مثالنا، نستخدم نسخة AIRA المستضافة في السحابة والتي تتوفر عن طريق عنوان IP العام واسم النطاق المعين.\nفي مثيل AIRA، نقوم بإعداد وسيط MQTT `mosquitto` والاشتراك في موضوع `/freertos_mqtt_robonomics_example/98:F4:AB:72:23:C4` للحصول على رسائل من MQTT.\n\nثم نمرر الرسائل إلى كاتب `robonomics io` عن طريق الأنبوب.\n\n![Receiving](../images/freertos-mqtt/recv.svg)\n\nالآن البيانات متاحة في شبكة Robonomics ويمكننا قراءتها مرة أخرى باستخدام `robonomics io`.\n\n## البرامج الثابتة\n\nنستخدم [تطبيق عينة ESP-MQTT مع نقل TCP](https://github.com/espressif/esp-idf/tree/master/examples/protocols/mqtt/tcp) كأساس.\n\nنقوم فقط بتعديل `main/app_main.c` للاتصال بالمستشعر عبر UART، ومزامنة الوقت باستخدام SNTP وروتين الناشر المنتظم لبروتوكول MQTT.\n\nإذا كنت تحاول تكرار المشروع، وهو أول مشروع قائم على ESP IDF، يرجى اتباع [دليل برمجة ESP-IDF من Espressif](https://docs.espressif.com/projects/esp-idf/en/latest/esp32/get-started/index.html#installation-step-by-step) في البداية للتعرف على عمليات البرامج الثابتة مثل التكوين والبناء والتحميل باستخدام أداة `idf.py`.\n\n### Wi-Fi التكوين\n\nمن أجل التواصل مع مثيل AIRA المنتشر في السحابة، يحتاج الميكروكنترولر الخاص بنا إلى اتصال بالإنترنت.\nنستخدم Wi-Fi ESP32 لذلك.\nتوفر Espressif أدوات لتكوين Wi-Fi المدمجة.\nفي مثالنا، نستخدم بيئة التطوير مع نظام التشغيل Ubuntu 20.04 GNU/Linux.\nلتكوين Wi-Fi، نذهب إلى مجلد المشروع ونقوم بتشغيل أداة تكوين SDK.\n\n```console\ncd freertos_mqtt_robonomics_example/firmware\nidf.py menuconfig\n```\n\nثم نقوم بتعيين SSID وكلمة مرور نقطة الوصول لشبكة Wi-Fi في قسم `Example الاتصالion التكوين`.\n\n![Menuconfig Wi-Fi](../images/freertos-mqtt/menuconfig-wi-fi.png)\n\n### تكوين نقطة النهاية MQTT\n\nهناك شيئين يجب تكوينهما لبروتوكول MQTT.\nالأول هو عنوان وسيط MQTT.\nيمكن تكوينه باستخدام أداة تكوين SDK.\n\n```console\ncd freertos_mqtt_robonomics_example/firmware\nidf.py menuconfig\n```\n\nقم بتعيين `عنوان الوسيط` في قسم `Example التكوين`.\n\n![Menuconfig MQTT](../images/freertos-mqtt/menuconfig-mqtt.png)\n\nالشيء الثاني هو موضوع MQTT.\nنقوم بتعيينه في البرامج الثابتة مع بادئة اسم المشروع تليها عنوان MAC لـ ESP32 الخاص بنا.\nيعطينا `/freertos_mqtt_robonomics_example/98:F4:AB:72:23:C4` للشريحة الدقيقة الخاصة بنا.\n\n## من MQTT إلى Robonomics\n\nفي البداية، دعنا نتحقق مما إذا كنا نستلم البيانات عبر MQTT.\nيمكننا الاشتراك في موضوع وسيط MQTT Mosquitto الخاص بنا لجهاز النشر.\n\n```console\n$ nix-shell -p mosquitto --run \"mosquitto_sub -h localhost -t '/freertos_mqtt_robonomics_example/98:F4:AB:72:23:C4'\"\nts=1615651809, PM1=2, PM2.5=6, PM10=3\n```\n\nهنا نقوم بجلب حزمة `mosquitto` إلى بيئتنا لاستخدام أداة `mosquitto_sub`.\nثم نشترك في الموضوع المحدد في البرمجيات الثابتة.\nحصلنا على قياساتنا مما يعني أن AIRA يستلم البيانات عبر MQTT بشكل صحيح.\nالآن دعونا نوجه هذه الرسائل إلى شبكة Robonomics.\n\n```console\nnix-shell -p mosquitto --run \"mosquitto_sub -h localhost -t '/freertos_mqtt_robonomics_example/98:F4:AB:72:23:C4'\" | robonomics io write pubsub --bootnodes=/ip4/127.0.0.1/tcp/34333 /freertos_mqtt_robonomics_example\n```\n\nهنا نستخدم أداة `robonomics` لنشر الرسائل في قناة النشر والاشتراك `/freertos_mqtt_robonomics_example`.\nنحدد `bootnodes` لضمان إنشاء اتصال واحد على الأقل.\n\nالآن نحن نقرأ هذه الرسائل من نفس قناة النشر والاشتراك.\n\n```console\n$ robonomics io read pubsub --listen /ip4/127.0.0.1/tcp/34333 /freertos_mqtt_robonomics_example\n2021-03-27 15:15:51  Generated random peer id: 12D3KooWB2nym5E6c3aPpnPKK5wB9Z6n9eZzcXSpyUBozxhi6dam\n2021-03-27 15:15:51  Subscribed to topic: _robonomics_pubsub_peer_discovery\n2021-03-27 15:15:51  Subscribed to topic: /freertos_mqtt_robonomics_example\n2021-03-27 15:15:56  New peer connected: PeerId(\"12D3KooWRPLCioD2b9XLZTZJQELSAuQAyTrHUKzRktrQHtTSs6kS\")\n2021-03-27 15:15:56  GRAFT: Mesh link added for peer: PeerId(\"12D3KooWRPLCioD2b9XLZTZJQELSAuQAyTrHUKzRktrQHtTSs6kS\") in topic: TopicHash { hash: \"_robonomics_pubsub_peer_discovery\" }\nts=1616843855, PM1=3, PM2.5=4, PM10=3\n```\n\n## الموارد الأصلية المستخدمة\n\n* توصيلات ESP32 DevKitC من مدونة GoJimmy https://gojimmypi.blogspot.com/2017/03/jtag-debugging-for-esp32.html\n* هيكل البيانات وفك التشفير PSM3003 من مشروع OpenAirProject https://github.com/openairproject/sensor-esp32\n\n**شكراً لكم جميعاً!**\n","tools":[],"fileInfo":{"path":"ar/freertos-mqtt.md","name":"freertos-mqtt"}}},"context":{}}