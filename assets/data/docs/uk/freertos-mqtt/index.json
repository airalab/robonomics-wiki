{"hash":"4837eab19522bd51a4e900b04399f243c7412046","data":{"doc":{"id":"5833e29763f4afa038f1bef7df00b5d2","title":"Підключення пристрою Amazon FreeRTOS до Robonomics через MQTT","description":"","contributors":["khssnv"],"headings":[],"subtitles":[{"depth":2,"value":"Налаштування апаратного забезпечення","anchor":"#налаштування-апаратного-забезпечення"},{"depth":2,"value":"Потік даних","anchor":"#потік-даних"},{"depth":2,"value":"Прошивка","anchor":"#прошивка"},{"depth":3,"value":"Налаштування Wi-Fi","anchor":"#налаштування-wi-fi"},{"depth":3,"value":"Налаштування кінцевої точки MQTT","anchor":"#налаштування-кінцевої-точки-mqtt"},{"depth":2,"value":"Від MQTT до Robonomics","anchor":"#від-mqtt-до-robonomics"},{"depth":2,"value":"Використані початкові ресурси","anchor":"#використані-початкові-ресурси"}],"content":"\nОсь демонстрація того, як мікроконтролер, що працює на [Amazon Web Services FreeRTOS](https://aws.amazon.com/freertos/), може бути підключений до мережі Robonomics через MQTT. Будь ласка, перевірте [цей репозиторій](http://github.com/khssnv/freertos_mqtt_robonomics_example) для отримання вихідного коду проекту.\n\nМи використовуємо [ESP32 DevKitC](https://devices.amazonaws.com/detail/a3G0L00000AANtjUAH/ESP32-WROOM-32-DevKitC/) з дистрибутивом FreeRTOS та реалізацією MQTT, наданою [Espressif IoT Development Framework](https://github.com/espressif/esp-idf), який є виробником використовуваного мікроконтролера.\n\nТакож є датчик [PMS-3003](http://www.plantower.com/en/content/?107.html)  для демонстраційних цілей. Датчик вимірює наявність частинок у повітрі, і його можна використовувати для оцінки якості повітря.\n\nЯкість повітря не є темою статті, ви можете дізнатися більше про це на веб-сайті ВООЗ: [Ambient (outdoor) air pollution](https://www.who.int/news-room/fact-sheets/detail/ambient-(outdoor)-air-quality-and-health). Метою системи є публікація вимірювань датчика в мережі Robonomics Airalab.\n\n## Налаштування апаратного забезпечення\n\nМи підключаємо PMS3003 TXD PIN5 до ESP32 DevKitC IO17 для передачі вимірювань за допомогою UART.\nТакож обидва пристрої потребують живлення та спільного заземлення.\n\n![Wiring Diagram](../images/freertos-mqtt/wiring.png)\n\n## Потік даних\n\nДля передачі вимірювань датчика в мережу Robonomics на рівні прошивки нашою метою є отримання даних з датчика за допомогою вбудованого комунікаційного протоколу, який він підтримує (UART у нашому випадку) і передача його до екземпляра AIRA за допомогою MQTT / TCP.\n\n![Sending](../images/freertos-mqtt/send.svg)\n\nУ нашому прикладі ми використовуємо хмарне розгортання AIRA, доступне за публічною IP-адресою та призначеною доменною назвою.\nНа екземплярі AIRA ми налаштовуємо брокер MQTT `mosquitto` та підписуємося на тему `/freertos_mqtt_robonomics_example/98:F4:AB:72:23:C4`, щоб отримувати повідомлення з MQTT.\n\nПотім ми передаємо повідомлення до письменника `robonomics io` через канал.\n\n![Receiving](../images/freertos-mqtt/recv.svg)\n\nТепер дані доступні в мережі Robonomics, і ми можемо знову прочитати їх за допомогою `robonomics io`.\n\n## Прошивка\n\nМи використовуємо зразок застосунку [ESP-MQTT sample application with TCP transport](https://github.com/espressif/esp-idf/tree/master/examples/protocols/mqtt/tcp) як основу.\n\nМи лише змінюємо `main/app_main.c` для підключення до датчика через UART, синхронізації часу SNTP та періодичного видавця MQTT.\n\nЯкщо ви намагаєтеся повторити проект і це ваш перший проект на основі ESP IDF, спочатку ознайомтеся з посібником з програмування [Espressif's ESP-IDF](https://docs.espressif.com/projects/esp-idf/en/latest/esp32/get-started/index.html#installation-step-by-step), щоб ознайомитися з операціями прошивки, такими як налаштування, збірка та завантаження за допомогою інструменту `idf.py`.\n\n### Налаштування Wi-Fi\n\nДля зв'язку з екземпляром AIRA, розгорнутим у хмарі, нашому мікроконтролеру потрібне підключення до Інтернету.\nМи використовуємо Wi-Fi ESP32 для цього.\nEspressif надає утиліти для налаштування вбудованого Wi-Fi.\nУ нашому прикладі ми використовуємо середовище розробки з Ubuntu 20.04 GNU / Linux.\nЩоб налаштувати Wi-Fi, ми переходимо до папки прокту та запускаємо інструмент налаштування SDK.\n\n```console\ncd freertos_mqtt_robonomics_example/firmware\nidf.py menuconfig\n```\n\nПотім ми встановлюємо SSID точки доступу Wi-Fi та пароль в розділі `Example Підключитисяion Конфігурація`.\n\n![Menuconfig Wi-Fi](../images/freertos-mqtt/menuconfig-wi-fi.png)\n\n### Налаштування кінцевої точки MQTT\n\nЄ дві речі, які потрібно налаштувати для MQTT.\nПерше - це адреса брокера MQTT.\nЦе налаштовується за допомогою інструменту налаштування SDK.\n\n```console\ncd freertos_mqtt_robonomics_example/firmware\nidf.py menuconfig\n```\n\nВстановіть `URL брокера` в розділі `Example Налаштування`.\n\n![Menuconfig MQTT](../images/freertos-mqtt/menuconfig-mqtt.png)\n\nДруга річ - це тема MQTT.\nМи встановлюємо її в прошивці з префіксом назви проекту, за яким слідує MAC-адреса нашого ESP32.\nЦе дає нам `/freertos_mqtt_robonomics_example/98:F4:AB:72:23:C4` для нашого конкретного мікросхеми.\n\n## Від MQTT до Robonomics\n\nСпочатку перевіримо, чи отримуємо дані за допомогою MQTT.\nМи можемо підписатися на тему брокера MQTT Mosquitto, на яку пристрій публікує.\n\n```console\n$ nix-shell -p mosquitto --run \"mosquitto_sub -h localhost -t '/freertos_mqtt_robonomics_example/98:F4:AB:72:23:C4'\"\nts=1615651809, PM1=2, PM2.5=6, PM10=3\n```\n\nТут ми додаємо пакет `mosquitto` до нашого середовища, щоб використовувати утиліту `mosquitto_sub`.\nПотім ми підписуємося на тему, встановлену в прошивці.\nМи отримали наші вимірювання, що значає, що AIRA правильно отримує дані через MQTT.\nТепер давайте направимо ці повідомлення до мережі Robonomics.\n\n```console\nnix-shell -p mosquitto --run \"mosquitto_sub -h localhost -t '/freertos_mqtt_robonomics_example/98:F4:AB:72:23:C4'\" | robonomics io write pubsub --bootnodes=/ip4/127.0.0.1/tcp/34333 /freertos_mqtt_robonomics_example\n```\n\nТут ми використовуємо утиліту `robonomics` для публікації повідомлень у каналі pubsub `/freertos_mqtt_robonomics_example`.\nМи вказуємо `bootnodes`, щоб забезпечити, що буде встановлено принаймні одне з'єднання.\n\nТепер ми читаємо ці повідомлення з того ж каналу pubsub.\n\n```console\n$ robonomics io read pubsub --listen /ip4/127.0.0.1/tcp/34333 /freertos_mqtt_robonomics_example\n2021-03-27 15:15:51  Generated random peer id: 12D3KooWB2nym5E6c3aPpnPKK5wB9Z6n9eZzcXSpyUBozxhi6dam\n2021-03-27 15:15:51  Subscribed to topic: _robonomics_pubsub_peer_discovery\n2021-03-27 15:15:51  Subscribed to topic: /freertos_mqtt_robonomics_example\n2021-03-27 15:15:56  New peer connected: PeerId(\"12D3KooWRPLCioD2b9XLZTZJQELSAuQAyTrHUKzRktrQHtTSs6kS\")\n2021-03-27 15:15:56  GRAFT: Mesh link added for peer: PeerId(\"12D3KooWRPLCioD2b9XLZTZJQELSAuQAyTrHUKzRktrQHtTSs6kS\") in topic: TopicHash { hash: \"_robonomics_pubsub_peer_discovery\" }\nts=1616843855, PM1=3, PM2.5=4, PM10=3\n```\n\n## Використані початкові ресурси\n\n* ESP32 DevKitC pinout з блогу GoJimmy https://gojimmypi.blogspot.com/2017/03/jtag-debugging-for-esp32.html\n* Структура даних та декодер PSM3003 з проекту OpenAirProject https://github.com/openairproject/sensor-esp32\n\n**Дякуємо всім!**\n","tools":[],"fileInfo":{"path":"uk/freertos-mqtt.md","name":"freertos-mqtt"}}},"context":{}}