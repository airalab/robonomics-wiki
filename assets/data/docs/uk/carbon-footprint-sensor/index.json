{"hash":"8c97e94672e2f65db3959c4ea30cc2599941a27c","data":{"doc":{"id":"39eab252efbbc718b2cb5b8505fab728","title":"Підключити датчик","description":"","contributors":["LoSk-p","makyul"],"headings":[],"subtitles":[{"depth":2,"value":"Вимоги","anchor":"#вимоги"},{"depth":2,"value":"Zigbee-приймач","anchor":"#zigbee-приймач"},{"depth":2,"value":"Установка","anchor":"#установка"},{"depth":2,"value":"Конфігурація","anchor":"#конфігурація"},{"depth":2,"value":"Підключіть розетку","anchor":"#підключіть-розетку"},{"depth":2,"value":"Після парування","anchor":"#після-парування"},{"depth":2,"value":"Запуск","anchor":"#запуск"}],"content":"\nПриклад роботи є у відео:\n\nhttps://youtu.be/jsaFCVAx2sA\n\n## Вимоги\n\n* [Aqara Smart Plug](https://aqara.ru/product/aqara-smart-plug/?yclid=462434430312045270)\n* Raspberry Pi\n* Zigbee adapter [JetHome USB JetStick Z2](https://jhome.ru/catalog/parts/PCBA/293/) (або один з [підтримуваних](https://www.zigbee2mqtt.io/вformation/підтримуваних_adapters.html))\n\nService is runnвg on Raspberry Pi і contact the smart plug via zigbee protocol.\n\n## Zigbee-приймач\n\nЯкщо у вас є JetHome USB JetStick Z2, він вже має необхідне прошивання, тому вам не потрібно його перепрошивати. Але якщо у вас є інший адаптер, спочатку вам потрібно перепрошитати його за допомогою програмного забезпечення zigbee2MQTT. Інструкції для вашого пристрою ви можете знайти [тут](https://www.zigbee2mqtt.io/вformation/підтримуваних_adapters.html).\n\nПідключіть адаптер та перевірте адресу адаптера (вона також може бути `/dev/ttyUSB1`):\n```bash\n$ ls -l /dev/ttyUSB0\ncrw-rw---- 1 root dialout 166, 0 May 16 19:15 /dev/ttyUSB0 \n```\n\nМожливо, спочатку потрібно отримати доступ до порту USB. Додайте свого користувача до `dialout` групою (це працює для Ubuntu, але назва групи може бути іншою в інших ОС).\nДля Ubuntu:\n```bash\nsudo usermod -a -G dialout $USER\n```\nДля Arch:\n```bash\nsudo usermod -a -G uucp $USER\n```\nПотім вийдіть з системи та увійдіть знову або перезавантажте комп'ютер.\n\n## Установка\n\nКлонуйте репозиторій:\n\n```\ngit clone https://github.com/makyul/robonomics-carbon-footprint.git\ncd robonomics-carbon-footprint\n```\n\n## Конфігурація\n\nПерейдіть до `data/configuration.yaml` та встановіть `permit_join: true`:\n\n```\n# Home Assistant integration (MQTT discovery)\nhomeassistant: false\n\n# allow new devices to join\npermit_join: true\n\n# MQTT settings\nmqtt:\n  # MQTT base topic for zigbee2mqtt MQTT messages\n  base_topic: zigbee2mqtt\n  # MQTT server URL\n  server: 'mqtt://172.17.0.1'\n  # MQTT server authentication, uncomment if required:\n  # user: my_user\n  # password: my_password\n\n# Serial settings\nserial:\n  # Location of CC2531 USB sniffer\n  port: /dev/ttyUSB0\n```\nТакож ви можете заповнити поля `server` і `port` з відповідною інформацією. У полі `server` використовуйте IP-адресу `docker0` моста для встановлення з'єднання: \n\n```bash\n$ ip a                                                 127\n1: lo: <LOOPBACK,UP,LOWER_UP> mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000\n    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00\n\n...\n\n5: docker0: <NO-CARRIER,BROADCAST,MULTICAST,UP> mtu 1500 qdisc noqueue state DOWN group default \n    link/ether 02:42:0d:ff:5f:a3 brd ff:ff:ff:ff:ff:ff\n    inet 172.17.0.1/16 brd 172.17.255.255 scope global docker0\n       valid_lft forever preferred_lft forever\n    inet6 fe80::42:dff:feff:5fa3/64 scope link \n       valid_lft forever preferred_lft forever\n```\nТут ваша адреса - `172.17.0.1`.\n\nПотім створіть файл config/config.yaml з наступною інформацією та встановіть своє місцезнаходження (ви можете переглянути його на https://countrycode.org/ за 3-літерним ISO-кодом):\n\n```\nlocation: RUS\nservice_address: 4GdHeLbmio2noKCQM5mfxswXfPoW2PcbpYKKkM4NQiqSqJMd\ntwin_id: 5\nsending_timeout: 3600\nbroker_address: \"172.17.0.1\"\nbroker_port: 1883\n```\n\n## Підключіть розетку\n\nПерший запуск:\n\n```\ndocker-compose up     \n```\n\nЩоб переключитися в режим сполучення на розетці довго а потім у спливаючому вікні дозвольте розширенню це зробити кнопку живлення протягом кількох секунд, доки індикатор не почне швидко блимати синім.\n\nУ журналах ви повинні побачити, що ваш плагін почав публікувати в mqtt.\n\n## Після парування\n\nЯкщо ви не хочете дозволяти іншим пристроям паруватися з вашим приймачем, зараз вам слід перейти до `data/configuration.yaml` та встановіть `permit_join: false`. Restart service (use 'Ctrl+C' і \n\n```bash\ndocker-compose up     \n```\nще раз, щоб зберегти зміни).\n\n## Запуск\nПри першому запуску буде створено обліковий запис для розетки. \n> If you already have an account you should add its seed to `config.config.yaml` file in `device_seed` section:\n>\n> ```\n> location: RUS\n> service_address: 4GdHeLbmio2noKCQM5mfxswXfPoW2PcbpYKKkM4NQiqSqJMd\n> twin_id: 5\n> sending_timeout: 3600\n> broker_address: \"172.17.0.1\"\n> broker_port: 1883\n> device_seed: <device_seed>\n>```\n\nПісля створення облікового запису ви побачите адресу в журналах (seed буде додано до `config/config.yaml`):\n```\nplug               | Generated account with address: 4GuP82BMAgrbtU8GhnKhgzP827sJEaBXeMX38pZZKPSpcWeT\n```\nВам потрібно перекласти деякі токени на цей обліковий запис для комісій за транзакції, ви можете зробити це на [Robonomics Portal](https://polkadot.js.org/apps/?rpc=wss%3A%2F%2Fkusama.rpc.robonomics.network%2F#/accounts). \n\nСервіс побачить, що у вас достатньо токенів, в журналах ви побачите:\n```\nplug               | Balance is OK\n```\nСервіс буде бачити mqtt-повідомлення від розетки та забезпечувати безпечне використання електроенергії. Кожну годину (ви можете змінити таймаут у розділі `config/config.yaml` in `sending_timeout` секундах) він створюватиме журнал даних з наступною інформацією:\n```\n{'geo': 'RUS', 'power_usage': 1.021237391233444, 'timestamp': 1644494860.5860083}\n```\n","tools":[],"fileInfo":{"path":"uk/carbon-footprint-sensor.md","name":"carbon-footprint-sensor"}}},"context":{}}