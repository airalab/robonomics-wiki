{"hash":"3e715b53a4afe6ab29b826b0f0623ed20a18a3a7","data":{"doc":{"id":"38badab8432945ba5c7357a828226cfb","title":"Встановлення та встановлення програмного забезпечення Gaka-Chu","description":"","contributors":["PaTara43"],"headings":[],"subtitles":[{"depth":2,"value":"Встановлення програмного забезпечення на KRC4","anchor":"#встановлення-програмного-забезпечення-на-krc4"},{"depth":2,"value":"Встановлення програмного забезпечення на NUC","anchor":"#встановлення-програмного-забезпечення-на-nuc"},{"depth":2,"value":"Заповнення констант","anchor":"#заповнення-констант"},{"depth":2,"value":"Калібрування Gaka-Chu","anchor":"#калібрування-gaka-chu"},{"depth":2,"value":"Тестування калібрування Gaka-Chu","anchor":"#тестування-калібрування-gaka-chu"},{"depth":2,"value":"Створення мистецтва","anchor":"#створення-мистецтва"},{"depth":3,"value":"Інтерфейс Eki","anchor":"#інтерфейс-eki"},{"depth":3,"value":"RViz та MOVEit","anchor":"#rviz-та-moveit"},{"depth":3,"value":"Середовище","anchor":"#середовище"},{"depth":3,"value":"Обробник зображень","anchor":"#обробник-зображень"},{"depth":3,"value":"Траєкторії малюнка","anchor":"#траєкторії-малюнка"},{"depth":2,"value":"Надішліть роботу зображення для малювання","anchor":"#надішліть-роботу-зображення-для-малювання"}],"content":"\nhttps://www.youtube.com/watch?v=GxlYxaykqTU\n\n**У цій статті ми розглянемо кілька кроків встановлення та запуску для налаштування робота-художника. Вимоги:**\n- KUKA KR6 R900 sixx з KRC4 та SmartPad;\n- Intel NUC з встановленою [ROS melodic](http://wiki.ros.org/melodic/Встановитиation/Ubuntu);\n- Стіл, фарба, пензель, вода.\n\n## Встановлення програмного забезпечення на KRC4\nДля цього потрібний інтерфейс EKI як на KRC4, так і на NUC. Детальна інформація про те, як його налаштувати на KRC4, наведена [тут](https://github.com/AlexeiOvcharov/kuka_experimental/tree/a915bf4e932990379c84164713e7ae11a24a2a13/kuka_eki_hw_interface/krl). Запустіть його на контролері робота.\n\n## Встановлення програмного забезпечення на NUC\nСтворіть робочий простір catkin:\n```\nmkdir -p ~/catkin_ws/src\ncd ~/catkin_ws/\ncatkin build\n```\nЗавантажте пакети ROS. Усі скрипти зберігаються [тут](https://github.com/airalab/robot_painter/tree/test_branch). Клонуйте репозиторій:\n```\ncd src\ngit clone --branch test_branch https://github.com/airalab/robot_painter\ncd robot_painter\nrm -rf scenes\nmv * ../\ncd ..\nrmdir robot_painter\n```\nМожливо, вам знадобляться деякі заголовкові файли та бібліотеки, щоб все працювало правильно. Завантажте їх:\n```\ncd ~\ngit clone https://github.com/PaTara43/kuka_moveit_webots\ncd kuka_moveit_webots\nsudo mv -r headers/* usr/include/c++/7/\nsudo mv libs/* usr/local/lib/\ncd ~\nsvn checkout https://github.com/PX4/Matrix/trunk/matrix\nmv matrix -r /usr/include/c++/7/\nsudo apt-get install ros-melodic-brics-actuator\ncd ~/catkin_ws\ncatkin build\n```\nДодайте команду джерела до файлу `.bashrc`:\n```\necho “source ~/catkin_ws/devel/setup.bash” >> ~/.bashrc\nsource ~/.bashrc\n```\nНаразі ви повинні мати могу запускати скрипти. Якщо щось піде не так, спробуйте вирішити деякі [проблеми](https://github.com/airalab/robot_painter/issues)\n\n## Заповнення констант\nПо-перше, роботу потрібно знати місцезнаходження та орієнтацію полотна, а також позицію бляшанки з фарбою. Все це вказано в `fake_painter_enviroment_tf/src/tf_broadcaster.cpp`. Давайте подивимося на це.\n```\n// Plane constants\nconst double A = -0.0641;\nconst double B = 0.0214;\nconst double C = 0.9977;\nconst double D = -0.2198;\n\n// Canvas transform\nconst double px = 0.52;\nconst double py = -0.24;\nconst double qx = -0.011;\nconst double qy = -0.032;\nconst double qz = 0.0;\nconst double qw = 0.999;\n```\nЦе константи рівняння площини, які вказують положення полотна в 3D-просторі. Вони мають бути отримані під час процесу калібрування, описаного нижче. Далі йде фарба.\n```\ncolorTransform.transform.translation.x = 0.5;\ncolorTransform.transform.translation.y = 0.2;\ncolorTransform.transform.translation.z = 0.258;\n```\nЦе координати бляшанки з фарбою. Вони також можуть бути вказані під час калібрування. Розмір полотна вказується в\n```\ncanvas.width = 0.5;\ncanvas.height = 0.4;\n```\nКілька важливих констант зберігаються в `local_task_planner/src/Drawing.cpp`:\n```\nconst double COLOR_BOTLE_HEIGHT = 0.06;\nconst double COLOR_HEIGHT = 0.045;\nconst double HEIGHT_OFFSET = COLOR_BOTLE_HEIGHT - COLOR_HEIGHT + 0.02;\nconst double BRUSH_HEIGHT = 0.01;\nconst double BRUSH_WIDTH = 0.01;\n```\nЇх назви говорять самі за себе, тому заповніть їх відповідно до ситуації.\n\n## Калібрування Gaka-Chu\nСам процес калібрування досить простий.\n\n1) Запустіть інтерфейс EKI на KRC4:\n\nУвійдіть в режим 'AUT', увімкніть драйвери та запустіть скрипт `eki_hw_interface`\n\n2) Запустіть інтерфейс EKI на NUC\n```\nroslaunch kuka_eki_hw_interface test_hardware_interface.launch\n```\nВін повинен виводити безкінечні журнали.\n\n3) Запустіть RViz\n```\nroslaunch kuka_moveit_config demo.launch\n```\nВи повинні побачити наступне:\n\n![KUKA in RViz](../images/kuka-real/kuka_rviz.png \"KUKA in RViz\")\n\nСпробуйте перемістити кінцевий ефектор та натиснути 'Plan and Execute'. Робот повинен рухатися. На SmartPad перейдіть до **Display -> Actual position** та спостерігайте координати кінцевого ефектора. Покладіть полотно горизонтально до основи робота. Увімкніть пензель у тримач пензля та обережно перемістіть його, поки він ледь торкається полотна. У цьому положенні збережіть координати кінцевого ефектора. Повторіть це 12-15 разів. Також збережіть координати центру полотна та бляшанки з фрбою.\nКоли у вас є набір координат, використовуйте [ці](https://github.com/nakata5321/Matlab_scripts_gaka-chu) скрипти Matlab, щоб вирішити відсутні константи та кватерніон. Вставте їх. Перебудуйте свій робочий простір з\n```\ncd ~/catkin_workspace\nrm -rf build logs devel\ncatkin build\n```\n\n## Тестування калібрування Gaka-Chu\nПісля калібрування Gaka-Chu потрібно протестувати, намалювавши межі полотна. Щоб це зробити, виконайте кожен з них в новому терміналі:\n```\nroslaunch kuka_eki_hw_interface test_hardware_interface.launch\nroslaunch kuka_moveit_config demo.launch\nrosrun fake_painter_enviroment_tf tf_broadcaster\nrosrun local_task_planner draw_workspace\n```\nПісля цього ви повинні побачити контур полотна в RViz:\n\n![KUKA in RViz canvas](../images/kuka-real/kuka_rviz_canvas.png \"KUKA in RViz canvas\")\n\nУ терміналі натисніть \"S\", щоб виконати тестування. Кінцевий ефектор робота повинен рухатися праворуч над межами полотна, а пензель повинен м'яко торкатися полотна протягом усього руху. Якщо цього не відбувається, спробуйте повторно калібрувати. Якщо модель полотна обертається неправильно, ви можете обернути її, змінивши кватрніон в Matlab.\n\n## Створення мистецтва\nДля того, щоб все працювало, вам потрібно 6 основних модулів:\n- Інтерфейс EKI;\n- MOVEit + RViz;\n- Трансляція середовища кадрів;\n- Сервіс конвертації зображень;\n- Модуль малювання траєкторій;\n- Початковий тригер.\n\nДавайте запустимо їх по одному.\n\n### Інтерфейс Eki\nНа KRC4 запустіть `eki_hw_interface`, на NUC у новому терміналі виконайте:\n```\nroslaunch kuka_eki_hw_interface test_hardware_interface.launch\n```\n\n### RViz та MOVEit\nВам потрібен планувальник та симуляція. Запустіть їх з\n```\nroslaunch kuka_moveit_config demo.launch\n```\n\n### Середовище\nСкажіть роботу, де знаходяться бляшанка з фарбою та полотно. Зверніть увагу, що не обов'язково запускати вузол `draw workspace`, `tf_broadcaster` ділиться розміром полотна. Він просто не показує його в RViz.\n```\nrosrun fake_painter_enviroment_tf tf_broadcaster\n```\n\n### Обробник зображень\nВсі вхідні зображення потрібно обробляти. Запустіть сервіс.\n```\nrosrun picture_preprocessing TextConverter.py\n```\nКоли він отримує виклик, він обробляє зображення з фільтром HP і створює файл rosbag з траєкторіями.\n\n### Траєкторії малюнка\nОсновний скрипт тут - сам малюнок траєкторій. Він чекає на зобаження, викликає сервіс TextConverter та малює картину.\n```\nrosrun local_task_planner trajectory_drawing\n```\n\n## Надішліть роботу зображення для малювання\nРобот слухає конкретну ROS-тему, де вам потрібно передати шлях до бажаного зображення. Зображення повинно бути квадратним (ширина дорівнює висоті) і складатися з ліній. Надішліть шлях:\n```\nrostopic pub /run std_msgs/String \"data: '<path_to_picture>'\"\n```\nПісля цього з'являються два вікна, на яких показані контури та треки. Закрийте їх і подивіться, як Гака-Чу малює. Будьте обережні і завжди будьте готові натиснути кнопку аварійної зупинки.\nКоли Гака-Чу закінчує своє мистецтво, ви можете надіслати інший шлях до зображення, і художник повторює весь процес.\n","tools":[],"fileInfo":{"path":"uk/gaka-chu.md","name":"gaka-chu"}}},"context":{}}