{"hash":"448caa13a6c2c9753fa72bcda71d6dba7a5bd610","data":{"doc":{"id":"b7d9e0b430c2bbc8dd8da0a66dea2e65","title":"Substrate Cumulus Parachain Testsuite для міжланцюжкового обміну повідомленнями","description":"","contributors":["ddulesov","boogerwooger","tubleronchik"],"headings":[],"subtitles":[{"depth":2,"value":"Вгору","anchor":"#вгору"},{"depth":2,"value":"Побудова та запуск","anchor":"#побудова-та-запуск"},{"depth":2,"value":"Перевірка роботи початкової настройки","anchor":"#перевірка-роботи-початкової-настройки"},{"depth":3,"value":"Приклад:","anchor":"#приклад"},{"depth":3,"value":"Тест передачі повідомлень UMP","anchor":"#тест-передачі-повідомлень-ump"},{"depth":3,"value":"Тест передачі повідомлень HRMP","anchor":"#тест-передачі-повідомлень-hrmp"},{"depth":3,"value":"Додаткові параметри","anchor":"#додаткові-параметри"},{"depth":2,"value":"Локальна тестова мережа","anchor":"#локальна-тестова-мережа"},{"depth":3,"value":"Створити настроюваний специфікацію ланцюжка","anchor":"#створити-настроюваний-специфікацію-ланцюжка"},{"depth":2,"value":"Взламати паралелізм","anchor":"#взламати-паралелізм"},{"depth":2,"value":"Learn More","anchor":"#learn-more"}],"content":"\n\nОсновною метою цього проекту є спрощення розробки часу виконання парачейну, коли використовуються міжланцюжкові овідомлення. \nВін дозволяє розробляти код часу виконання з інтеграційними тестами з високим ступенем повторюваності та простим використанням.\nВін автоматизує побудову, створення попередньо налаштованої конфігурації мережі (тобто 1 реле-ланцюг + 2 парачейни), налаштування каналів передачі повідомлень між парачейнами та запуск тестів повідомлень, відправку повідомлень, використання виклику до часу виконання, все побудовано і складено на Python.\n\nXCM Testsuite використовується для тестування виробничого циклу Robobank - набору палет Substrate, які дозволяють роботам реєструватися на зовнішніх парачейнах, отримувати передоплачені замовлення, виконувати їх та отримувати платежі з використанням зовнішніх токенів. Це дозволяє роботам працювати в мережі Robonomics з усією необхідною інфраструктурою, але в той же час пропонувати свої послуги на будь-якому іншому парачейні.\n\nПриклад відео доступний на [YouTube](https://www.youtube.com/watch?v=S_bZgsxngiM)\n\nОсновні кроки в демо-сценарії:\n- запуск реле-ланцюга та двох парачейнів у пакеті з 6 процесами\n- налаштування каналів передачі повідомлень XCM між парачейнами\n- реєстрація робота в обох парачейнах\n- створення замовлення для цього робота в клієнтському парачейні (резервування платежу за виконання замовлення)\n- відправка повідомлення XCM на парачейн Robonomics\n- створення \"дзеркального\" запису замовлення на парачейні Robonomics\n- робот приймає замовлення на парачейні Robonomics\n- відправка повідомлення XCM про прийняття замовлення назад на клієнтський парачейн\n- прийняття замовлення на клієнтському парачейні (резервування штрафу за невиконання замовлення до кінцевого терміну)\n- робот виконує замовлення на парачейні Robonomics\n- відправка повідомлення XCM про завершення замовлення на клієнтський парачейн\n- розрахунок всіх платежів (платіж клієнта передається роботу, а також не використаний штраф за невикористання замовлення)\n- закриття замовлення1\n\n\n## Вгору\nЦей проект є форком\n[Substrate Developer Hub Node Template](https://github.com/substrate-developer-hub/substrate-node-template).\nВін містить код палеток часу виконання, які тестуються.\nЯк і в оригінальному вузловому коді парачейнів знаходяться в каталогах \"./pallets\", \"./runtime\", \"./node\".\n\nВідмінності від оригінального \"substrate-node-template\":\n- цей час виконання колатора має модуль обробника HRMP і може обробляти повідомлення від парачейнів-сусідів\n- мок-тестовий час виконання готовий для внутрішніх тестів XCM\n\n## Побудова та запуск\nРекомендована (висока) настройка: \n```\nUbuntu 20, 16 Gb RAM, 8 CPU, 120 Gb SSD\n```\n[ПРИМІТКА] Перша збірка може зайняти багато часу, до кількох годин на нептимальних машинах.\n\n[ПРИМІТКА] Скрипт працює з ФІКСОВАНИМИ версіями (хешами комітів) Polkadot(Rococo) в реле-ланцюзі та парачейнах.\n\n[ПРИМІТКА] За замовчуванням скрипт перестворює те саме середовище кожного запуску, видаляючи всі попередні стани. Цю поведінку можна змінити в \"config.sh\", використовуючи параметр \"PERSISTENT\".\n\n\nЗапустіть скрипт побудови та налаштування.  \n```bash\ngit clone https://github.com/airalab/xcm-robobank-prototype.git\ncd xcm-robobank-prototype\n./scripts/init.sh\n```\n\nОсновні дії скрипта \"init.sh\":\n - читання конфігурації (файл \"config.sh\" з номером ревізії, початковими ключами та ідентифікаторами вузлів, параметром збереження даних ланцюга тощо)\n - налаштування пакетів ОС, Rust та Python\n - побудова окремих бінарних файлів для реле-ланцюга та для обох парачейнів\n    - бінарні файли будуть згенеровані в підкаталозі ./bin. \n - (необов'язково) видалення всіх попередніх даних ланцюга для всіх ланцюгів\n    - вимикається, якщо \"PERSISTENT=1\" встановлено в \"config.sh\"\n - працює як окремі процеси (з окремими PID та каналами введення/виведення):\n    - валідатори реле-ланцюга (тобто 4 валідатори, які працюють на стабільній ревізії Rococo)\n    - колатори для парачейна-100 (тобто один колатор для першого парачейна, який ви розробляєте)\n    - колатори для парачейна-200 (тобто один колатор для другого парачейна, який ви розробляєте)\n - друкує всі кінцеві точки, порти на консоль, що дозволяє вивчати будь-який ланцюг за допомогою фронтенд-додатків (експлорер, DApp)\n - продовжує друкувати всі вихідні дані всіх ланцюгів на консоль\n\n[ПОПЕРЕДЖЕННЯ] Після запуску зачекайте, поки мережа запуститься, переконайтеся, що фіналізація блоку розпочалася, і що парачейни зареєстровані. Ці процеси повинні зайняти приблизно 5 хв (50 блоків x 6 сек).\n\n## Перевірка роботи початкової настройки \n\nВикористовуйте стандартний фронтенд Polkdot та згенеровані кінцеві точки \"--ws-port\" для підключення до кожного вузла.\nВідкрийте [додаток Polkadot](https://polkadot.js.org/apps/?rpc=ws://localhost:9500/) для моніторингу ланцюгів. \n\n### Приклад:\nLocalhost, 4 валідатори реле-ланцюга, один колатор парачейна-100, один колатор парачейна-200:\n- [Relay validator 1](https://polkadot.js.org/apps/?rpc=ws://localhost:9500/)\n- [Relay validator 2](https://polkadot.js.org/apps/?rpc=ws://localhost:9501/)\n- [Relay validator 3](https://polkadot.js.org/apps/?rpc=ws://localhost:9502/)\n- [Relay validator 4](https://polkadot.js.org/apps/?rpc=ws://localhost:9503/)\n- [Parachain-100 collator](https://polkadot.js.org/apps/?rpc=ws://localhost:10054/)\n- [Parachain-200 collator](https://polkadot.js.org/apps/?rpc=ws://localhost:10055/)\n\n\nЯкщо все працює, і консенсус розпочато, ми можемо перейти до запуску наших тестових випадків (у новому терміналі).\n\n### Тест передачі повідомлень UMP\n```bash\n./scripts/init.sh ump\n```\nВін створює повідомлення `Balance.transfer` в `parachain-100` і передає його на реле-ланцюг.\nКоли реле-ланцюг отримує повідомлення, він переказує 15 токенів з рахунку `para 100` на рахунок Чарлі.\n\n\n### Тест передачі повідомлень HRMP\n```bash\n./scripts/init.sh ump\n```\n\nВін створює повідомлення `Balance.transfer` в `parachain-100` і передає його на `sibling 200`.\nПеред цим він надає рахунку `subl 100` 1000 токенів і встановлює комунікаційний канал між паралелізмами.\n```bash\n./scripts/init.sh hrmp\n```\nНаступні повідомлення можна надсилати, запустивши підкоманду `hrmpm`. Вона не створює каналу, тому працює швидше.\n```bash\n./scripts/init.sh hrmpm\n```\n\n### Додаткові параметри\n```bash\n./scripts/init.sh help\n```\n\n## Локальна тестова мережа\n\n### Створити настроюваний специфікацію ланцюжка\n```\n./bin/polkadot build-spec --chain rococo-local --disable-default-bootnode > rococo_local.json\n```\n\nРедагуйте rococo_local.json, замініть параметри балансів та авторитетів на свої.\n```json\n  \"keys\": [\n    [\n      \"\",\n      \"\",\n      {\n        \"grandpa\": \"\",\n        \"babe\": \"\",\n        \"im_online\": \"\",\n        \"para_validator\": \"\",\n        \"para_assignment\": \"\",\n        \"authority_discovery\": \"\"\n      }\n    ]\n```\n\nАдреса Polkadot для //Alice//stash (криптографія sr25519).\n```bash\n$ polkadot key inspect-key --scheme sr25519 --network substrate //Alice//stash\n```\n\n```text\nSecret Key URI `//Alice//stash` is account:\nSecret seed:      \n\nPublic key (hex): \n\nAccount ID:       \n\nSS58 Address:     \n```\n\nКлюч сесії Polkadot grandpa для //Alice (криптографія ed25519).\n```bash\n$ polkadot key inspect-key --scheme ed25519 --network substrate //Alice\n```\n```text\nSecret Key URI `//Alice` is account:\nSecret seed:      \n\nPublic key (hex): \n\nAccount ID:       \n\nSS58 Address:     \n```\n\nАдреса Polkadot для //Alice (криптографія sr25519).\n```\n$ polkadot key inspect-key --scheme sr25519 --network substrate //Alice\n```\n```text\nSecret Key URI `//Alice` is account:\nSecret seed:      \n\nPublic key (hex): \n\nAccount ID:       \n\nSS58 Address:     \n```\n\nКонвертувати rococo_local.json у формат raw.\n```\n./bin/polkadot build-spec --chain rococo_local.json --raw --disable-default-bootnode > rococo_local.json\n```\nЩоб використовувати нову специфікацію ланцюжка, замініть файл rococo.json у каталозі ./config/ на цей новий і перезапустіть ланцюжок.\n```bash\n./scripts/init.sh run\n```\nВи можете вільно редагувати код. Вищезазначена команда перебудує проект та оновить вузловий вузол перед запуском.\nCumulus - це передвипускне програмне забезпечення, яке все ще перебуває в активній розробці.\nWe are using a specific commit of polkadot [46c826f595021475fa5dbcd0987ed53f104e6e15  18 mar 2021](https://github.com/paritytech/polkadot/tree/46c826f595021475fa5dbcd0987ed53f104e6e15)\n\nВи можете використовувати більш нові версії програмного забезпечення. Для цього змініть POLKADOT_COMMIT у ./scipt/config.sh\nна останній коміт гілки `rococo-v1`, видаліть ./bin/polkadot та запустіть \n```bash\n./scripts/init.sh run\n```\n\nОновлення залежностей проекту коллатора \n```bash\ncargo update\n./scripts/init.sh build\n```\nДеякі залежності, ймовірно, вимагають нових функцій інструментарію Rust. Цей проект базується на Rust `nightly-2021-01-26`\nОновіть версію інструментарію Rust у ./scripts/config.sh перед збіркою.\n\n## Взламати паралелізм\n[Додати зовнішню палету](https://substrate.dev/docs/en/tutorials/add-a-pallet/) - можливо, це повинно бути в розділі \"дізнатися більше\"?\n## Learn More\n\nЗверніться до вихідного [Шаблон вузла розробника Substrate Developer Hub](https://github.com/substrate-developer-hub/substrate-node-template), щоб дізнатися більше про структуру цього проекту, можливості, які він вкладає, та спосіб, яким ці можливості реалізовані. Ви можете дізнатися більше про [Шлях блоку паралелізму](https://polkadot.network/the-path-of-a-parachain-block/) на офіційному блозі Polkadot. [Паритетний семінар Cumulus](https://substrate.dev/cumulus-workshop/#/)","tools":[],"fileInfo":{"path":"uk/xcm-robobank.md","name":"xcm-robobank"}}},"context":{}}