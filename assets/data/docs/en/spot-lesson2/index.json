{"hash":"fd5d0a5f3aa1c3e6f4368684b3f72c24a1a4a9b2","data":{"doc":{"id":"7913917deb4dce48f681d8d385a7d7d1","title":"Lesson 2. Remote controlled and programmed motion","description":"","cover_image":{"type":"image","mimeType":"image/png","src":"/assets/static/spot-lesson2.0b85c65.c27486a0a79463da80d2e7f254c81adb.png","size":{"width":1920,"height":1080},"sizes":"(max-width: 1920px) 100vw, 1920px","srcset":["/assets/static/spot-lesson2.1b91758.c27486a0a79463da80d2e7f254c81adb.png 480w","/assets/static/spot-lesson2.3df3210.c27486a0a79463da80d2e7f254c81adb.png 1024w","/assets/static/spot-lesson2.0b85c65.c27486a0a79463da80d2e7f254c81adb.png 1920w"],"dataUri":"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 1920 1080' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-336c3abeb5a595561566141019d3ac8b'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='40'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-336c3abeb5a595561566141019d3ac8b)' width='1920' height='1080' xlink:href='data:image/png%3bbase64%2ciVBORw0KGgoAAAANSUhEUgAAAEAAAAAkCAYAAAA5DDySAAAACXBIWXMAAAsSAAALEgHS3X78AAAEPUlEQVRo3u1Ya1ObRRTmJzi16gcVKWptFcfbjJ/8D/3k6JeO1ZlaO6UtNpT7/RYuJb050/EynVqkpdBSKpca7lAoREhLKw2QkBoCTRMSkpAwAoXkcc9JwsSgsSNkjPU9M2d2333Pnn3fZ5%2bzu2djnt22A6Rb417DlhdfQXzCe3C53SDxeDzYLPF6vYhGiXlG/DjptjfeXQcAyfTMA%2bj092EwTmNsQgvj9AzuG6ZgtsxCN6nHzAMTTGYzJv02BqMRtrm5tT703uFwRi0IMU/Hvso/v%2buj3Yjd8RbiXn/nDwBcqL2MpNRMfHuuCp98fgBfff0dcopKUVB6DPLKk8gulCMjrwhpuYU4f%2bESTp35BvU/NmPfIRny5RUoP34aN1VD7Gt1dTX6ANj60nbE7nwbCe9/gOe3JyBOgBEMwLzLhYdmC884zabZYoFl1gqH04kZkwl2h8P/3oJZq028m4XbvQCbbQ5WfrbC5XJHLwM4/gUIWwQTnnrhZcS/%2bT9cAwiE5%2bJ3rlsD6KNJPZ5A6VlrC372%2bNUbRqOaAQH9MwCedJEAkACQAJAAkACQAAgDQOje/1dKx9xAGaiHarAvqofarXsf8hw8TqCNzigbmaywAGzmSTCSshGmhgWAZEKrw9LSElZWVrC0vMz1R6K%2bKMrfFhdZ5%2bx2NP3UihUxO/2DKnTf6Oc62VDOsLz8iO0oi3QvLLDf4dsj6OrtW/M5P%2b%2bC/lcDnM55HmtUMwa1sKH6ouirGZ9gXwM/D3Mf8jklsk3KTiPGAJKz56txtbEZB5PTOOs7mpmLI%2bnZyCoowYEjqSgqV%2bDuqIazQkqGKAPcsy8Rh46mQ5aeg0RZKpJFH8oWD6dk4NP9B1FVU4sfaurwvcgeswpLkJSSidScAuxPSuYx5MdO4OM9e3nMvYlfcn/KPgnkD3d/hpKK40gT9uSro6d3Q5nm3wIwqhnnmWrr7OZS2d6F9q4edHT3oqfvJrQ6PbSTejS2KGGYMkIzNgHVkBrXW9uhGlZjXDBocGgYvf0DuDVyF83KNraj9s6eG%2bgbUHF5b2ycmfPLPY2Y5SEoO7rYT4uwbxPjUZtWNwn1yB0MChaob99BQ1MLTA/NkWUAUYw%2bNpwE1orQNcNud3AaTSm11WZba6e0%2bj%2bzBtAFCFFaXnkCitNnUKrwXYKUVp5EmeIUUrLykFdSxhQlLRYhIcvIQW5xGdP%2bXHUNh8MXh2UorlAgJTsf6aKdQidfXs7%2b6E6BhNYN3%2b7g2yFW/TtFQH2rvm93CN5FIsoAWoiI5nSrQ/QlECgule2duHKtCWerqjkU6q5e49AgylZdrMXlhkZcrKtn2tYLuxYREhT311s7uB/VL11pYPoTQ/6tc8c/2gZpxY6mrSzCByH/hYefdsFx/zjqDeobziYqGfA4J8DN0qgFQEqGJAAkACQAJAAkACQAJAAkACQAJACeSPkd9xFHtb7fZgYAAAAASUVORK5CYII=' /%3e%3c/svg%3e"},"contributors":["LoSk-p","khssnv"],"translated":true,"headings":[],"subtitles":[{"depth":2,"value":"The challenge","anchor":"#the-challenge"},{"depth":2,"value":"Theory","anchor":"#theory"},{"depth":2,"value":"Practice","anchor":"#practice"}],"content":"\nIn the second lesson you will learn how to use Spot Command services and walk with Spot.\n\n## The challenge\n\nYou have a list of points with their local coordinates in the `/home/student/lessons` directory. Spot should go through these points. The origin of the local coordinates is in the place where Spot was turned on. On each point Spot should make one of the motions from the following list, then go to the next point. \n\nThe list of moves:\n* To turn around himself\n* To lie down in pose to change battery\n* To nod\n* To change the stance of robot's legs\n* To go sideways to the next point\n\nCreate and execute a Python script that implements behavior described.\n\n> You can find Spot local coordinates with:\n> ```python\n> get_vision_tform_body(robot_state_client.get_robot_state().kinematic_state.transforms_snapshot)\n> ```\n\n## Theory\n\nYou can control Spot with `Robot Command Service`. Firstly you need to build a command to supply it to the command service.\nSpot SDK has a `RobotCommandBuilder` class for it.\nFull list of methods and its descriprions you can find [here](https://github.com/boston-dynamics/spot-sdk/blob/7ce5c5f31f4e1e45e9ff4be29fb097e258b75919/python/bosdyn-client/src/bosdyn/client/robot_command.py#L593). \n\nIn this lesson you may need to use:\n\n* Stand Command\n\n```python\ndef stand_command(params=None, body_height=0.0, \n                footprint_R_body=geometry.EulerZXY())\n```\n\n* Go to point\n\n```python\ndef synchro_se2_trajectory_point_command(goal_x, goal_y, goal_heading,      \n                                    frame_name, params=None,\n                                    body_height=0.0,\n                                    locomotion_hint=spot_command_pb2.HINT_AUTO,\n                                    build_on_command=None)\n```\n\nCheck usage example [here](https://github.com/boston-dynamics/spot-sdk/blob/master/python/examples/frame_trajectory_command/frame_trajectory_command.py).\n\n* Velocity Command\n\n```python\ndef synchro_velocity_command(v_x, v_y, v_rot, params=None, body_height=0.0,\n                            locomotion_hint=spot_command_pb2.HINT_AUTO, \n                            frame_name=BODY_FRAME_NAME)\n```\n\n* Stance Command\n\n```python\ndef stance_command(se2_frame_name, pos_fl_rt_frame, pos_fr_rt_frame, \n                        pos_hl_rt_frame,\n                        pos_hr_rt_frame, accuracy=0.05, \n                        params=None, body_height=0.0,\n                        footprint_R_body=geometry.EulerZXY(), \n                        build_on_command=None)\n```\n\nThe example of use is [here](https://github.com/boston-dynamics/spot-sdk/blob/91ed30607264e795699995d6d7834ba0c8a94d36/python/examples/stance/stance_in_place.py)\n\n* Pose to change battery\n\n```python\ndef battery_change_pose_command(dir_hint=1)\n```\n\nExample of building and running velocity command:\n\n```python\nfrom bosdyn.client.robot_command import RobotCommandClient, RobotCommandBuilder\nimport time\n\ncommand_client = robot.ensure_client(RobotCommandClient.default_service_name)\ncmd = RobotCommandBuilder.velocity_command(0.5, 0, 0.5)\ncommand_client.robot_command(cmd, end_time_secs=time.time() + 2)\n```\n\n## Practice\n\n> Ensure you have Yggdrasil Network software running and configured as described in the [Lesson 0](/docs/spot-lesson0). Otherwise you will not have connection to the robot.\n> On macOS you may need to launch Yggdrasil Network in the terminal:\n> ```bash\n> sudo yggdrasil -useconffile /etc/yggdrasil.conf\n> ```\n\n1. Connect to Spot from a terminal or using your development environment remote execution function.\n\n```console\nssh student@strelka.ygg.merklebot.com\n```\n\n2. Develop and demonstrate your solution to the challenge.\n\nWe create [E-Stop endpoint](https://dev.bostondynamics.com/python/examples/estop/readme) for you, so you should not create it.\nFor Spot authentication use username and password from `/home/student/credentials` file.\nSpot address is `192.168.50.3`.\n"}},"context":{}}