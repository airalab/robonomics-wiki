{"hash":"fafc1a72b280365300824608799e28058e0a2c73","data":{"doc":{"id":"36b6f6a903dee1ebbb9751409ed0db96","title":"How Robonomics Network Works","description":"","cover_image":{"type":"image","mimeType":"image/png","src":"/assets/static/robonomics-how-it-works.0b85c65.dbcd77fc3482372ffbb2dc4daea664f9.png","size":{"width":1920,"height":1080},"sizes":"(max-width: 1920px) 100vw, 1920px","srcset":["/assets/static/robonomics-how-it-works.1b91758.dbcd77fc3482372ffbb2dc4daea664f9.png 480w","/assets/static/robonomics-how-it-works.3df3210.dbcd77fc3482372ffbb2dc4daea664f9.png 1024w","/assets/static/robonomics-how-it-works.0b85c65.dbcd77fc3482372ffbb2dc4daea664f9.png 1920w"],"dataUri":"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 1920 1080' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-0d6d9b337e89326a2182bdbf2aa9cbc0'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='40'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-0d6d9b337e89326a2182bdbf2aa9cbc0)' width='1920' height='1080' xlink:href='data:image/png%3bbase64%2ciVBORw0KGgoAAAANSUhEUgAAAEAAAAAkCAYAAAA5DDySAAAACXBIWXMAAAsSAAALEgHS3X78AAADe0lEQVRo3u2YWU9TQRTH%2bQgGUR9URFRExbglPvkdfPTJmPiAiUZAkLJDWaRYcWGJRkEUVBRUBAVR0RiNbIKIW4giBqHWtoAtLS209PbvnKHUilBcwFSZSU7uzD3LdH733Omc67NweTBI/AJWw3fpSgSGbIHRZAI1SZIwU83hcMAbm88CtnCS5es2/wCAWq/qEzq7PqC7pxcdb9%2bhp1eFD90fodHq0Pm%2bC6pPaqg1Grx32nT39KB/YMDlQ3q93uC1EHzm%2b6/ii9%2b%2bYyf8gzcgYO2m7wCUll9DREwCCs5fwK7Qfcg/XYjkjCykZWVDcTQHSekKxMszEJuSjpLSMuSeOoOKmzXYExaFVMURKI/noaG5hcey2%2b3eB8BvWRD812xEyNZtWBwUggAGwx3AoNGIzxotf%2bL0NDVaLbS6PugNBqjUanzR6516LXR9/Uyng8k0hP7%2bAfTxcR%2bMRpP3ZgB//xkEX5YJ85asQOD6ObgHEIRFgWt%2b2APoR5NI0vhVct1zH0tOcXgQr86AcZkMwP/eBAABQAAQAAQAAUAAmBrAVIeZifcmO%2bxM1E82ni7%2bVDYzdbj6qQwYP/VRMWOnq9sRme6RzqWfQsZsJZe9e1yXP4/xzWayRbvrJsb6HRgeAUgeAtLkw8PDfyVNp6tJpD/IAo8AqNXWPUDRhVLcqr2LRlbWPq5vwLvOLlyvquZlMZW6ZdcrUV5RiebWNjx60oC79x%2bivqkZ9Y3NqLlTh5s1tVzqm54y/0a86XiL4ktXcKrwHO49eIirN6pQWX0brc/buT/53bp9B4XFF/n3ByqzlSfycLbkElqePedzn794mf%2beF69euyDNeAZQu3KtApnZx3EwPgWHlMewe2%2bYs%2bavRoQsgUFQIFwWj8i4JBxMSGF2ycg6moModpUlyiHPVCIxLRMxSalQZJ9AbHIaX0h5RRVC90dyIZAUe1%2bkDHHyDIRHx%2bNITj4bx6Ct/SUHERYdh4TUQzgQm4jDx3IhY/FovpMFRWMZORsAKKBtdJT3qcY3m80YGRnhQq%2bA1Wrj3wtMzH5w0Ighpidf0pE99cmfXhWLxYIvegNMQywO69MTG2U6s9mCEauV60kopsEwCJvN5pqL7KzOMc1H4/E%2b%2bczaHvCv/A06ZmsPcExT43uLzPkMECdBAUAAEAAEAAFAABAABAABQAAQAASAX2xfAYkWgakMMX02AAAAAElFTkSuQmCC' /%3e%3c/svg%3e"},"contributors":["ensrationis","akru"],"translated":true,"headings":[],"subtitles":[],"content":"\nIn this section we will discuss the Robonomics Network scenario.\n\nThere are few main parts in the Robonomics network:\n\n- IPFS for the messages exchanging\n- the Ethereum blockchain for storing new liability contracts\n- a provider that is responsible for matching messages\n- an agent\n\nLet's have a look at the following diagram that describes the scenario without any additional details:\n\n![The main scenario of Robonomics Network](../images/robonomics_network_scenario.jpg \"The main scenario of Robonomics Network\")\n\nThere are three types of [messages](/docs/market-messages) in IPFS: Demand, Offer, Result.\n\n**Below there is the specification for a Demand message:**\n\n| Field         | Type                      | Description                                       | Example                                           |\n|-------------- |-------------------------  |------------------------------------------------   |------------------------------------------------   |\n| model         | [ipfs_common/Multihash](/docs/robonomics-liability-messages#ipfs_commonmultihashmsg)     | CPS behavioral model Identifier                   | QmfXHZ2YkNC5vRjp1oAaRoDHD8H3zZznfhBPasTu348eWC    |\n| objective     | [ipfs_common/Multihash](/docs/robonomics-liability-messages#ipfs_commonmultihashmsg)     | CPS behavioral model parameters in rosbag file    | QmUo3vvSXZPQaQWjb3cH3qQo1hc8vAUqNnqbdVABbSLb6r    |\n| token         | ethereum_common/Address   | Operational token address                         | 0xbD949595eE52346c225a19724084cE517B2cB735        |\n| cost          | ethereum_common/UInt256   | CPS behavioral model implementation cost          | 1                                                 |\n| lighthouse    | ethereum_common/Address   | Lighthouse address                                | 0xa1b60ED40E5A68184b3ce4f7bEf31521A57eD2dB1       |\n| validator     | ethereum_common/Address   | Observing network address                         | 0x0000000000000000000000000000000000000000        |\n| validatorFee  | ethereum_common/UInt256   | Observing network commission                      | 0                                                 |\n| deadline      | ethereum_common/UInt256   | Deadline block number                             | 6393332                                           |\n| sender        | ethereum_common/Address   | Message sender address                            | 0x0000000000000000000000000000000000000000        |\n| signature     | std_msgs/UInt8[]          | Sender’s digital signature                        | 0x23bc…c617                                       |\n\n<!--\n=============== ============================================================== ================================================ ================================================\n     Field                                   Type                                                Description                                        Example\n=============== ============================================================== ================================================ ================================================\n  model          :ref:`ipfs_common/Multihash <IPFS-Common-Multihash.msg>`       CPS behavioral model Identifier                  QmfXHZ2YkNC5vRjp1oAaRoDHD8H3zZznfhBPasTu348eWC\n  objective      :ref:`ipfs_common/Multihash <IPFS-Common-Multihash.msg>`       CPS behavioral model parameters in rosbag file   QmUo3vvSXZPQaQWjb3cH3qQo1hc8vAUqNnqbdVABbSLb6r\n  token          :ref:`ethereum_common/Address <Ethereum-common-Address.msg>`   Operational token address                        0xbD949595eE52346c225a19724084cE517B2cB735\n  cost           :ref:`ethereum_common/UInt256 <Ethereum-common-UInt256.msg>`   CPS behavioral model implementation cost         1\n  lighthouse     :ref:`ethereum_common/Address <Ethereum-common-Address.msg>`   Lighthouse address                               0xa1b60ED40E5A68184b3ce4f7bEf31521A57eD2dB1\n  validator      :ref:`ethereum_common/Address <Ethereum-common-Address.msg>`   Observing network address                        0x0000000000000000000000000000000000000000\n  validatorFee   :ref:`ethereum_common/UInt256 <Ethereum-common-UInt256.msg>`   Observing network commission                     0\n  deadline       :ref:`ethereum_common/UInt256 <Ethereum-common-UInt256.msg>`   Deadline block number                            6393332\n  sender         :ref:`ethereum_common/Address <Ethereum-common-Address.msg>`   Message sender address                           0x0000000000000000000000000000000000000000\n  signature      std_msgs/UInt8[]                                               Sender's digital signature                       0x23bc...c617\n=============== ============================================================== ================================================ ================================================\n-->\n\nAn Offer message has the same fields but instead of `validatorFee` there is a `lighthouseFee` field. This field determines the amount of fee for a lighthouse.\n\nNow let's have a look at the following diagram and walk step by step from the moment of publishing messages to a liability finalization.\n\n![Robonomics Network detailed scenario](../images/robonomics_network_detailed_scenario.jpg \"Robonomics Network detailed scenario\")\n\nA liability contract is created only if the following fields match: `model`, `objective`, `token`, `cost`. A provider of Robonomics Network watches every message and finds those ones that have a match.\nAfter the match is found the provider calls `createLiability(demand, offer)` method from the contract factory where `demand` and `offer` are serialized.\n\nBelow is the package diagram for the Robonomics communication stack:\n\n![Robonomics communication stack](../images/robonomics_network_communication_stack.jpg \"Robonomics communication stack\")\n\nThe factory deserializes arguments and recovers *promisee* and *promisor* addresses from signatures.\n\nNext step is token transfer. The factory transfers **cost** tokens from the *promisee* address and **validatorFee** and **lighthouseFee** from the *promisor* address to the new liability address.\n\n> - **You should approve sufficient amount of tokens for the factory.**\n> - **It's not required to approve tokens from the *promisor* address if fees are null.**\n\nNow the factory emits a NewLiability event with the liability address. An agent gets the address, reads fields, perform a task and at the same time writes a log file in rosbag format.\n\nWhen the work is done the agent sends a Result message with the following fields: hash of the rosbag file, a success flag, a signature. If the **validator** field is not null it means that only validator is able to finalize the liability.\n\nAfter the successful liability finalization the agent gets **cost** tokens. Otherwise, the *promisee* gets tokens back.","tools":[]}},"context":{}}