{"hash":"92f5bfff0f42cba7bd0553c50a2bb997bd6f115b","data":{"doc":{"id":"3eda88f08d6b104fb3840468555c2abd","title":"Market messages","description":"","contributors":[],"translated":true,"headings":[],"subtitles":[{"depth":2,"value":"Messages content","anchor":"#messages-content"},{"depth":3,"value":"Demand","anchor":"#demand"},{"depth":3,"value":"Offer","anchor":"#offer"},{"depth":3,"value":"Result","anchor":"#result"},{"depth":2,"value":"Messages signing","anchor":"#messages-signing"}],"content":"\nMarket messages is used for exchange **Demand** and **Offer** information. It also used for delivery **Result** messages with liability execution reports.\n\n> This is spec for Robonomics `Generation 5`.\n\n- Currently for message delivery is used [IPFS PubSub](https://ipfs.io/blog/25-pubsub/) broadcaster.\n- IPFS PubSub **topic** is set according to *Lighthouse [ENS](https://ens.domains/) name*.\n\n## Messages content\n\nRobonomics market message use [JSON](https://www.json.org/) data format.\n\n\n### Demand\n\n| Field | ROS Type | Description |\n|-------------- |-------------------------  |------------------------------------------------ |\n| model | [ipfs_common/Multihash](/docs/ipfs-common-messages#ipfs_commonmultihashmsg) | CPS behavioral model identifier |\n| objective | [ipfs_common/Multihash](/docs/ipfs-common-messages#ipfs_commonmultihashmsg) | CPS behavioral model parameters in rosbag file |\n| token | [ethereum_common/Address](/docs/ethereum-common-messages#ethereum_commonaddressmsg) | Operational token address |\n| cost | [ethereum_common/UInt256](/docs/ethereum-common-messages#ethereum_commonuint256msg) | CPS behavioral model execution cost |\n| lighthouse | [ethereum_common/Address](/docs/ethereum-common-messages#ethereum_commonaddressmsg) | Lighthouse contract address |\n| validator | [ethereum_common/Address](/docs/ethereum-common-messages#ethereum_commonaddressmsg) | Observing network address |\n| validatorFee  | [ethereum_common/UInt256](/docs/ethereum-common-messages#ethereum_commonuint256msg) | Observing network fee |\n| deadline | [ethereum_common/UInt256](/docs/ethereum-common-messages#ethereum_commonuint256msg) | Deadline block number |\n| nonce | [ethereum_common/UInt256](/docs/ethereum-common-messages#ethereum_commonuint256msg) | Robonomics message counter |\n| sender | [ethereum_common/Address](/docs/ethereum-common-messages#ethereum_commonaddressmsg) | Message sender address |\n| signature | std_msgs/UInt8[] | Sender’s Ethereum signature |\n\n### Offer\n\n| Field             | ROS Type                  | Description                                       |\n|---------------    |-------------------------  |------------------------------------------------   |\n| model             | [ipfs_commom/Multihash](/docs/ipfs-common-messages#ipfs_commonmultihashmsg)     | CPS behavioral model identifier                   |\n| objective         | [ipfs_commom/Multihash](/docs/ipfs-common-messages#ipfs_commonmultihashmsg)     | CPS behavioral model parameters in rosbag file    |\n| token             | [ethereum_commom/Address](/docs/ethereum-common-messages#ethereum_commonaddressmsg)   | Operational token address                         |\n| cost              | [ethereum_commom/UInt256](/docs/ethereum-common-messages#ethereum_commonuint256msg)   | CPS behavioral model execution cost               |\n| validator         | [ethereum_commom/Address](/docs/ethereum-common-messages#ethereum_commonaddressmsg)   | Observing network address                         |\n| lighthouse        | [ethereum_commom/Address](/docs/ethereum-common-messages#ethereum_commonaddressmsg)   | Lighthouse contract address                       |\n| lighthouseFee     | [ethereum_commom/UInt256](/docs/ethereum-common-messages#ethereum_commonuint256msg)   | Liability creation fee                            |\n| deadline          | [ethereum_commom/UInt256](/docs/ethereum-common-messages#ethereum_commonuint256msg)   | Deadline block number                             |\n| nonce             | [ethereum_commom/UInt256](/docs/ethereum-common-messages#ethereum_commonuint256msg)   | Robonomics message counter                        |\n| sender            | [ethereum_commom/Address](/docs/ethereum-common-messages#ethereum_commonaddressmsg)   | Message sender address                            |\n| signature         | std_msgs/UInt8[]          | Sender’s Ethereum signature                       |\n\n### Result\n\n| Field         | ROS Type                  | Description                       |\n|-----------    |-------------------------  |---------------------------------- |\n| liability     | [ethereum_commom/Address](/docs/ethereum-common-messages#ethereum_commonaddressmsg)   | Liability contract address        |\n| result        | [ipfs_commom/Multihash](/docs/ipfs-common-messages#ipfs_commonmultihashmsg)     | Liability result multihash        |\n| success       | std_msgs/Bool             | Is liability executed successful  |\n| signature     | std_msgs/UInt8[]          | Sender’s Ethereum signature       |\n\n## Messages signing\n\nBefore signing the messages is packed using [abi.encodePacked](https://solidity.readthedocs.io/en/latest/abi-spec.html#non-standard-packed-mode\n) solidity finction and hashed by Keccak_256.\n\n```\n   demandHash = keccak256(abi.encodePacked(\n        _model\n      , _objective\n      , _token\n      , _cost\n      , _lighthouse\n      , _validator\n      , _validator_fee\n      , _deadline\n      , IFactory(factory).nonceOf(_sender)\n      , _sender\n      ));\n```\n\n**`nonce` parameter is counted by factory smart contract and incremented for each created liability smart contract.**\n\nMessage hash are signed using Ethereum ``secp256k1`` [signature](https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_sign).\n","tools":[],"fileInfo":{"path":"en/market-messages.md","name":"market-messages"}}},"context":{}}