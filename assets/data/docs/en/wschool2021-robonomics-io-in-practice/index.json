{"hash":"30d51a24169c983cf10a623e506dc182a2deff8b","data":{"doc":{"id":"3728ead98b03926b163404444cb7218d","title":"Lesson 3, Robonomics IO in Practice","description":"","contributors":["akru"],"translated":true,"headings":[],"subtitles":[{"depth":2,"value":"Requirements","anchor":"#requirements"},{"depth":2,"value":"Robonomics Docker Installation","anchor":"#robonomics-docker-installation"},{"depth":2,"value":"Running Docker Container","anchor":"#running-docker-container"},{"depth":2,"value":"Testing Connection To Sensor","anchor":"#testing-connection-to-sensor"},{"depth":2,"value":"Running IPFS","anchor":"#running-ipfs"},{"depth":2,"value":"Accessing Running Instance of Docker","anchor":"#accessing-running-instance-of-docker"},{"depth":2,"value":"Writing Data To IPFS Using Robonomics I/O","anchor":"#writing-data-to-ipfs-using-robonomics-io"},{"depth":2,"value":"Robonomics Datalog","anchor":"#robonomics-datalog"},{"depth":2,"value":"Read Data From Sensor and Save In Blockchain","anchor":"#read-data-from-sensor-and-save-in-blockchain"}],"content":"\nIn this lesson we will show you how to use Robonomics to connect to an I/O device. \n\nSince you might not necessarily have the real sensor, we have provided the procedure for using both the real and virtual sensors.\n\n<!-- In the first section, we assume that you do not have the actual hardware, thus we would initially provide you with a simulated sensor that gives you info about the air quality.\n\nIn the second section, we would follow the same procedure as in section one but with the real sensor. Therefore, if you want to get the best experience, prepare the sensor mentioned in the requirement and jump to section 2. -->\n\n## Requirements\n\n* Docker, please install it from [here](https://docs.docker.com/engine/install/)\n* [Nova SDS011](https://aqicn.org/sensor/sds011) sensor (optional).\n\n## Robonomics Docker Installation\n\nAfter installing the docker container, pull the Robonomics docker using the command below:\n\n```\nsudo docker pull robonomics/robonomics\n```\n\n## Running Docker Container\n\n* <font color=\"orange\">For using the virtual sensor:</font>\n```\nsudo docker run -ti --rm --network host  robonomics/robonomics:winter-school bash\n```\n\n* <font color=\"orange\">For using the real sensor:</font>\n\nIf you have the connected SDS011 sensor, first check that it is available in `/dev` folder and has correct access rights by running the commands below:\n\n```\nls -l /dev/ttyUSB0   ## Shows if the sensor is available in the /dev folder \nsudo chmod 666 /dev/ttyUSB0  ## Gives correct access rights to the sensor\n```\n\nAfter making sure that the sensor is connected and has the correct access rights, run the docker by using the command below:\n\n```\nsudo docker run -ti --rm --network host --device /dev/ttyUSB0 robonomics/robonomics:winter-school bash\n```\n\n## Testing Connection To Sensor\n\n* <font color=\"orange\">For the virtual sensor:</font>\n\nAfter running the docker, you should now launch `vsds011.sh` script to access the virtual/simulated sensor which gives you air quality updates. In order to do that, run the following command in the docker:\n\n```\nvsds011.sh\n\n{\"timestamp\":\"1612837969\",\"pm25\":1.8,\"pm10\":5.7}    ## Sample output\n```\n\n* <font color=\"orange\">For the real sensor:</font>\n\nRun the following command in the docker:\n\n```\nrobonomics io read sds011\n\n{\"timestamp\":\"1612495226\",\"pm25\":0.6,\"pm10\":1.3}    ## Sample output\n```\n\n<!-- After installing the docker, pull Robonomics docker image and run it using the commands below. Use `winter-school` tag during this lesson. -->\n\n\n## Running IPFS\n\nWe use IPFS to write data to block chain. Thus in order to use Robonomics `read` and `write` subsystems and transfer data back and forth to blockchain, we need to run IPFS daemon.\n\nIn order to run IPFS daemon in the docker container, stop the scripts you ran in the previous section and run the following commands in the docker: \n\n```\nipfs init\nipfs daemon\n```\nYou should see a key-pair generated and IPFS daemon would be started.\n\n## Accessing Running Instance of Docker\nNow that the daemon is launched, you need to connect to the docker in a separate terminal. In order to access the docker in a separate terminal, you first need to get the ID of the docker. Run the following the command in a new terminal window to get the ID of the running docker:\n\n```\nsudo docker ps\n```\nCopy the ID of the docker from the output of the previous command and  run the following command. Replace the `<DOCKER-CONTAINER-ID>` with your ID.\n\n```\nsudo docker exec -ti <DOCKER-CONTAINER-ID> bash\n```\nYou should now be connected to the docker in a separate terminal window.\n\n## Writing Data To IPFS Using Robonomics I/O\n\nThe Robonomics IO subsystem has two kinds of commands:\n\n* `read` - Get data from device that supports read access.\n* `write` - Write data into device that supports write access.\n\nIn the new window for the docker, run the following command in order to write the output of the sensor into IPFS and subsequently to the blockchain.\n\n* <font color=\"orange\">For the virtual sensor:</font>\n\n```\nvsds011.sh | robonomics io write ipfs\n```\n\n* <font color=\"orange\">For the real sensor:</font>\n\n```\nrobonomics io read sds011 | robonomics io write ipfs\n```\n\n## Robonomics Datalog\n\n> The target of Robonomics [Datalog](https://crates.robonomics.network/robonomics_protocol/datalog/index.html) is data blockchainization. This pallet provides function to store custom data on blockchain to make it immutable, in other words, impossible to change in future.\n\nFor this section, we would need a running instance of the Robnomics binary. Development mode is preferred because of quick block time and already distributed balances on preset accounts. Let's launch the ***Robonomics*** binary in a separate terminal in the same docker container (Use the same procedure mentioned in ***Accessing Running Instance of Docker*** section to access the running docker in a new terminal window).\n\nIn the new docker window, launch the Robonomics binary in development mode by running the following:\n\n```\nrobonomics --dev\n```\n\nThe private seed is also required as an argument for `datalog` device. This seed is used to sign transactions and presents the account as a sender. To get the private seed, you can use `robonomics key` command.\n\nConnect to the docker in a separate terminal window and run the following command:\n\n```\nrobonomics key generate\n```\nSample output:\n\n```\nSecret phrase `rebel federal super deer dinosaur sick pledge hint truth wool input enjoy` is account:\n  Secret seed:      0xf5a371d1b1ae8279c4c950cb39a4070b0a17c7cee016e59506d177e433db842c\n  Public key (hex): 0x088ccc48a72db4f056e24a67fc8b7676403593010aa5b2c06ebeff4a1151e930\n  Account ID:       0x088ccc48a72db4f056e24a67fc8b7676403593010aa5b2c06ebeff4a1151e930\n  SS58 Address:     5CFv4nCHq53hT963smDJsYqiujdT5HGaTjCztuqhprbXcTxK\n```\n **Note:** Save the generated address and seed for later use.\n\nInitially, balance of the account at the generated address is zero, thus the network does not allow sending transactions from this address. To fix this, you need to transfer some tokens from an account like `Alice` to the account at the generated address. Use [Robonomics Parachain portal](https://polkadot.js.org/apps/?rpc=wss%3A%2F%2Fkusama.rpc.robonomics.network%2F#/) for making the transfer.\n\n![portal transfer](../images/ws_lesson3/transfer_funds.jpg)\n\nAfter token addition is done, `datalog` device could be used for saving any data on blockchain. The argument `-s` is used to set secret seed of account. Remember, the account should have non-zero balance to send transactions.\n\n**Note:** In case you have problems adding funds, make sure the development setting is set according to [this](https://wiki.robonomics.network/docs/en/troubleshooting/#couldnt-send-tokens-between-accounts). A step by step guide for adding funds to an account can be found [here](https://wiki.robonomics.network/docs/en/adding-funds-to-account-in-dapp/).\n\nIf you everything is set correctly,  you should see `datalog` event on `Explorer` page of Robonomics portal.\n\n![portal datalog](../images/ws_lesson3/datalog_image.jpg)\n\n\n## Read Data From Sensor and Save In Blockchain\n\nAs the final step of this lesson, let's write a command that collects data from the sensor, packs it into IPFS and then sends `datalog` transaction to be saved as a hash on blockchain.\n\nThe pipeline would be like the following:\n```\nSensor -> IPFS -> Blockchain\n```\nIn order to achieve this, run the following command in the docker.\n\n* <font color=\"orange\">For the virtual sensor:</font>\n```\nvsds011.sh | robonomics io write ipfs | robonomics io write datalog -s <private_key>\n```\n\n* <font color=\"orange\">For the real sensor:</font>\n\n```\nrobonomics io read sds011 | robonomics io write ipfs | robonomics io write datalog -s <private_key>\n```\n**Note:** For these commands to work, the IPFS and Robonomics binary should be running in the docker as well.\n\nIf everything goes well, the `datalog` event with IPFS hash should be presented in the ***recent events*** section. \n\n![portal datalog complex](../images/ws_lesson3/datalog_combined.jpg)\n\n","tools":[],"fileInfo":{"path":"en/wschool2021-robonomics-io-in-practice.md","name":"wschool2021-robonomics-io-in-practice"}}},"context":{}}