{"hash":"6be843d740b0c93a891ccc2e5854c92ec77e047b","data":{"doc":{"id":"1bd1698fe196417fbb72ea478d18368a","title":"Lección 5, Conectividad","description":"","contributors":["vourhey"],"translated":false,"headings":[],"subtitles":[{"depth":2,"value":"IoT como un pie multiple","anchor":"#iot-como-un-pie-multiple"},{"depth":2,"value":"Software del Dispositivo","anchor":"#software-del-dispositivo"},{"depth":2,"value":"Que es Conectividad?","anchor":"#que-es-conectividad"},{"depth":2,"value":"Comparison of AWS and Robonomics Connectivity","anchor":"#comparison-of-aws-and-robonomics-connectivity"},{"depth":2,"value":"Instalación de Conectividad en AIRA","anchor":"#instalación-de-conectividad-en-aira"},{"depth":3,"value":"Requerimientos","anchor":"#requerimientos"},{"depth":2,"value":"Conectar el Sensor a la Conectividad","anchor":"#conectar-el-sensor-a-la-conectividad"},{"depth":3,"value":"Requerimientos","anchor":"#requerimientos-1"},{"depth":2,"value":"Práctica","anchor":"#práctica"},{"depth":3,"value":"Trayectoria 1. Flashear un sensor ESP + SD011","anchor":"#trayectoria-1-flashear-un-sensor-esp--sd011"},{"depth":3,"value":"Trayectoria 2. Lanzamiento de Conectividad","anchor":"#trayectoria-2-lanzamiento-de-conectividad"}],"content":"\n## IoT como un pie multiple\n\n* Software del dispositivo\n    * FreeRTOS\n    * ESP/Arduino\n    * Computadoras de placa única (RPi, LattePanda, etc.)\n* Conectividad\n    * IoT Hub\n    * IoT Manager\n* Servicios analíticos\n    * AWS\n    * Google Cloud IoT Core\n    * ThingsBoard\n\nComo regla general, la mayoría no está interesada en sensores y servidores, sino en análisis de datos. Para obtenerlo, debe decidir qué dispositivo usar, cómo trabajar con él y dónde conectarse.\n\n## Software del Dispositivo\n\nConsidere el ejemplo de una estación meteorológica doméstica. Es necesario recopilar datos sobre contaminación atmosférica (SDS011), temperatura y humedad (BME). El microcontrolador ESP8266 puede manejar esta tarea.\n\nRequisitos:\n\n* Leer correctamente los datos de los sensores\n* Tener un identificador único\n* Transferir datos a un servidor conocido\n* Proporcionar firma digital de datos (opcional)\n\nPuede encontrar el firmware actual [aquí](https://github.com/LoSk-p/sensors-software/tree/366b19bf447a5fc19220ef89eab0f2440f8db1c2).\n\n## Que es Conectividad?\n\nEn el mundo de IoT, la conectividad se refiere a la conexión de varios dispositivos de IoT a Internet para enviar datos y/o controlar el dispositivo.\n\nLas soluciones arquitectónicas conocidas se pueden dividir aproximadamente en 3 grupos:\n\n* Totalmente descentralizado. Por ejemplo, los dispositivos están conectados por una red de malla. No apto para redes de área extensa debido a los altos requisitos de hardware.\n* Centralizado. Por ejemplo, AWS. Proporciona un único punto de entrada y facilidad de conexión, pero existe un alto riesgo de falla en caso de problemas con el servidor.\n* Híbrido. Por ejemplo, [Robonomics Connectivity](https://github.com/airalab/sensors-connectivity). Proporciona una dirección para dispositivos en una red “local” y publica datos en un canal de mensajes IPFS distribuido.\n\n## Comparison of AWS and Robonomics Connectivity\n\n| Management services \t| AWS                               \t|               Robonomics              \t|\n|---------------------\t|-----------------------------------\t|---------------------------------------\t|\n| Transaction type    \t| Technical                         \t| Technical and economic                \t|\n| Security            \t| IT-company cloud control          \t| Polkadot and Ethereum                 \t|\n| Protocol            \t| HTTPS, MQTT                       \t| IPFS, Robonomics                      \t|\n| Ecosystem           \t| Private                           \t| Shared                                \t|\n| Access to DeFi      \t| No                                \t| Yes                                   \t|\n| Costs               \t| Pushing data - $1-2 a sensor      \t| Pushing data - $0                     \t|\n|                     \t| Shadow         - from $10 a month \t| Digital Twin    - $0,01 a transaction \t|\n\n## Instalación de Conectividad en AIRA\n\nhttps://www.youtube.com/watch?v=JbBNMHAzJKM\n\n### Requerimientos\n\n* [VirtualBox 6.1 o superior](https://www.virtualbox.org/wiki/Downloads) and above\n* [Aira OS ova image](https://static.aira.life/ova/airaos-21.03_robonomics-winter-school.ova)\n\nImporte la Aira Image en VirtualBox como se describe [aquí](/docs/aira-installation-on-vb/)\n\nConfigurar una conexión a través de [SSH](/docs/aira-connecting-via-ssh/)\n\nCuando todo esté configurado e inicie sesión con éxito a través de SSH, clonemos el paquete principal y compilemos.\n\n```\ngit clone https://github.com/airalab/sensors-connectivity\ncd sensors-connectivity\ngit checkout v0.9\nnix build -f release.nix\n```\n\nAhora creemos una copia del archivo de configuración predeterminado para su uso posterior. Para conocer todas las opciones, consulte [este artículo]((/docs/configuration-options-description/). Luego lanza el paquete con `roslaunch`.\n\n```\ncp config/default.json config/my.json\nsource result/setup.zsh\nroslaunch sensors_connectivity agent.launch config:=$PWD/config/my.json\n```\n\n## Conectar el Sensor a la Conectividad\n\nhttps://www.youtube.com/watch?v=yxqxBk-6bpI\n\n### Requerimientos\n\n* [Nova SDS011](https://aqicn.org/sensor/sds011) sensor \n* [Yarn Packet Manager](https://yarnpkg.com/getting-started/install)\n\nAhora conectemos un sensor real, enviemos el puerto USB a la máquina virtual, configuremos un mapa y miremos nuestras propias medidas.\n\nPrimero, detenga el AIRA OS si se estaba ejecutando y agregue un dispositivo USB correspondiente.\n\n![VB USB Forwarding](../images/vb_forward_usb.jpg)\n\nInicie la VM, conéctese a través de SSH y configure la opción de `comstation/port` de acuerdo con su dispositivo USB en la VM. También habilite la `comstation` y configure su latitud y longitud. Al final, `config/my.json` debería verse así:\n\n```\n{\n   \"general\":{\n      \"publish_interval\":30\n   },\n   \"comstation\":{\n      \"enable\":true,\n      \"port\":\"/dev/ttyUSB0\",\n      \"work_period\":0,\n      \"geo\":\"59.944917,30.294558\",\n      \"public_key\":\"\"\n   },\n   \"httpstation\":{\n      \"enable\":false,\n      \"port\":8001\n   },\n   \"mqttstation\": {\n      \"enable\": false,\n      \"host\": \"connectivity.robonomics.network\",\n      \"port\": 1883\n   },\n   \"luftdaten\":{\n      \"enable\":false\n   },\n   \"robonomics\":{\n      \"enable\":true,\n      \"ipfs_provider\":\"/ip4/127.0.0.1/tcp/5001/http\",\n      \"ipfs_topic\":\"airalab.lighthouse.5.robonomics.eth\"\n   },\n   \"datalog\":{\n      \"enable\":false,\n      \"path\":\"\",\n      \"suri\":\"\",\n      \"remote\":\"wss://substrate.ipci.io\",\n      \"dump_interval\":3600,\n      \"temporal_username\":\"\",\n      \"temporal_password\":\"\"\n   },\n   \"dev\":{\n      \"sentry\":\"\"\n   }\n}\n```\n\n> Si no tiene un sensor real, puede usar el script de `sensors-connectivity/utils/virtual-sensor.py` para emular uno.\n> \n> Habilite `HTTPStation` y deshabilite `COMStation` cambiando el archivo de configuración como:\n> ```\n> {\n>    \"general\":{\n>       \"publish_interval\":30\n>    },\n>    \"comstation\":{\n>       \"enable\":false,\n>       \"port\":\"/dev/ttyUSB0\",\n>       \"work_period\":0,\n>       \"geo\":\"59.944917,30.294558\",\n>       \"public_key\":\"\"\n>    },\n>    \"httpstation\":{\n>       \"enable\":true,\n>       \"port\":8001\n>    },\n>    ...\n> }\n> ```\n>\n> y el lanzamiento de `utils/virtual-sensor.py` en una terminal dedicada en la VM.  \n\nGuarde el archivo e inicie la conectividad desde la carpeta de `sensors-connectivity`:\n\n```\nsource result/setup.zsh\nroslaunch sensors_connectivity agent.launch config:=$PWD/config/my.json\n```\n\nDebería ver las primeras medidas en la salida de la consola\n\nBusque su ID de IPFS en la VM. Aparece justo después de iniciar la imagen o mediante el comando `ipfs id`. Lo necesitaremos más tarde.\n\nAhora configuremos nuestra propia instancia del mapa. En su computadora portátil (no en la VM), clone [este](https://github.com/airalab/sensors.robonomics.network) repositorio y compile la aplicación:\n\n```\ngit clone https://github.com/airalab/sensors.robonomics.network\ncd sensors.robonomics.network\nyarn install\n```\n\nEdite el archivo `src/agents.json` y ponga su ID de IPFS. Por ejemplo:\n\n```\n[\n  \"12D3KooWSCFAD3Lpew1HijniE6oFTuo4jsMwHzF87wNnXkpCRYWn\"\n]\n```\n\nLanzar el mapa:\n\n```\nyarn serve\n```\n\nVaya a [http://localhost:8080/](http://localhost:8080/) o la dirección que le dio el hilo y busque el sensor.\n\n## Práctica\n\n### Trayectoria 1. Flashear un sensor ESP + SD011\n\nRequerimientos:\n\n* ESP8266\n* Al menos uno de los sensores SDS011, BME280, HTU21D\n\nUse la [instrucción](https://wiki.robonomics.network/docs/connect-sensor-to-robonomics/) para conectar un sensor a la Robonomics Connectivity.\n\nFíjese que su sensor aparezca en nuestro [mapa](https://sensors.robonomics.network/#/).\n\n### Trayectoria 2. Lanzamiento de Conectividad\n\nRequerimientos:\n\n* ROS\n* Python\n* Nix (Opcional)\n\nConstrucción y lanzamiento [sensores-conectividad](https://github.com/airalab/sensors-connectivity#get-a-package-and-build)\n\n> Como construir, instalar [aqui](https://wiki.robonomics.network/docs/iot-sensors-connectivity/) y configurar [aqui](https://wiki.robonomics.network/docs/configuration-options-description/)\n\nEsquema General del paquete:\n\n```\n    station1 \\                        / feeder1\n    station2 -  sensors-connectivity  - feeder2\n    station3 /                        \\ feeder3\n```\n\nSe propone la opción de implementar una nueva estación, por ejemplo, un generador de números aleatorios, o un nuevo alimentador, por ejemplo, mostrando una cadena en la pantalla.\n\nInterfase `IStation` [aqui](https://github.com/airalab/sensors-connectivity/blob/master/src/stations/istation.py#L73).\n\nInterfase `IFeeder` [aqui](https://github.com/airalab/sensors-connectivity/blob/master/src/feeders/ifeeder.py#L5)\n\n\n","tools":[],"fileInfo":{"path":"es/wschool2021-connectivity-service.md","name":"wschool2021-connectivity-service"}}},"context":{}}