{"hash":"f2a1ee146d28057ea7a76a3738787da612f8097c","data":{"doc":{"id":"6e0a0277cddc1dff798e2aac8071a2ef","title":"Conectar sensor","description":"","contributors":["LoSk-p","makyul"],"headings":[],"subtitles":[{"depth":2,"value":"Requisitos","anchor":"#requisitos"},{"depth":2,"value":"Zigbee stick","anchor":"#zigbee-stick"},{"depth":2,"value":"Instalación","anchor":"#instalación"},{"depth":2,"value":"Configuración","anchor":"#configuración"},{"depth":2,"value":"Conectar enchufe","anchor":"#conectar-enchufe"},{"depth":2,"value":"Después de emparejar","anchor":"#después-de-emparejar"},{"depth":2,"value":"Ejecución","anchor":"#ejecución"}],"content":"\nEjemplo de trabajo está en el video:\n\nhttps://youtu.be/jsaFCVAx2sA\n\n## Requisitos\n\n* [Aqara Smart Plug](https://aqara.ru/product/aqara-smart-plug/?yclid=462434430312045270)\n* Raspberry Pi\n* Zigbee adapter [JetHome USB JetStick Z2](https://jhome.ru/catalog/parts/PCBA/293/) (o uno de [soportado](https://www.zigbee2mqtt.io/enformation/supported_adapters.html))\n\nService is running on Raspberry Pi y contact the smart plug via zigbee protocol.\n\n## Zigbee stick\n\nSi tienes el JetHome USB JetStick Z2, ya tiene el firmware necesario, por lo que no necesitas flashearlo. Pero si tienes otro adaptador, primero debes flashearlo con el software zigbee2MQTT. Puedes encontrar instrucciones para tu dispositivo [aquí](https://www.zigbee2mqtt.io/information/supported_adapters.html).\n\nConecta el adaptador y verifica la dirección del adaptador (también puede ser `/dev/ttyUSB1`):\n```bash\n$ ls -l /dev/ttyUSB0\ncrw-rw---- 1 root dialout 166, 0 May 16 19:15 /dev/ttyUSB0 \n```\n\nEs posible que primero necesites acceder al puerto USB. Añade tu usuario a `dialout` grupo (funciona para ubuntu, pero el nombre del grupo puede ser diferente en otros sistemas operativos).\n\nPara ubuntu:\n```bash\nsudo usermod -a -G dialout $USER\n```\nPara arch:\n```bash\nsudo usermod -a -G uucp $USER\n```\nLuego cierra sesión e inicia sesión nuevamente o reinicia la computadora.\n\n## Instalación\n\nClona el repositorio:\n\n```\ngit clone https://github.com/makyul/robonomics-carbon-footprint.git\ncd robonomics-carbon-footprint\n```\n\n## Configuración\n\nVe a `data/configuration.yaml` y configura `permit_join: true`:\n\n```\n# Home Assistant integration (MQTT discovery)\nhomeassistant: false\n\n# allow new devices to join\npermit_join: true\n\n# MQTT settings\nmqtt:\n  # MQTT base topic for zigbee2mqtt MQTT messages\n  base_topic: zigbee2mqtt\n  # MQTT server URL\n  server: 'mqtt://172.17.0.1'\n  # MQTT server authentication, uncomment if required:\n  # user: my_user\n  # password: my_password\n\n# Serial settings\nserial:\n  # Location of CC2531 USB sniffer\n  port: /dev/ttyUSB0\n```\nTambién es posible que desees completar los campos `server` and `port` con la información correspondiente. En el campo `server` utiliza la IP del `docker0` puente para establecer la conexión: \n\n```bash\n$ ip a                                                 127\n1: lo: <LOOPBACK,UP,LOWER_UP> mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000\n    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00\n\n...\n\n5: docker0: <NO-CARRIER,BROADCAST,MULTICAST,UP> mtu 1500 qdisc noqueue state DOWN group default \n    link/ether 02:42:0d:ff:5f:a3 brd ff:ff:ff:ff:ff:ff\n    inet 172.17.0.1/16 brd 172.17.255.255 scope global docker0\n       valid_lft forever preferred_lft forever\n    inet6 fe80::42:dff:feff:5fa3/64 scope link \n       valid_lft forever preferred_lft forever\n```\nAquí tu dirección es `172.17.0.1`.\n\nLuego crea el archivo config/config.yaml con la siguiente información y configura tu ubicación (puedes consultar https://countrycode.org/ para el código ISO de 3 letras):\n\n```\nlocation: RUS\nservice_address: 4GdHeLbmio2noKCQM5mfxswXfPoW2PcbpYKKkM4NQiqSqJMd\ntwin_id: 5\nsending_timeout: 3600\nbroker_address: \"172.17.0.1\"\nbroker_port: 1883\n```\n\n## Conectar enchufe\n\nPrimer inicio:\n\n```\ndocker-compose up     \n```\n\nPara cambiar al modo de emparejamiento en el enchufe, mantenga presionado el botón de encendido durante unos segundos hasta que la luz comience a parpadear en azul rápidamente.\n\nEn los registros debería ver ahora que su complemento comenzó a publicarse en mqtt.\n\n\n## Después de emparejar\n\nSi no quieres permitir que otros dispositivos se emparejen con tu adaptador, ahora debes ir a `data/configuration.yaml` y establecer `permit_join: false`. Restart service (use 'Ctrl+C' y\n\n```bash\ndocker-compose up     \n```\nuna vez más para enviar los cambios).\n\n## Ejecución\nEn el primer inicio se creará una cuenta para el enchufe. \n> Si ya tiene una cuenta, debe agregar su semilla al archivo `config.config.yaml` en la sección `device_seed`:\n>\n> ```\n> location: RUS\n> service_address: 4GdHeLbmio2noKCQM5mfxswXfPoW2PcbpYKKkM4NQiqSqJMd\n> twin_id: 5\n> sending_timeout: 3600\n> broker_address: \"172.17.0.1\"\n> broker_port: 1883\n> device_seed: <device_seed>\n>```\n\nDespués de crear la cuenta, verás la dirección en los registros (la semilla se agregará a `config/config.yaml`):\n```\nplug               | Generated account with address: 4GuP82BMAgrbtU8GhnKhgzP827sJEaBXeMX38pZZKPSpcWeT\n```\nNecesitas transferir algunos tokens a esta cuenta para las tarifas de transacción, puedes hacerlo en [Robonomics Portal](https://polkadot.js.org/apps/?rpc=wss%3A%2F%2Fkusama.rpc.robonomics.network%2F#/accounts). \n\nEl servicio verá que tienes suficientes tokens, en los registros verás:\n```\nplug               | Balance is OK\n```\nEl servicio verá los mensajes mqtt del enchufe y garantizará un uso seguro de la energía. Cada hora (puedes cambiar el tiempo de espera en `config/config.yaml` in `sending_timeout` sección, el tiempo de espera está en segundos) creará un registro de datos con la siguiente información:\n```\n{'geo': 'RUS', 'power_usage': 1.021237391233444, 'timestamp': 1644494860.5860083}\n```\n","tools":[],"fileInfo":{"path":"es/carbon-footprint-sensor.md","name":"carbon-footprint-sensor"}}},"context":{}}