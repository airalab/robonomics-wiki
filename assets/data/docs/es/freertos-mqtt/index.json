{"hash":"43cdadfbe0ed6cb2a1300f58105ff56ac7d0dbc2","data":{"doc":{"id":"c53a8b64e574b08e488e9fcc668609b7","title":"Conecta un dispositivo Amazon FreeRTOS a Robonomics mediante MQTT","description":"","contributors":["khssnv"],"headings":[],"subtitles":[{"depth":2,"value":"Configuración de hardware","anchor":"#configuración-de-hardware"},{"depth":2,"value":"Flujo de datos","anchor":"#flujo-de-datos"},{"depth":2,"value":"Firmware","anchor":"#firmware"},{"depth":3,"value":"Configuración de Wi-Fi","anchor":"#configuración-de-wi-fi"},{"depth":3,"value":"Configuración del punto final MQTT","anchor":"#configuración-del-punto-final-mqtt"},{"depth":2,"value":"De MQTT a Robonomics","anchor":"#de-mqtt-a-robonomics"},{"depth":2,"value":"Recursos originales utilizados","anchor":"#recursos-originales-utilizados"}],"content":"\nAquí está la demostración de cómo un microcontrolador que ejecuta [Amazon Web Services FreeRTOS](https://aws.amazon.com/freertos/) puede conectarse a la red Robonomics a través de MQTT. Por favor, consulta [este repositorio](http://github.com/khssnv/freertos_mqtt_robonomics_example) para obtener el código fuente del proyecto.\n\nUtilizamos [ESP32 DevKitC](https://devices.amazonaws.com/detail/a3G0L00000AANtjUAH/ESP32-WROOM-32-DevKitC/) con la distribución FreeRTOS y la implementación MQTT proporcionada por [Espressif IoT Development Framework](https://github.com/espressif/esp-idf), mientras que Espressif es un proveedor del microcontrolador utilizado.\n\nTambién hay un sensor [PMS-3003](http://www.plantower.com/en/content/?107.html) con fines de demostración. El sensor mide la presencia de partículas en el aire y se puede utilizar para estimar la calidad del aire.\n\nLa calidad del aire no es el tema del artículo, puedes encontrar más información al respecto en el sitio web de la OMS: [Contaminación del aire ambiente (exterior)](https://www.who.int/news-room/fact-sheets/detail/ambient-(outdoor)-air-quality-and-health). El objetivo del sistema es publicar las mediciones del sensor en la red Robonomics de Airalab.\n\n## Configuración de hardware\n\nConectamos el PIN5 de TXD de PMS3003 a IO17 de ESP32 DevKitC para transferir las mediciones mediante UART.\nAmbos dispositivos también requieren alimentación y tierra común.\n\n![Wiring Diagram](../images/freertos-mqtt/wiring.png)\n\n## Flujo de datos\n\nPara enviar las mediciones del sensor a la red Robonomics, nuestro objetivo a nivel de firmware es obtener los datos de un sensor mediante el protocolo de comunicación integrado que admite (UART en nuestro caso) y enviarlo a una instancia de AIRA mediante MQTT / TCP.\n\n![Sending](../images/freertos-mqtt/send.svg)\n\nEn nuestro ejemplo, utilizamos la implementación en la nube de AIRA disponible mediante una dirección IP pública y un nombre de dominio asignado.\nEn la instancia de AIRA, configuramos el broker MQTT `mosquitto` y nos suscribimos al tema `/freertos_mqtt_robonomics_example/98:F4:AB:72:23:C4` para recibir mensajes de MQTT.\n\nLuego, pasamos los mensajes al escritor `robonomics io` mediante una tubería.\n\n![Receiving](../images/freertos-mqtt/recv.svg)\n\nAhora los datos están disponibles en la red Robonomics y podemos leerlos nuevamente con `robonomics io`.\n\n## Firmware\n\nUtilizamos la aplicación de ejemplo [ESP-MQTT con transporte TCP](https://github.com/espressif/esp-idf/tree/master/examples/protocols/mqtt/tcp) como base.\n\nSolo modificamos `main/app_main.c` para la conexión UART al sensor, la sincronización horaria SNTP y la rutina periódica de publicación MQTT.\n\nSi estás intentando repetir el proyecto y es tu primer proyecto basado en ESP IDF, por favor, sigue primero la guía de programación de ESP-IDF de [Espressif](https://docs.espressif.com/projects/esp-idf/en/latest/esp32/get-started/index.html#installation-step-by-step) para familiarizarte con las operaciones del firmware, como la configuración, compilación y carga con la herramienta `idf.py`.\n\n### Configuración de Wi-Fi\n\nPara comunicarse con la instancia de AIRA implementada en la nube, nuestro microcontrolador requiere una conexión a Internet.\nUtilizamos el Wi-Fi del ESP32 para ello.\nEspressif proporciona utilidades para configurar el Wi-Fi incorporado.\nEn nuestro ejemplo, utilizamos un entorno de desarrollo con Ubuntu 20.04 GNU/Linux.\nPara configurar el Wi-Fi, vamos a la carpeta del proyecto y ejecutamos la herramienta de configuración del SDK.\n\n```console\ncd freertos_mqtt_robonomics_example/firmware\nidf.py menuconfig\n```\n\nLuego configuramos el SSID y la contraseña del punto de acceso Wi-Fi en la sección `Example Conectarion Configuración`.\n\n![Menuconfig Wi-Fi](../images/freertos-mqtt/menuconfig-wi-fi.png)\n\n### Configuración del punto final MQTT\n\nHay dos cosas que configurar para MQTT.\nLa primera es la dirección del broker MQTT.\nSe puede configurar con la herramienta de configuración del SDK.\n\n```console\ncd freertos_mqtt_robonomics_example/firmware\nidf.py menuconfig\n```\n\nEstablece la `URL del broker` en la sección `Example Configuración`.\n\n![Menuconfig MQTT](../images/freertos-mqtt/menuconfig-mqtt.png)\n\nLa segunda cosa es el tema MQTT.\nLo configuramos en el firmware con el prefijo del nombre del proyecto seguido de la dirección MAC de nuestro ESP32.\nEsto nos da `/freertos_mqtt_robonomics_example/98:F4:AB:72:23:C4` para nuestro microchip en particular.\n\n## De MQTT a Robonomics\n\nPrimero, comprobemos si recibimos datos por MQTT.\nPodemos suscribirnos al tema del broker MQTT de Mosquitto al que el dispositivo publica.\n\n```console\n$ nix-shell -p mosquitto --run \"mosquitto_sub -h localhost -t '/freertos_mqtt_robonomics_example/98:F4:AB:72:23:C4'\"\nts=1615651809, PM1=2, PM2.5=6, PM10=3\n```\n\nAquí traemos el paquete `mosquitto` a nuestro entorno para usar la utilidad `mosquitto_sub`.\nLuego nos suscribimos al tema establecido en el firmware.\nObtuvimos nuestras mediciones, lo que significa que AIRA recibe datos correctamente a través de MQTT.\nAhora vamos a enviar estos mensajes a la Red Robonomics.\n\n```console\nnix-shell -p mosquitto --run \"mosquitto_sub -h localhost -t '/freertos_mqtt_robonomics_example/98:F4:AB:72:23:C4'\" | robonomics io write pubsub --bootnodes=/ip4/127.0.0.1/tcp/34333 /freertos_mqtt_robonomics_example\n```\n\nAquí usamos la utilidad `robonomics` para publicar mensajes en el canal pubsub `/freertos_mqtt_robonomics_example`.\nEspecificamos `bootnodes` para asegurar al menos una conexión establecida.\n\nAhora estamos leyendo estos mensajes desde el mismo canal pubsub.\n\n```console\n$ robonomics io read pubsub --listen /ip4/127.0.0.1/tcp/34333 /freertos_mqtt_robonomics_example\n2021-03-27 15:15:51  Generated random peer id: 12D3KooWB2nym5E6c3aPpnPKK5wB9Z6n9eZzcXSpyUBozxhi6dam\n2021-03-27 15:15:51  Subscribed to topic: _robonomics_pubsub_peer_discovery\n2021-03-27 15:15:51  Subscribed to topic: /freertos_mqtt_robonomics_example\n2021-03-27 15:15:56  New peer connected: PeerId(\"12D3KooWRPLCioD2b9XLZTZJQELSAuQAyTrHUKzRktrQHtTSs6kS\")\n2021-03-27 15:15:56  GRAFT: Mesh link added for peer: PeerId(\"12D3KooWRPLCioD2b9XLZTZJQELSAuQAyTrHUKzRktrQHtTSs6kS\") in topic: TopicHash { hash: \"_robonomics_pubsub_peer_discovery\" }\nts=1616843855, PM1=3, PM2.5=4, PM10=3\n```\n\n## Recursos originales utilizados\n\n* Esquema de pines ESP32 DevKitC de GoJimmy's blog https://gojimmypi.blogspot.com/2017/03/jtag-debugging-for-esp32.html\n* Estructura de datos y decodificador PSM3003 de OpenAirProject https://github.com/openairproject/sensor-esp32\n\n**¡Gracias a todos!**\n","tools":[],"fileInfo":{"path":"es/freertos-mqtt.md","name":"freertos-mqtt"}}},"context":{}}