{"hash":"f73aa8a389be1aaff668370705b63c18b38dd85b","data":{"doc":{"id":"f2d5dd6f257e85ed16430c1379f5d547","title":"Lección 6.1, Crear dApps IoT para usuarios finales","description":"","contributors":["vol4tim"],"translated":true,"headings":[],"subtitles":[{"depth":2,"value":"Preparándose","anchor":"#preparándose"},{"depth":3,"value":"Lanzamiento del nodo de Robonomics","anchor":"#lanzamiento-del-nodo-de-robonomics"},{"depth":3,"value":"Extension del Navegador","anchor":"#extension-del-navegador"},{"depth":2,"value":"Desarrollo Dapp","anchor":"#desarrollo-dapp"},{"depth":3,"value":"Paso 1","anchor":"#paso-1"},{"depth":3,"value":"Paso 2. Comienzo con polkadot.js","anchor":"#paso-2-comienzo-con-polkadotjs"},{"depth":4,"value":"Instalacion de Dependencias","anchor":"#instalacion-de-dependencias"},{"depth":4,"value":"Conectarse a Robonomics","anchor":"#conectarse-a-robonomics"},{"depth":3,"value":"Paso 3. Componente de Conexion de Vue","anchor":"#paso-3-componente-de-conexion-de-vue"},{"depth":4,"value":"Conectando","anchor":"#conectando"},{"depth":4,"value":"Cuenta con Saldo","anchor":"#cuenta-con-saldo"},{"depth":3,"value":"Paso 4. Datalog","anchor":"#paso-4-datalog"},{"depth":3,"value":"Step 5. Lanzamiento","anchor":"#step-5-lanzamiento"},{"depth":3,"value":"Paso 6. Demo","anchor":"#paso-6-demo"}],"content":"\n## Preparándose\n\n### Lanzamiento del nodo de Robonomics\n\nPara el desarrollo y la prueba de dApp, usaremos un nodo local de Robonomics. Para hacer esto, necesita descargar el archivo binario compilado v0.24 [https://github.com/airalab/robonomics/releases](https://github.com/airalab/robonomics/releases). Usaré Ubuntu, así uno descarga la versión apropiada.\n\nDesempaquetar el archivo:\n```sh\nwget https://github.com/airalab/robonomics/releases/download/v0.24.0/robonomics-ubuntu-0.24.0-x86_64.tar.xz\ntar -xvf robonomics-ubuntu-0.24.0-x86_64.tar.xz\nchmod +x robonomics\n```\n\nAhora podemos iniciar el nodo en modo de desarrollo. Para hacer esto, use -dev flag.\n```sh\n./robonomics --dev --tmp\n```\n\n> Solución de problemas\n```sh\n./robonomics purge-chain --dev\n```\n\n### Extension del Navegador\n\nPara almacenar claves en un navegador, existe `polkadot{.js} extension`. En dApp lo usaremos para firmar transacciones.\n\nLa extensión está disponible actualmente para `Google Chrome` y `Firefox` [https://polkadot.js.org/extension/](https://polkadot.js.org/extension/)\n\nDespués de instalar la extensión, cree una nueva cuenta.\n![screen1](../images/build-iot-dapps/screen1.png)\n\n> El primer paso esta completado.\n\n## Desarrollo Dapp\n\n### Paso 1\n\n> Escribiremos la dApp usando el marco vue.js, aunque puede usar lo que uno quiera o pueda.\n\nComencemos a desarrollar la dApp creando una aplicación de inicio con vue.js Y aquí puedes hacerlo de dos maneras.\n\nCamino 1:\n\nUsando la utilidad de consola `Vue cli`.\nPara hacer esto, debe [instalarlo] (https://cli.vuejs.org/guide/installation.html)\nAlso we will need `yarn`. Install it from [here](https://yarnpkg.com)\n\nDespués de la instalación, puede ejecutar el comando en la terminal\n\n```sh\nvue create mydapp\n```\n\nResponda algunas preguntas del asistente de configuración. Usaremos la versión Vue 2, por lo que mantenemos la versión predeterminada `Default ([Vue 2] babel, eslint)`.\n\nCamino 2:\n\nClone el repositorio de git preparado con el ejemplo y cambie al paso 1\n\n```sh\ngit clone https://github.com/airalab/example-robonomics-dapp.git mydapp\ncd mydapp\ngit checkout step-1\n```\n\nComo resultado, obtendremos un directorio con la aplicación de inicio instalada, que ya se puede iniciar y abrir en el navegador.\n\n```sh\nyarn\nyarn serve\n```\n\n### Paso 2. Comienzo con polkadot.js\n\n#### Instalacion de Dependencias\n\nPara conectar la dApp a Robonomics, existe la biblioteca `@polkadot/api`. Y para la interacción de dApp con una extensión con claves, tenemos la librería `@polkadot/extension-dapp`. Necesitamos instalarlos en nuestra aplicación.\nSe pueden encontrar más detalles sobre el uso de esta biblioteca en la documentación https://polkadot.js.org/docs/.\n\nCamino 1:\n\n```sh\nyarn add @polkadot/api @polkadot/extension-dapp\n```\n\nTambién debe agregar el archivo `vue.config.js` para admitir la extensión `mjs`.\n\n`vue.config.js`\n```js\nmodule.exports = {\n  publicPath: \"\",\n  configureWebpack: {\n    resolve: {\n      extensions: [\"*\", \".mjs\", \".js\", \".vue\", \".json\", \".gql\", \".graphql\"]\n    },\n    module: {\n      rules: [\n        {\n          test: /\\.mjs$/,\n          include: /node_modules/,\n          type: \"javascript/auto\"\n        }\n      ]\n    }\n  }\n};\n```\n\n#### Conectarse a Robonomics\n\nPrimero, creemos un archivo de configuración con los parámetros para conectarse al nodo de Robonomics. En el repositorio de demostración, hay un ejemplo de este archivo `config.template.json`.\n\n`src/config.json`\n```json\n{\n  \"endpoint\": \"ws://localhost:9944\",\n  \"types\": {\n    \"Record\": \"Vec<u8>\",\n    \"Parameter\": \"Bool\",\n    \"Address\": \"AccountId\",\n    \"LookupSource\": \"AccountId\"\n  }\n}\n```\n\nEn este archivo, indicamos el nodo al que nos vamos a conectar y los tipos personalizados.\n\nAhora necesitamos escribir un script para conectarnos a nuestro nodo en ejecución.\n\n`src/utils/api.js`\n```js\nimport { ApiPromise, WsProvider } from \"@polkadot/api\";\nimport config from \"../config.json\";\n\nlet api;\nexport async function initApi() {\n  const provider = new WsProvider(config.endpoint);\n  api = await ApiPromise.create({\n    provider,\n    types: config.types\n  });\n  return api;\n}\n\nexport function getApi() {\n  return api;\n}\n```\n\nPara que podamos firmar transacciones con la clave de la extensión, agreguemos dos funciones para conectarse a la extensión y la función para inicializar la cuenta.\n\n`src/utils/api.js`\n```js\n...OTHER_CODE...\n\nimport {\n  web3Accounts,\n  web3Enable,\n  web3FromAddress\n} from \"@polkadot/extension-dapp\";\n\nasync function getExtension() {\n  const extensions = await web3Enable(\"demo\");\n  if (extensions.length === 0) throw new Error(\"no extension\");\n  return extensions[0];\n}\n\nexport async function initAccount(index = 0) {\n  const timeout = new Promise(resolve => {\n    setTimeout(resolve, 300);\n  });\n  await timeout;\n  await getExtension();\n  const accounts = await web3Accounts();\n  if (accounts.length > 0) {\n    const injector = await web3FromAddress(accounts[index].address);\n    api.setSigner(injector.signer);\n    return accounts[index].address;\n  }\n  throw new Error(\"no accounts\");\n}\n\n...OTHER_CODE...\n```\n\nNuestra cuenta tendrá un saldo de cero, mientras que necesitamos un poco de fondos. Entonces necesitamos crear otra función de faucet. Como lanzamos Robonomics con la `--dev` flag, tenemos una cuenta de `Alice` con un saldo grande, por lo que solicitemos fondos desde allí.\n\n`src/utils/api.js`\n```js\n...OTHER_CODE...\n\nimport { Keyring } from \"@polkadot/keyring\";\n\nexport function getBalance(account, cb) {\n  api.query.system.account(account, ({ data: { free: currentFree } }) => {\n    cb(currentFree);\n  });\n}\n\nexport const keyring = new Keyring({ type: \"sr25519\" });\n\nexport async function faucet(address) {\n  keyring.setSS58Format(api.registry.chainSS58);\n  const account = keyring.addFromUri(\"//Alice\");\n  const tx = api.tx.balances.transfer(address, 1000000000000000);\n  await tx.signAndSend(account);\n}\n\n...OTHER_CODE...\n```\n\nLa versión completa del script https://github.com/airalab/example-robonomics-dapp/blob/master/src/utils/api.js\n\nEjecutar la aplicación\n\n```sh\nyarn serve\n```\n\nCamino 2:\n\nSi inicia la aplicación con la clonación del repositorio, entonces para completar estos pasos, será suficiente con cambiar al paso 2 e instalar el resto de las dependencias.\n\n```sh\ngit checkout step-2\ncp src/config.template.json src/config.json\nyarn\nyarn serve\n```\n\n### Paso 3. Componente de Conexion de Vue\n\n#### Conectando\n\nYa hemos escrito un guión para conectarse. Ahora podemos usarlo en nuestra interfaz. Basta con llamar a la función `initApi` escrita en el componente raíz `App.vue`. Y mientras el usuario espera una conexión, le mostraremos un pequeño cargador, por ahora en forma de puntos suspensivos.\n\nCamino 1:\n\nPlantilla de componente y estilos base.\n\n`src/App.vue`\n```js\n<template>\n  <div id=\"app\">\n    <h1>Robonomics dApp</h1>\n    <div v-if=\"load\">...</div>\n    <template v-else>\n      <div v-if=\"error\" class=\"error\">{{ error }}</div>\n      <template v-else-if=\"api\">\n        connected\n      </template>\n    </template>\n  </div>\n</template>\n\n...OTHER_CODE...\n\n<style>\n#app {\n  font-family: Avenir, Helvetica, Arial, sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  text-align: center;\n  color: #2c3e50;\n  margin-top: 60px;\n}\nbutton {\n  font-size: 14px;\n  padding: 5px 12px;\n}\nbutton:hover {\n  cursor: pointer;\n}\ninput {\n  font-size: 14px;\n  padding: 5px;\n}\nselect {\n  font-size: 14px;\n  padding: 5px;\n}\nbutton:focus,\ninput:focus {\n  outline: none;\n}\n.error {\n  color: rgb(151, 31, 31);\n  font-weight: bold;\n  text-align: center;\n  margin: 10px 0;\n}\n</style>\n```\n\nExiste el código del componente donde se llamará a la función `initApi`\n\n`src/App.vue`\n```js\n<script>\nimport { initApi } from \"./utils/api\";\n\nexport default {\n  name: \"App\",\n  data() {\n    return {\n      load: false,\n      api: null,\n      error: null\n    };\n  },\n  created() {\n    this.init();\n  },\n  methods: {\n    async init() {\n      try {\n        this.load = true;\n        this.api = await initApi();\n        this.load = false;\n      } catch (error) {\n        this.error = error.message;\n        this.load = false;\n      }\n    }\n  }\n};\n</script>\n```\n\n#### Cuenta con Saldo\n\nAhora podemos usar nuestra cuenta, recargar su saldo y mostrarlo en la interfaz.\n\nAgreguemos el marcado apropiado a la plantilla.\n\n`src/App.vue`\n```js\n<template>\n\n  ...OTHER_CODE...\n\n    <template v-else>\n      <div v-if=\"error\" class=\"error\">{{ error }}</div>\n      <template v-else-if=\"api && account\">\n        <p>\n          Account: <b>{{ account }}</b> {{ balance }} |\n          <button @click=\"faucet\">\n            faucet\n          </button>\n        </p>\n      </template>\n    </template>\n\n  ...OTHER_CODE...\n\n</template>\n```\n\nAgreguemos nuevos campos para la dirección y el saldo de la cuenta.\n\n`src/App.vue`\n```js\n\n...OTHER_CODE...\n\ndata() {\n  return {\n\n    ...OTHER_CODE...\n\n    account: null,\n    balance: 0,\n\n    ...OTHER_CODE...\n\n  };\n}\n\n...OTHER_CODE...\n```\n\nNecesitamos agregar la inicialización de la cuenta a la función init y obtener su saldo\n\n`src/App.vue`\n```js\n<script>\nimport { initApi, initAccount, getBalance, faucet } from \"./utils/api\";\nimport { formatBalance } from \"@polkadot/util\";\n\n...OTHER_CODE...\n\nasync init() {\n\n  ...OTHER_CODE...\n\n  this.api = await initApi();\n  this.account = await initAccount();\n  getBalance(this.account, balance => {\n    this.balance = formatBalance(balance);\n  });\n\n  ...OTHER_CODE...\n\n}\n\n...OTHER_CODE...\n</script>\n```\n\nQueda por agregar la función de reponer el saldo, al hacer clic en el botón\n\n`src/App.vue`\n```js\n\n...OTHER_CODE...\n\n  methods: {\n    faucet() {\n      faucet(this.account);\n    },\n\n...OTHER_CODE...\n```\n\nhttps://github.com/airalab/example-robonomics-dapp/blob/step-3/src/App.vue\n\nEjecutar la aplicación\n\n```sh\nyarn serve\n```\n\nCamino 2:\n\nSi inicia la aplicación con la clonación del repositorio, para completar estos pasos, solo tendrá que pasar al paso 3.\n\n```sh\ngit checkout step-3\nyarn serve\n```\n\nComo resultado, obtendremos la siguiente imagen en el navegador\n\n![screen2](../images/build-iot-dapps/screen2.png)\n\n### Paso 4. Datalog\n\nPara guardar y leer cualquier dato en la cadena, usamos el módulo de `datalog`.\n\nPara ver un ejemplo de cómo usar este módulo, creemos un componente `Datalog.vue`.\n\nCamino 1:\n\nEn el marcado, tendremos un botón de lectura de datos `read` con un bloque, donde mostraremos una lista en forma de fecha y el propio dato. Y habrá un formulario con una entrada de texto, en el que puede ingresar cualquier dato en forma de cadena y un botón `write`.\n\n`src/components/Datalog.vue`\n```js\n<template>\n  <div>\n    <h2>Datalog</h2>\n    <button @click=\"read\">read</button> |\n    <input v-model=\"data\" :disabled=\"isWrite\" />\n    <button @click=\"write\" :disabled=\"isWrite\">write</button>\n    <div v-if=\"error\" class=\"error\">{{ error }}</div>\n    <div v-if=\"log\" class=\"log\">\n      <p v-if=\"log.length === 0\" class=\"error\">Not found</p>\n      <div v-for=\"(item, k) in log\" :key=\"k\" class=\"row\">\n        date: <b>{{ item[0] | dateFormat }}</b>\n        <br />\n        data: <b>{{ item[1] | dataFormat }}</b>\n      </div>\n    </div>\n  </div>\n</template>\n\n...OTHER_CODE...\n\n<style scoped>\n.log {\n  border: 1px solid #eee;\n  text-align: left;\n  width: 800px;\n  margin: 20px auto;\n}\n.log .row {\n  margin: 10px;\n}\n</style>\n```\n\nCódigo de componente. Aquí el punto principal al enviar una transacción es llamar a la función, a la que transferimos datos y que firmamos con nuestra cuenta, a través de api `this.api.tx.datalog.record(stringToHex(this.data)).signAsync(this.account);`\n\n`src/components/Datalog.vue`\n```js\n<script>\nimport { stringToHex, u8aToString } from \"@polkadot/util\";\n\nexport default {\n  props: [\"api\", \"account\"],\n  data() {\n    return {\n      data: \"data string\",\n      log: null,\n      isWrite: false,\n      error: \"\"\n    };\n  },\n  filters: {\n    dateFormat: function(v) {\n      return new Date(Number(v)).toLocaleString();\n    },\n    dataFormat: function(v) {\n      return u8aToString(v);\n    }\n  },\n  methods: {\n    async read() {\n      this.log = (await this.api.query.datalog.datalog(this.account)).toArray();\n    },\n    async write() {\n      try {\n        this.error = \"\";\n        this.isWrite = true;\n        const tx = await this.api.tx.datalog\n          .record(stringToHex(this.data))\n          .signAsync(this.account);\n        await tx.send(result => {\n          if (result.status.isInBlock) {\n            this.read();\n            this.isWrite = false;\n          }\n        });\n      } catch (error) {\n        this.error = error.message;\n        this.isWrite = false;\n      }\n    }\n  }\n};\n</script>\n```\n\nhttps://github.com/airalab/example-robonomics-dapp/blob/master/src/components/Datalog.vue\n\nPara cambiar entre componentes, agregue a `App.vue` la salida de nuestro componente.\n\n`src/App.vue`\n```js\n...OTHER_CODE...\n\n<template v-else-if=\"api && account\">\n  <p>\n    Account: <b>{{ account }}</b> {{ balance }} |\n    <button @click=\"faucet\">faucet</button>\n  </p>\n\n  <div>\n    <div class=\"tabs\">\n      <button\n        @click=\"tab = 'datalog'\"\n        :class=\"{ active: tab === 'datalog' }\"\n      >\n        datalog\n      </button>\n    </div>\n    <Datalog v-if=\"tab === 'datalog'\" :api=\"api\" :account=\"account\" />\n  </div>\n</template>\n\n...OTHER_CODE...\n\n<script>\nimport Datalog from \"./components/Datalog\";\n\n...OTHER_CODE...\n\nexport default {\n  name: \"App\",\n  components: {\n    Datalog\n  },\n  data() {\n    return {\n      tab: \"datalog\"\n\n...OTHER_CODE...\n</script>\n\n<style>\n...OTHER_CODE...\n\n.tabs button {\n  font-size: 14px;\n  padding: 10px 20px;\n  font-weight: bold;\n  background: #ececec;\n  border: 1px solid #aaa;\n}\n.tabs button:hover {\n  background: #bfbfbf;\n}\n.tabs button:last-child {\n  border-left: none;\n}\n.tabs button.active {\n  background: #ced5e2;\n}\n</style>\n```\n\nEjecutar la aplicación\n\n```sh\nyarn serve\n```\n\nCamino 2:\n\nSi inicia la aplicación con la clonación del repositorio, para completar estos pasos, solo tendrá que pasar al paso 4.\n\n```sh\ngit checkout step-4\nyarn serve\n```\n\nComo resultado, obtendremos la siguiente imagen en el navegador:\n\n![screen3](../images/build-iot-dapps/screen3.png)\n\n### Step 5. Lanzamiento\n\nEsta función se utiliza para iniciar y detener el robot. Para demostrar cómo usar este módulo, escribamos el componente `Launch.vue`.\n\nCamino 1:\n\nEn la plantilla del componente, tendremos un formulario donde se puede especificar la dirección del robot, el clicker ON / OFF y el botón para enviar.\n\n`src/components/Launch.vue`\n```js\n<template>\n  <div>\n    <h2>Launch</h2>\n    <input v-model=\"robot\" :disabled=\"isWrite\" placeholder=\"Robot address\" />\n    <select v-model=\"parameter\" :disabled=\"isWrite\">\n      <option value=\"ON\">ON</option>\n      <option value=\"OFF\">OFF</option>\n    </select>\n    <button @click=\"launch\" :disabled=\"isWrite\">launch</button>\n    <div v-if=\"error\" class=\"error\">{{ error }}</div>\n    <div v-if=\"log.length > 0\" class=\"log\">\n      <div v-for=\"(item, k) in log\" :key=\"k\" class=\"row\">\n        sender: <b>{{ item.sender }}</b>\n        <br />\n        robot: <b>{{ item.robot }}</b>\n        <br />\n        parameter: <b>{{ item.parameter ? \"ON\" : \"OFF\" }}</b>\n      </div>\n    </div>\n  </div>\n</template>\n\n...OTHER_CODE...\n\n<style scoped>\n.log {\n  border: 1px solid #eee;\n  text-align: left;\n  width: 800px;\n  margin: 20px auto;\n}\n.log .row {\n  margin: 10px;\n}\n</style>\n```\n\nEl código se parece al componente `Datalog.vue`. La diferencia está solo en la lectura. El robot recibirá el comando a través de eventos.\n\n`src/components/Launch.vue`\n```js\n<script>\nexport default {\n  props: [\"api\", \"account\"],\n  data() {\n    return {\n      robot: this.account,\n      parameter: \"ON\",\n      log: [],\n      isWrite: false,\n      error: \"\",\n      unsubscribe: null\n    };\n  },\n  async created() {\n    this.unsubscribe = await this.api.query.system.events(events => {\n      events.forEach(record => {\n        const { event } = record;\n        if (event.section === \"launch\" && event.method === \"NewLaunch\") {\n          const sender = event.data[0].toString();\n          const robot = event.data[1].toString();\n          const parameter = event.data[2].toHuman();\n          this.log.push({\n            sender,\n            robot,\n            parameter\n          });\n        }\n      });\n    });\n  },\n  destroyed() {\n    if (this.unsubscribe) {\n      this.unsubscribe();\n    }\n  },\n  methods: {\n    async launch() {\n      try {\n        this.error = \"\";\n        this.isWrite = true;\n        const tx = await this.api.tx.launch\n          .launch(this.robot, this.parameter === \"ON\")\n          .signAsync(this.account);\n        await tx.send(result => {\n          if (result.status.isInBlock) {\n            this.isWrite = false;\n          }\n        });\n      } catch (error) {\n        this.error = error.message;\n        this.isWrite = false;\n      }\n    }\n  }\n};\n</script>\n```\n\nhttps://github.com/airalab/example-robonomics-dapp/blob/master/src/components/Launch.vue\n\nPara la visualización, agregue un nuevo componente a `App.vue`\n\n`src/App.vue`\n```js\n<template>\n...OTHER_CODE...\n\n  <div>\n    <div class=\"tabs\">\n      <button\n        @click=\"tab = 'datalog'\"\n        :class=\"{ active: tab === 'datalog' }\"\n      >\n        datalog\n      </button>\n      <button\n        @click=\"tab = 'launch'\"\n        :class=\"{ active: tab === 'launch' }\"\n      >\n        launch\n      </button>\n    </div>\n    <Datalog v-if=\"tab === 'datalog'\" :api=\"api\" :account=\"account\" />\n    <Launch v-if=\"tab === 'launch'\" :api=\"api\" :account=\"account\" />\n  </div>\n\n...OTHER_CODE...\n</template>\n\n...OTHER_CODE...\n\n<script>\nimport Datalog from \"./components/Datalog\";\nimport Launch from \"./components/Launch\";\n\n...OTHER_CODE...\n\ncomponents: {\n  Datalog,\n  Launch\n},\n\n...OTHER_CODE...\n```\n\nRun app\n\n```sh\nyarn serve\n```\n\nCamino 2:\n\nSi inicia la aplicación con la clonación del repositorio, para completar estos pasos, solo tendrá que pasar al paso 5.\n\n```sh\ngit checkout step-5\nyarn serve\n```\n\nComo resultado, obtendremos la siguiente imagen en el navegador\n\n![screen4](../images/build-iot-dapps/screen4.png)\n\n### Paso 6. Demo\n\nEn esta demostración, tendremos un automóvil que se puede iniciar y detener a través de la dApp. El automóvil recoge un tronco durante el viaje y, después de detenerse, lo guarda en la cadena. Aquí usaremos ambos módulos, que probamos por separado, en conjunto.\n\nPara emular el comportamiento de un robot (automóvil), escribiremos una clase Robot. Usaremos la clave `Alice` como una cuenta para este robot. La clase `Robot` observará que los eventos `NewLaunch` se enciendan y apaguen. Después de encenderse, comienza a recopilar datos en el registro, en términos de datos, será solo una marca de tiempo. Y después del apagado, guarda este registro en el módulo `datalog`.\n\nCamino 1:\n\nCree el archivo `src/utils/robot.js`. El código completo del archivo https://github.com/airalab/example-robonomics-dapp/blob/master/src/utils/robot.js\n\nPara la visualización, crearemos un componente `Demo.vue`, donde tendremos un botón de inicio, una animación de automóvil y una salida de registro.\n\n`src/components/Demo.vue`\n```js\n<template>\n  <div>\n    <h2>Demo</h2>\n    <template v-if=\"robot\">\n      <h3>Robot: {{ robot.address }}</h3>\n      <p v-if=\"robot.state\">Driver: {{ robot.driver }}</p>\n      <button @click=\"run\" :disabled=\"isWrite\">\n        <template v-if=\"!robot.state\">run</template>\n        <template v-else>stop</template>\n      </button>\n      <div class=\"road\">\n        <div\n          class=\"robot\"\n          :class=\"[robot.state ? 'robot-play' : 'robot-stop']\"\n        ></div>\n      </div>\n      <div v-if=\"error\" class=\"error\">{{ error }}</div>\n      <div v-if=\"log\" class=\"log\">\n        <p v-if=\"log.length === 0\" class=\"error\">Not found</p>\n        <div v-for=\"(item, k) in log\" :key=\"k\" class=\"row\">\n          <b>{{ item[0] | dateFormat }}</b>\n          <pre>{{ item[1] | dataFormat }}</pre>\n        </div>\n      </div>\n    </template>\n  </div>\n</template>\n\n...OTHER_CODE...\n\n<style scoped>\n.log {\n  border: 1px solid #eee;\n  text-align: left;\n  width: 800px;\n  margin: 20px auto;\n  height: 500px;\n  overflow-y: auto;\n}\n.log .row {\n  margin: 10px;\n  border-bottom: 1px solid #eee;\n}\n.road {\n  width: 1000px;\n  margin: 20px auto;\n  background-color: #eee;\n  padding: 20px 0;\n  border: 5px solid #a5a5a5;\n  border-left: 0;\n  border-right: 0;\n  position: relative;\n}\n.road::before {\n  content: \" \";\n  width: 1000px;\n  border-top: 5px dashed #a5a5a5;\n  position: absolute;\n  top: 50%;\n  left: 0;\n}\n@keyframes move {\n  from {\n    transform: translateX(0);\n  }\n  to {\n    transform: translateX(100%);\n  }\n}\n.robot {\n  height: 100px;\n  width: 100px;\n  color: #fff;\n  font-weight: bold;\n  font-style: 14px;\n  animation: move 30s linear infinite;\n  border-radius: 0 10px 10px 0;\n  background: url(\"../images/build-iot-dapps/car.png\") no-repeat 0 0;\n  background-size: cover;\n}\n.robot-play {\n  animation-play-state: running;\n}\n.robot-stop {\n  animation-play-state: paused;\n}\n</style>\n```\n\nCódigo de componente. Aquí necesitamos crear una instancia de la clase Robot y una función de inicio y detención.\n\n`src/components/Demo.vue`\n```js\n...OTHER_CODE...\n\n<script>\nimport { u8aToString } from \"@polkadot/util\";\nimport Robot from \"../utils/robot\";\n\nexport default {\n  props: [\"api\", \"account\"],\n  data() {\n    return {\n      isWrite: false,\n      error: \"\",\n      robot: null,\n      log: []\n    };\n  },\n  filters: {\n    dateFormat: function(v) {\n      return new Date(Number(v)).toLocaleString();\n    },\n    dataFormat: function(v) {\n      return JSON.parse(u8aToString(v));\n    }\n  },\n  async created() {\n    this.robot = new Robot(\"//Alice\", this.api);\n    await this.robot.subscribeLog(r => {\n      this.log = r.reverse().map(item => {\n        return [item[0], item[1]];\n      });\n    });\n  },\n  destroyed() {\n    this.robot.destroy();\n  },\n  methods: {\n    async run() {\n      try {\n        this.error = \"\";\n        this.isWrite = true;\n        const tx = await this.api.tx.launch\n          .launch(this.robot.account.address, !this.robot.state)\n          .signAsync(this.account);\n        await tx.send(result => {\n          if (result.status.isInBlock) {\n            this.isWrite = false;\n          }\n        });\n      } catch (error) {\n        this.error = error.message;\n        this.isWrite = false;\n      }\n    }\n  }\n};\n</script>\n\n...OTHER_CODE...\n```\n\nhttps://github.com/airalab/example-robonomics-dapp/blob/master/src/components/Demo.vue\n\nAgreguemos otra imagen de nuestro automóvil a `src/images/build-iot-dapps/car.png`and `src/assets/car.png`. Ejemplo https://github.com/airalab/example-robonomics-dapp/blob/master/src/assets/car.png\n\nPara la visualización, agregue un nuevo componente a `App.vue`\n\n`src/App.vue`\n```js\n<template>\n\n...OTHER_CODE...\n\n  <div>\n    <div class=\"tabs\">\n      <button\n        @click=\"tab = 'datalog'\"\n        :class=\"{ active: tab === 'datalog' }\"\n      >\n        datalog\n      </button>\n      <button\n        @click=\"tab = 'launch'\"\n        :class=\"{ active: tab === 'launch' }\"\n      >\n        launch\n      </button>\n      <button @click=\"tab = 'demo'\" :class=\"{ active: tab === 'demo' }\">\n        demo\n      </button>\n    </div>\n    <Datalog v-if=\"tab === 'datalog'\" :api=\"api\" :account=\"account\" />\n    <Launch v-if=\"tab === 'launch'\" :api=\"api\" :account=\"account\" />\n    <Demo v-if=\"tab === 'demo'\" :api=\"api\" :account=\"account\" />\n  </div>\n\n...OTHER_CODE...\n\n</template>\n\n...OTHER_CODE...\n\n<script>\nimport Datalog from \"./components/Datalog\";\nimport Launch from \"./components/Launch\";\nimport Demo from \"./components/Demo\";\n\n...OTHER_CODE...\n\ncomponents: {\n  Datalog,\n  Launch,\n  Demo\n},\n\n...OTHER_CODE...\n```\n\nEjecutar la aplicación\n\n```sh\nyarn serve\n```\n\nCamino 2:\n\nSi inicia la aplicación con la clonación del repositorio, para completar estos pasos, solo tendrá que pasar al paso 6.\n\n```sh\ngit checkout step-6\nyarn serve\n```\n\nComo resultado, obtendremos la siguiente imagen en el navegador\n\n![screen5](../images/build-iot-dapps/screen5.png)\n\nCon esto concluye nuestra lección.\n\nGracias!\n","tools":[],"fileInfo":{"path":"es/wschool2021-build-dapp-for-end-users.md","name":"wschool2021-build-dapp-for-end-users"}}},"context":{}}